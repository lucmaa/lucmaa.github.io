{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/polarbear/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/polarbear/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/blank.gif","path":"lib/fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading.gif","path":"lib/fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading@2x.gif","path":"lib/fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_overlay.png","path":"lib/fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite@2x.png","path":"lib/fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite.png","path":"lib/fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.css","path":"lib/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.js","path":"lib/fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.pack.js","path":"lib/fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/js/src/theme.js","path":"js/src/theme.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/jquery/jquery-3.1.1.min.js","path":"lib/jquery/jquery-3.1.1.min.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/fancybox_buttons.png","path":"lib/fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-media.js","path":"lib/fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1}],"Cache":[{"_id":"themes/polarbear/LICENSE","hash":"6fd796a4c624297885ceed920ac7130a96f29a85","modified":1582702650221},{"_id":"themes/polarbear/README.md","hash":"0e40f3989a2c3799849af6e731a2ff85f7a7e79b","modified":1582702650223},{"_id":"themes/polarbear/_config.yml","hash":"35859d95079de61d29a1132b8448ebe9b23fade3","modified":1582702650225},{"_id":"source/about/index.md","hash":"8f27e9519376439cc7f119394608c98aa28f7d0d","modified":1581131262148},{"_id":"source/_posts/debug-x11-with-tcpdump.md","hash":"9df32bb202c0116e574d79d9164cd8db01305d6a","modified":1582529977623},{"_id":"source/_posts/gcc-attribute.md","hash":"c5483a97585a901fb3319011ccdd901086d48013","modified":1582944987345},{"_id":"source/_posts/install-cuda.md","hash":"9cc2f667ee4b2741dfccefd85ae40b3afcb62366","modified":1585478986418},{"_id":"source/_posts/ptx.md","hash":"0c31481e439972ccb09f59d4e9ca098bce285448","modified":1589716118544},{"_id":"source/_posts/mesa.md","hash":"d153153a651cfa01e98c73504709a766fb51e111","modified":1583153908285},{"_id":"source/_posts/regex-in-vi.md","hash":"5ab55db0a30e642c2b45beebe5648b7a6cd575d0","modified":1583027837669},{"_id":"source/_posts/switch-gcc.md","hash":"cdd2e86f1817ac70d2bd652b3ceb64222ec689cb","modified":1590325382642},{"_id":"source/_posts/windows-insider-program.md","hash":"a20b14b2df9a5b54dc89987e42278e84c36514a3","modified":1581158787133},{"_id":"themes/polarbear/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1582702650153},{"_id":"themes/polarbear/.git/config","hash":"849456c802179d225fbdb4ca5c7f27122ac6c252","modified":1582702650201},{"_id":"themes/polarbear/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1582702631044},{"_id":"themes/polarbear/.git/index","hash":"623943495d0b3b22932c6b8aa7c5c0fce9916698","modified":1582702650602},{"_id":"themes/polarbear/.git/packed-refs","hash":"df78d2bc3849aa1cfa8251e16fb8b71d94880980","modified":1582702650111},{"_id":"themes/polarbear/layout/_layout.swig","hash":"cf06c526bd17080b58b61601bc7daf83bd67afa1","modified":1582702650238},{"_id":"themes/polarbear/layout/archive.swig","hash":"600c71de731ac0ac8c281c3c9df1d7e9b62d2a9d","modified":1582702650355},{"_id":"themes/polarbear/layout/index.swig","hash":"5c1dce2ea06d8de6f05f92f95cb1449cefc846bc","modified":1582702650361},{"_id":"themes/polarbear/layout/page.swig","hash":"a168c6e1dcf21af6408a713f8512b77de0dc60f3","modified":1582702650364},{"_id":"themes/polarbear/layout/categories.swig","hash":"21987803e162bd9383502d9de07d5d531b78cb53","modified":1582702650358},{"_id":"themes/polarbear/layout/post.swig","hash":"f7a8b96953374694c50d131b1b760fd84b2d2d51","modified":1582702650366},{"_id":"themes/polarbear/languages/zh-cn.yml","hash":"be347d8f215c1d36a7a906143b1411e5aaf5d500","modified":1582702650234},{"_id":"themes/polarbear/languages/default.yml","hash":"5687525dd72a436ce0970f0b844dc7251069400a","modified":1582702650228},{"_id":"themes/polarbear/languages/en.yml","hash":"5687525dd72a436ce0970f0b844dc7251069400a","modified":1582702650232},{"_id":"themes/polarbear/source/favicon.ico","hash":"7d7c441f635c35b73f060f698773b14b7f306f4c","modified":1582702650490},{"_id":"source/_posts/mesa/glXChooseVisual.png","hash":"ea41d5081584f0b0d11112b4cc4675df8b7fdf5b","modified":1581675096660},{"_id":"source/_posts/mesa/gdb.svg","hash":"db978e382575b43dbcf404fa61264635e93672f8","modified":1582600009491},{"_id":"source/_posts/mesa/osdemo.jpg","hash":"b8ba59aa45e84f32b188d6ca027b9bbe1b86c48a","modified":1581122574695},{"_id":"source/_posts/mesa/glxgears.png","hash":"4435b498dd5235d936be5e3a1ad1784726648203","modified":1581943282348},{"_id":"themes/polarbear/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1582702631085},{"_id":"themes/polarbear/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1582702631073},{"_id":"themes/polarbear/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1582702631089},{"_id":"themes/polarbear/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1582702631051},{"_id":"themes/polarbear/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1582702631077},{"_id":"themes/polarbear/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1582702631065},{"_id":"themes/polarbear/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1582702631093},{"_id":"themes/polarbear/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1582702631061},{"_id":"themes/polarbear/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1582702631069},{"_id":"themes/polarbear/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1582702631100},{"_id":"themes/polarbear/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1582702631081},{"_id":"themes/polarbear/.git/logs/HEAD","hash":"6e72c36d905da7be5f8cb8b740896f7c300f0035","modified":1582702650173},{"_id":"themes/polarbear/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1582702631056},{"_id":"themes/polarbear/layout/_partial/comments.swig","hash":"9ba815734a4d807859f0aeafd5536b2d35d26074","modified":1582702650283},{"_id":"themes/polarbear/layout/_partial/head.swig","hash":"44c45d90d9a3db3401f6aa219cd26f38cdd0960b","modified":1582702650291},{"_id":"themes/polarbear/layout/_partial/footer.swig","hash":"4b88f30ad6218c87d27bc5c5b37bbbd97732cf59","modified":1582702650286},{"_id":"themes/polarbear/layout/_partial/pagination.swig","hash":"3843e523b9a7a1c5973d0c2de05cc88467733e09","modified":1582702650298},{"_id":"themes/polarbear/layout/_partial/widget.swig","hash":"d8181794388ef3baa26c2d5cf8d71ae05472b32e","modified":1582702650301},{"_id":"themes/polarbear/layout/_partial/header.swig","hash":"2e7d1faf49dadbf87b5925ff8da643cb470d6199","modified":1582702650294},{"_id":"themes/polarbear/layout/_macro/archive.swig","hash":"0f298085c0a1c556b41a5785e9fb3f2cacf01e34","modified":1582702650244},{"_id":"themes/polarbear/layout/_macro/post.swig","hash":"bff84f71578e00ba349f55f11fdece1be776fd6d","modified":1582702650248},{"_id":"themes/polarbear/layout/_script/analytics.swig","hash":"24ba4a8adcaf09c9ede76405ee732385595d8e39","modified":1582702650337},{"_id":"themes/polarbear/layout/_script/comments.swig","hash":"256713e117d67e2caad21db52bc0d51460e4ff7e","modified":1582702650341},{"_id":"themes/polarbear/layout/_script/libs.swig","hash":"615f82ddd2f89e87a604b51773fd719c78f90580","modified":1582702650349},{"_id":"themes/polarbear/layout/_script/config.swig","hash":"4532063827e51b5c0dc3f58ca8c37896959887ac","modified":1582702650345},{"_id":"themes/polarbear/layout/_script/theme.swig","hash":"44582de16d91f5cde5fa28a21db408385a46ff8e","modified":1582702650353},{"_id":"themes/polarbear/source/css/_layout.scss","hash":"adfe6b08a183326e2115974860d1862288d4789c","modified":1582702650405},{"_id":"themes/polarbear/source/css/_base.scss","hash":"27c36dfe4b2d159c64e666bfe8561fbdc591e6a5","modified":1582702650374},{"_id":"themes/polarbear/source/css/style.scss","hash":"2f1d29a63c3c8f8c615049b0233db528b6ab3230","modified":1582702650487},{"_id":"themes/polarbear/source/css/_variables.scss","hash":"5f2e9eea2dd5c3886b9f84feace4ddfb73c04ddc","modified":1582702650484},{"_id":"source/_posts/mesa/OSMesaCreateContextExt.png","hash":"77769f7a206b51f772da21dc1deed36573da1b75","modified":1581390352228},{"_id":"source/_posts/mesa/glXCreateContext.png","hash":"e27e2794cbf443f86d2852a1e7844d98892fe15e","modified":1581672585680},{"_id":"themes/polarbear/.git/objects/pack/pack-00d4d1b04a07eee4483b3a3ae17a9e278a0e0e2b.idx","hash":"e5cd0cf9b3f434d1d3a78a629f75343c6683fcc9","modified":1582702650036},{"_id":"themes/polarbear/.git/refs/heads/master","hash":"3cc12d47f4fb6581dd94b416554c7d491a166d7b","modified":1582702650171},{"_id":"themes/polarbear/layout/_partial/_head/meta.swig","hash":"5eef6defbaf10f3f6d3b341d2d1af2e4d7aeb5a9","modified":1582702650260},{"_id":"themes/polarbear/layout/_partial/_widget/custom.swig","hash":"3fd8e37b94982927fdd0eaa1f658ada660f23b9c","modified":1582702650274},{"_id":"themes/polarbear/layout/_partial/_widget/tags.swig","hash":"a14e2bda31b15cac11c29d0abb623543a6c87edc","modified":1582702650279},{"_id":"themes/polarbear/layout/_partial/_widget/categories.swig","hash":"8bb8094fd3d96c0dd7e58fd658384a5df3a7e2ec","modified":1582702650268},{"_id":"themes/polarbear/layout/_script/_analytics/google-analytics.swig","hash":"5143d9e510bfd98723a009780ba23aebade21b29","modified":1582702650318},{"_id":"themes/polarbear/layout/_script/_analytics/baidu-analytics.swig","hash":"707864f34f7750a438817acef927f1e4075c5cf8","modified":1582702650313},{"_id":"themes/polarbear/layout/_script/_comments/duoshou.swig","hash":"582cf94bc12b56c6a16b5f3aa0067b51f74b0d40","modified":1582702650333},{"_id":"themes/polarbear/layout/_script/_comments/disqus.swig","hash":"f0e8b2ff1556622c0dee10a82e77646695b0f8dd","modified":1582702650327},{"_id":"themes/polarbear/source/css/_common/_utils.scss","hash":"7719505ff3185a9f8fad05fe092fa91dd63d900c","modified":1582702650394},{"_id":"themes/polarbear/source/css/_common/_normalize.scss","hash":"259a1a0584f43efa6de2573a45fedfd59d4f39c0","modified":1582702650389},{"_id":"themes/polarbear/source/css/_custom/_custom.scss","hash":"d0873cd8554d515282a6792fcc3f5bd4a256b7a6","modified":1582702650402},{"_id":"themes/polarbear/source/css/_common/_animation.scss","hash":"725af3ea621de186d6d61749836d5b491a96c1e4","modified":1582702650382},{"_id":"themes/polarbear/source/css/_partial/_back-to-top.scss","hash":"c6f586ac04a9a0f3633dadf5c66be9e0c4027f1d","modified":1582702650418},{"_id":"themes/polarbear/source/css/_partial/_archive.scss","hash":"d4fa3756a4cab145f76fccc3c69d81b3412cec36","modified":1582702650413},{"_id":"themes/polarbear/source/css/_partial/_categories.scss","hash":"eb9fa27704fa280c6e8cc7b7f44b283cd2fe4ad3","modified":1582702650422},{"_id":"themes/polarbear/source/css/_partial/_header.scss","hash":"b4e97e6704ab530ec3b789866d689b736e36de9e","modified":1582702650431},{"_id":"themes/polarbear/source/css/_partial/_footer.scss","hash":"5d708caa8a96f84642404fe8a0d7a755092710db","modified":1582702650427},{"_id":"themes/polarbear/source/css/_partial/_iconfont.scss","hash":"ae9d1019bdbe6de4fe97aabbd42f489039e978a0","modified":1582702650435},{"_id":"themes/polarbear/source/css/_partial/_pagination.scss","hash":"7362208b41453429adae449acc916f8633077248","modified":1582702650439},{"_id":"themes/polarbear/source/css/_partial/_post.scss","hash":"71bfa582c26c491c8791dadbc3cb135284a123a2","modified":1582702650443},{"_id":"themes/polarbear/source/css/_partial/_widget.scss","hash":"2fcea4e8e43b79c73bf4bd6dbf0c1a2368d4c6ef","modified":1582702650480},{"_id":"themes/polarbear/source/css/_partial/_tags.scss","hash":"1928c8483f51035edccd6899d7f4ee06673f2804","modified":1582702650475},{"_id":"themes/polarbear/source/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1582702650518},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1582702650524},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1582702650528},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1582702650532},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1582702650541},{"_id":"themes/polarbear/source/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1582702650536},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.css","hash":"79df8b1839cbcb82a0fd9738289eb43c1bc77026","modified":1582702650582},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.js","hash":"39357ff994e53ea15c582b6106094396835a8be0","modified":1582702650587},{"_id":"themes/polarbear/source/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1582702650592},{"_id":"themes/polarbear/source/js/src/theme.js","hash":"6b76d3006694d56c843b8f968f224985a3fcce4e","modified":1582702650507},{"_id":"themes/polarbear/source/js/src/bootstrap.js","hash":"edb8690492039f4a4c9b83a3b9abda6d8a214984","modified":1582702650502},{"_id":"themes/polarbear/.git/objects/pack/pack-00d4d1b04a07eee4483b3a3ae17a9e278a0e0e2b.pack","hash":"66421eda425b04ee1bc4a320854e9d7a955b7a31","modified":1582702650034},{"_id":"themes/polarbear/source/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1582702650601},{"_id":"source/_posts/mesa/PopMatrix.png","hash":"0bbbc07f08e0a518cb3cd43f855958a945257d12","modified":1581402758086},{"_id":"themes/polarbear/.git/logs/refs/heads/master","hash":"6e72c36d905da7be5f8cb8b740896f7c300f0035","modified":1582702650183},{"_id":"themes/polarbear/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1582702650141},{"_id":"themes/polarbear/source/css/_partial/_post/_header.scss","hash":"ceca6f4b00154542c57bc6fe451e01892a9338d2","modified":1582702650469},{"_id":"themes/polarbear/source/css/_partial/_post/_content.scss","hash":"899c7c25bfa4fe00d85734af0d71bc4caf2a7337","modified":1582702650459},{"_id":"themes/polarbear/source/css/_partial/_post/_code.scss","hash":"446dbbc70ba45e41079e2954549c248f5affc7c0","modified":1582702650452},{"_id":"themes/polarbear/source/css/_partial/_post/_footer.scss","hash":"d4c0fc62e69412304691d58984fec0aa963e1117","modified":1582702650464},{"_id":"themes/polarbear/source/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1582702650549},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1582702650565},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1582702650556},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1582702650561},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1582702650575},{"_id":"themes/polarbear/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1582702650570},{"_id":"themes/polarbear/.git/logs/refs/remotes/origin/HEAD","hash":"6e72c36d905da7be5f8cb8b740896f7c300f0035","modified":1582702650140},{"_id":"source/_posts/windows-insider-program/windows_update.png","hash":"890f8c06c452a1bdddadbb0cd2f2502f5b8109a8","modified":1581155536094},{"_id":"public/about/index.html","hash":"186d6933f2c7c9b229c3420d8ef0c4d4fad5ed27","modified":1590184905207},{"_id":"public/switch-gcc/index.html","hash":"95a085b4fe8d2d9442387eb6d380c8fea881c7da","modified":1590184905207},{"_id":"public/ptx/index.html","hash":"c879688e07f27a254f75f7fb30e6843d9b299df9","modified":1590184905207},{"_id":"public/gcc-attribute/index.html","hash":"26cd1fc607ecfed054249a7559f42ebda0bfbb3f","modified":1590184905207},{"_id":"public/windows-insider-program/index.html","hash":"33ffac1f13138b58ab96fb345c4daf359c1c6028","modified":1590184905207},{"_id":"public/regex-in-vi/index.html","hash":"ff4823ca737e9bbbbc4335afdd808359e9448ac0","modified":1590184905207},{"_id":"public/archives/index.html","hash":"2e68756c8db95850d69075386d280700eb4778d8","modified":1590184905207},{"_id":"public/index.html","hash":"a7389f000bee53a3561f46fcb11ac08c319b32db","modified":1590184905207},{"_id":"public/tags/WSL/index.html","hash":"d18b748ea9675f3f92ce9a94ebf4dcf058009193","modified":1590184905207},{"_id":"public/tags/OpenGL/index.html","hash":"0dd93bb1b5495f49fa506b262702c7f86c9908c1","modified":1590184905207},{"_id":"public/tags/regex/index.html","hash":"add544777cf3cbbe51cc4a0d6f407f39e25f5da7","modified":1590184905207},{"_id":"public/tags/X11/index.html","hash":"bd16de7b214897d5e518152d7db3d2a7d2a3734d","modified":1590184905207},{"_id":"public/tags/CUDA-WSL/index.html","hash":"7d238ace5fe1058e3c52200aad0d7ee5a8c94356","modified":1590184905207},{"_id":"public/tags/gcc/index.html","hash":"083a9ba5a9b98d66a8d75527c3c18b2d738f02c2","modified":1590184905207},{"_id":"public/install-cuda/index.html","hash":"d9efce320f5d363de4fc347d9dec3f17156a607a","modified":1590184905207},{"_id":"public/debug-x11-with-tcpdump/index.html","hash":"139cd0caccc32edd1650afa666b52ace1accff2d","modified":1590184905207},{"_id":"public/mesa/index.html","hash":"0beb979b92cbe75ca00290be926a807ae0bb48cb","modified":1590184905207},{"_id":"public/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1590184905207},{"_id":"public/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1590184905207},{"_id":"public/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1590184905207},{"_id":"public/favicon.ico","hash":"7d7c441f635c35b73f060f698773b14b7f306f4c","modified":1590184905207},{"_id":"public/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1590184905207},{"_id":"public/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1590184905207},{"_id":"public/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1590184905207},{"_id":"public/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1590184905207},{"_id":"public/mesa/glXChooseVisual.png","hash":"ea41d5081584f0b0d11112b4cc4675df8b7fdf5b","modified":1590184905207},{"_id":"public/mesa/glxgears.png","hash":"4435b498dd5235d936be5e3a1ad1784726648203","modified":1590184905207},{"_id":"public/mesa/gdb.svg","hash":"db978e382575b43dbcf404fa61264635e93672f8","modified":1590184905207},{"_id":"public/mesa/osdemo.jpg","hash":"b8ba59aa45e84f32b188d6ca027b9bbe1b86c48a","modified":1590184905207},{"_id":"public/lib/fancybox/jquery.fancybox.css","hash":"79df8b1839cbcb82a0fd9738289eb43c1bc77026","modified":1590184905207},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1590184905207},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1590184905207},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1590184905207},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1590184905207},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1590184905207},{"_id":"public/js/src/theme.js","hash":"6b76d3006694d56c843b8f968f224985a3fcce4e","modified":1590184905207},{"_id":"public/js/src/bootstrap.js","hash":"edb8690492039f4a4c9b83a3b9abda6d8a214984","modified":1590184905207},{"_id":"public/css/style.css","hash":"6c984adec47cf381e9b573b902790ed81cd00cac","modified":1590184905207},{"_id":"public/mesa/OSMesaCreateContextExt.png","hash":"77769f7a206b51f772da21dc1deed36573da1b75","modified":1590184905207},{"_id":"public/mesa/glXCreateContext.png","hash":"e27e2794cbf443f86d2852a1e7844d98892fe15e","modified":1590184905207},{"_id":"public/mesa/PopMatrix.png","hash":"0bbbc07f08e0a518cb3cd43f855958a945257d12","modified":1590184905207},{"_id":"public/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1590184905207},{"_id":"public/lib/fancybox/jquery.fancybox.js","hash":"39357ff994e53ea15c582b6106094396835a8be0","modified":1590184905207},{"_id":"public/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1590184905207},{"_id":"public/windows-insider-program/windows_update.png","hash":"890f8c06c452a1bdddadbb0cd2f2502f5b8109a8","modified":1590184905207}],"Category":[],"Data":[],"Page":[{"title":"","date":"2020-02-05T11:14:44.000Z","_content":"\n\n{% blockquote Albert Einstein %}\nEverything that can be counted does not necessarily count; Everything that counts cannot necessarily be counted.\n{% endblockquote %}\n","source":"about/index.md","raw":"---\ntitle:\ndate: 2020-02-05 19:14:44\n---\n\n\n{% blockquote Albert Einstein %}\nEverything that can be counted does not necessarily count; Everything that counts cannot necessarily be counted.\n{% endblockquote %}\n","updated":"2020-02-08T03:07:42.148Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckair1fya0000pvk70errhui8","content":"<blockquote><p>Everything that can be counted does not necessarily count; Everything that counts cannot necessarily be counted.</p>\n<footer><strong>Albert Einstein</strong></footer></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote><p>Everything that can be counted does not necessarily count; Everything that counts cannot necessarily be counted.</p>\n<footer><strong>Albert Einstein</strong></footer></blockquote>\n"}],"Post":[{"title":"Debugging X11 with tcpdump","date":"2020-02-24T01:18:03.000Z","_content":"\nX11 is designed as client-server mode. The communication between the X client and server complies with TCP protocol. Recently I have a Windows X server VcXsrv installed on my Windows 10 and I debug an OpenGL demo glxgears on the WSL2 with tcpdump.\n\n## Environment\nWSL2 is equipped with its own networking interface like a virtual machine. \n\n``` bash\n$ ifconfig\neth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 172.28.233.193  netmask 255.255.240.0  broadcast 172.28.239.255\n        inet6 fe80::215:5dff:fe27:9562  prefixlen 64  scopeid 0x20<link>\n        ether 00:15:5d:27:95:62  txqueuelen 1000  (Ethernet)\n        RX packets 221579  bytes 15160108 (15.1 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 306691  bytes 15714800233 (15.7 GB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 392  bytes 43340 (43.3 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 392  bytes 43340 (43.3 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n```\n\n``` bash\n$ /mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -C \"ipconfig\"\n\nWindows IP Configuration\n\n\nEthernet adapter vEthernet (WSL):\n\n   Connection-specific DNS Suffix  . : \n   Link-local IPv6 Address . . . . . : fe80::412b:ad3:5548:67ba%38\n   IPv4 Address. . . . . . . . . . . : 172.28.224.1\n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : \n\nWireless LAN adapter ±¾µØÁ¬½Ó* 1:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n\nWireless LAN adapter ±¾µØÁ¬½Ó* 10:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n\nWireless LAN adapter WLAN:\n\n   Connection-specific DNS Suffix  . : DHCP HOST\n   Link-local IPv6 Address . . . . . : fe80::954b:e66f:4065:20af%20\n   IPv4 Address. . . . . . . . . . . : 192.168.2.100\n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\n   Default Gateway . . . . . . . . . : 192.168.2.1\n```\n\nAfter starting up the X server VcXsrv, you need to export the environmnet variable **`DISPLAY`** on the WSL. In case of the vEthernet configuration changed after rebooting you'd better do it like this:\n\n``` bash\nexport DISPLAY=$(grep 'nameserver' /etc/resolv.conf | awk '{print $2}'):0\n```\n\nNOTE: The Firewall between the host and WSL2 must be disabled or your X client can not connect VcXsrv.\n\n## Debugging\n\nI trace the demo glxgears using gdb and tcpdump at the same time.\n\n- gdb\n\n``` shell\ngdb -q -tui glxgears\n```\n- tcpdump\n\n``` shell\nsudo tcpdump -vvX not icmp and not arp and not udp and portrange 37900-37999 -w x110224.pcap\n```\n- vv: verboser than -v\n- X: show the packet's content\n- not icmp: filter out icmp packets\n- not arp: filter out arp packets\n- not udp: filter out udp packets\n- portrange 37900-37999: listening on the ports from 37900 to 37999\n- w x110224.pcap: save the packet captures into the file\n\n``` shell\ntcpdump -X -r x110224.pcap\n```\n\n```\nreading from file /home/luc/github/x110224.pcap, link-type EN10MB (Ethernet)\n09:11:56.659816 IP 172.28.233.193.37950 > 172.28.224.1.x11: Flags [P.], seq 2796598646:2796598658, ack 1053772981, win 259, length 12\n\t0x0000:  4500 0034 1d84 4000 4006 fb43 ac1c e9c1  E..4..@.@..C....\n\t0x0010:  ac1c e001 943e 1770 a6b0 b576 3ecf 4cb5  .....>.p...v>.L.\n\t0x0020:  5018 0103 2223 0000 6200 0300 0400 0000  P...\"#..b.......\n\t0x0030:  4452 4932                                DRI2\n09:11:56.660218 IP 172.28.224.1.x11 > 172.28.233.193.37950: Flags [P.], seq 1:33, ack 12, win 8211, length 32\n\t0x0000:  4500 0048 d9d7 4000 8006 fedb ac1c e001  E..H..@.........\n\t0x0010:  ac1c e9c1 1770 943e 3ecf 4cb5 a6b0 b582  .....p.>>.L.....\n\t0x0020:  5018 2013 cf36 0000 0100 0a00 0000 0000  P....6..........\n\t0x0030:  0000 0000 0000 0000 0000 0000 0000 0000  ................\n\t0x0040:  0000 0000 0000 0000                      ........\n09:11:56.660232 IP 172.28.233.193.37950 > 172.28.224.1.x11: Flags [.], ack 33, win 259, length 0\n\t0x0000:  4500 0028 1d85 4000 4006 fb4e ac1c e9c1  E..(..@.@..N....\n\t0x0010:  ac1c e001 943e 1770 a6b0 b582 3ecf 4cd5  .....>.p....>.L.\n\t0x0020:  5010 0103 2217 0000                      P...\"...\n\n```\n\nwhat codes sends and receives these packets? The first two twenty-byted segments are IP header (20 bytes without option) and TCP header (20 bytes without option) separately in these packets.\n\nThe source code snippet:\n``` c\nBool\nXQueryExtension(\n    register Display *dpy,\n    _Xconst char *name,\n    int *major_opcode,  /* RETURN */\n    int *first_event,   /* RETURN */\n    int *first_error)\t/* RETURN */\n{\n    xQueryExtensionReply rep;\n    register xQueryExtensionReq *req;\n\n    LockDisplay(dpy);\n    GetReq(QueryExtension, req);\n    req->nbytes = name ? strlen(name) : 0;\n    req->length += (req->nbytes+(unsigned)3)>>2;\n    _XSend(dpy, name, (long)req->nbytes);\n    (void) _XReply (dpy, (xReply *)&rep, 0, xTrue);\n    *major_opcode = rep.major_opcode;\n    *first_event = rep.first_event;\n    *first_error = rep.first_error;\n    UnlockDisplay(dpy);\n    SyncHandle();\n    return (rep.present);\n}\n```\n\nThe gdb log:\n```\nStarting program: /mnt/c/Users/lulu/Documents/github/demos/src/xdemos/glxgears \n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n\nBreakpoint 1, XextAddDisplay (extinfo=0x7ffff7e77380 <_dri2Info_data>, dpy=0x55555555d2a0, \n    ext_name=0x7ffff7e76780 <dri2ExtensionName> \"DRI2\", hooks=0x7ffff7e767a0 <dri2ExtensionHooks>, nevents=0, data=0x0)\n    at extutil.c:103\nXInitExtension (dpy=dpy@entry=0x55555555d2a0, name=name@entry=0x7ffff7e76780 <dri2ExtensionName> \"DRI2\")\n    at InitExt.c:44\nXQueryExtension (dpy=dpy@entry=0x55555555d2a0, name=name@entry=0x7ffff7e76780 <dri2ExtensionName> \"DRI2\", \n    major_opcode=major_opcode@entry=0x7fffffffd984, first_event=first_event@entry=0x7fffffffd988, \n    first_error=first_error@entry=0x7fffffffd98c) at QuExt.c:39\n$2 = {\n  reqType = 0x62, \n  pad = 0x0, \n  length = 0x3, \n  nbytes = 0x4, \n  pad1 = 0x0, \n  pad2 = 0x0\n}\n$3 = {\n  type = 0x1, \n  pad1 = 0x0, \n  sequenceNumber = 0xa, \n  length = 0x0, \n  present = 0x0, \n  major_opcode = 0x0, \n  first_event = 0x0, \n  first_error = 0x0, \n  pad3 = 0x0, \n  pad4 = 0x0, \n  pad5 = 0x0, \n  pad6 = 0x0, \n  pad7 = 0x0\n}\n```\n\n`$2` is **Request** packet content to VcXsrv, `$3` is **Reply** packet content from VcXsrv. Even that we can notice the three-way handshake of TCP from the zero-lengthed packet in x110224.pcap. \n","source":"_posts/debug-x11-with-tcpdump.md","raw":"---\ntitle: Debugging X11 with tcpdump\ndate: 2020-02-24 09:18:03\ntags: [X11]\n---\n\nX11 is designed as client-server mode. The communication between the X client and server complies with TCP protocol. Recently I have a Windows X server VcXsrv installed on my Windows 10 and I debug an OpenGL demo glxgears on the WSL2 with tcpdump.\n\n## Environment\nWSL2 is equipped with its own networking interface like a virtual machine. \n\n``` bash\n$ ifconfig\neth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 172.28.233.193  netmask 255.255.240.0  broadcast 172.28.239.255\n        inet6 fe80::215:5dff:fe27:9562  prefixlen 64  scopeid 0x20<link>\n        ether 00:15:5d:27:95:62  txqueuelen 1000  (Ethernet)\n        RX packets 221579  bytes 15160108 (15.1 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 306691  bytes 15714800233 (15.7 GB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10<host>\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 392  bytes 43340 (43.3 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 392  bytes 43340 (43.3 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n```\n\n``` bash\n$ /mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -C \"ipconfig\"\n\nWindows IP Configuration\n\n\nEthernet adapter vEthernet (WSL):\n\n   Connection-specific DNS Suffix  . : \n   Link-local IPv6 Address . . . . . : fe80::412b:ad3:5548:67ba%38\n   IPv4 Address. . . . . . . . . . . : 172.28.224.1\n   Subnet Mask . . . . . . . . . . . : 255.255.240.0\n   Default Gateway . . . . . . . . . : \n\nWireless LAN adapter ±¾µØÁ¬½Ó* 1:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n\nWireless LAN adapter ±¾µØÁ¬½Ó* 10:\n\n   Media State . . . . . . . . . . . : Media disconnected\n   Connection-specific DNS Suffix  . : \n\nWireless LAN adapter WLAN:\n\n   Connection-specific DNS Suffix  . : DHCP HOST\n   Link-local IPv6 Address . . . . . : fe80::954b:e66f:4065:20af%20\n   IPv4 Address. . . . . . . . . . . : 192.168.2.100\n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\n   Default Gateway . . . . . . . . . : 192.168.2.1\n```\n\nAfter starting up the X server VcXsrv, you need to export the environmnet variable **`DISPLAY`** on the WSL. In case of the vEthernet configuration changed after rebooting you'd better do it like this:\n\n``` bash\nexport DISPLAY=$(grep 'nameserver' /etc/resolv.conf | awk '{print $2}'):0\n```\n\nNOTE: The Firewall between the host and WSL2 must be disabled or your X client can not connect VcXsrv.\n\n## Debugging\n\nI trace the demo glxgears using gdb and tcpdump at the same time.\n\n- gdb\n\n``` shell\ngdb -q -tui glxgears\n```\n- tcpdump\n\n``` shell\nsudo tcpdump -vvX not icmp and not arp and not udp and portrange 37900-37999 -w x110224.pcap\n```\n- vv: verboser than -v\n- X: show the packet's content\n- not icmp: filter out icmp packets\n- not arp: filter out arp packets\n- not udp: filter out udp packets\n- portrange 37900-37999: listening on the ports from 37900 to 37999\n- w x110224.pcap: save the packet captures into the file\n\n``` shell\ntcpdump -X -r x110224.pcap\n```\n\n```\nreading from file /home/luc/github/x110224.pcap, link-type EN10MB (Ethernet)\n09:11:56.659816 IP 172.28.233.193.37950 > 172.28.224.1.x11: Flags [P.], seq 2796598646:2796598658, ack 1053772981, win 259, length 12\n\t0x0000:  4500 0034 1d84 4000 4006 fb43 ac1c e9c1  E..4..@.@..C....\n\t0x0010:  ac1c e001 943e 1770 a6b0 b576 3ecf 4cb5  .....>.p...v>.L.\n\t0x0020:  5018 0103 2223 0000 6200 0300 0400 0000  P...\"#..b.......\n\t0x0030:  4452 4932                                DRI2\n09:11:56.660218 IP 172.28.224.1.x11 > 172.28.233.193.37950: Flags [P.], seq 1:33, ack 12, win 8211, length 32\n\t0x0000:  4500 0048 d9d7 4000 8006 fedb ac1c e001  E..H..@.........\n\t0x0010:  ac1c e9c1 1770 943e 3ecf 4cb5 a6b0 b582  .....p.>>.L.....\n\t0x0020:  5018 2013 cf36 0000 0100 0a00 0000 0000  P....6..........\n\t0x0030:  0000 0000 0000 0000 0000 0000 0000 0000  ................\n\t0x0040:  0000 0000 0000 0000                      ........\n09:11:56.660232 IP 172.28.233.193.37950 > 172.28.224.1.x11: Flags [.], ack 33, win 259, length 0\n\t0x0000:  4500 0028 1d85 4000 4006 fb4e ac1c e9c1  E..(..@.@..N....\n\t0x0010:  ac1c e001 943e 1770 a6b0 b582 3ecf 4cd5  .....>.p....>.L.\n\t0x0020:  5010 0103 2217 0000                      P...\"...\n\n```\n\nwhat codes sends and receives these packets? The first two twenty-byted segments are IP header (20 bytes without option) and TCP header (20 bytes without option) separately in these packets.\n\nThe source code snippet:\n``` c\nBool\nXQueryExtension(\n    register Display *dpy,\n    _Xconst char *name,\n    int *major_opcode,  /* RETURN */\n    int *first_event,   /* RETURN */\n    int *first_error)\t/* RETURN */\n{\n    xQueryExtensionReply rep;\n    register xQueryExtensionReq *req;\n\n    LockDisplay(dpy);\n    GetReq(QueryExtension, req);\n    req->nbytes = name ? strlen(name) : 0;\n    req->length += (req->nbytes+(unsigned)3)>>2;\n    _XSend(dpy, name, (long)req->nbytes);\n    (void) _XReply (dpy, (xReply *)&rep, 0, xTrue);\n    *major_opcode = rep.major_opcode;\n    *first_event = rep.first_event;\n    *first_error = rep.first_error;\n    UnlockDisplay(dpy);\n    SyncHandle();\n    return (rep.present);\n}\n```\n\nThe gdb log:\n```\nStarting program: /mnt/c/Users/lulu/Documents/github/demos/src/xdemos/glxgears \n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n\nBreakpoint 1, XextAddDisplay (extinfo=0x7ffff7e77380 <_dri2Info_data>, dpy=0x55555555d2a0, \n    ext_name=0x7ffff7e76780 <dri2ExtensionName> \"DRI2\", hooks=0x7ffff7e767a0 <dri2ExtensionHooks>, nevents=0, data=0x0)\n    at extutil.c:103\nXInitExtension (dpy=dpy@entry=0x55555555d2a0, name=name@entry=0x7ffff7e76780 <dri2ExtensionName> \"DRI2\")\n    at InitExt.c:44\nXQueryExtension (dpy=dpy@entry=0x55555555d2a0, name=name@entry=0x7ffff7e76780 <dri2ExtensionName> \"DRI2\", \n    major_opcode=major_opcode@entry=0x7fffffffd984, first_event=first_event@entry=0x7fffffffd988, \n    first_error=first_error@entry=0x7fffffffd98c) at QuExt.c:39\n$2 = {\n  reqType = 0x62, \n  pad = 0x0, \n  length = 0x3, \n  nbytes = 0x4, \n  pad1 = 0x0, \n  pad2 = 0x0\n}\n$3 = {\n  type = 0x1, \n  pad1 = 0x0, \n  sequenceNumber = 0xa, \n  length = 0x0, \n  present = 0x0, \n  major_opcode = 0x0, \n  first_event = 0x0, \n  first_error = 0x0, \n  pad3 = 0x0, \n  pad4 = 0x0, \n  pad5 = 0x0, \n  pad6 = 0x0, \n  pad7 = 0x0\n}\n```\n\n`$2` is **Request** packet content to VcXsrv, `$3` is **Reply** packet content from VcXsrv. Even that we can notice the three-way handshake of TCP from the zero-lengthed packet in x110224.pcap. \n","slug":"debug-x11-with-tcpdump","published":1,"updated":"2020-02-24T07:39:37.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckair1g090001pvk7aaui9icu","content":"<p>X11 is designed as client-server mode. The communication between the X client and server complies with TCP protocol. Recently I have a Windows X server VcXsrv installed on my Windows 10 and I debug an OpenGL demo glxgears on the WSL2 with tcpdump.</p>\n<h2 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h2><p>WSL2 is equipped with its own networking interface like a virtual machine. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ifconfig</span><br><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.28.233.193  netmask 255.255.240.0  broadcast 172.28.239.255</span><br><span class=\"line\">        inet6 fe80::215:5dff:fe27:9562  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether 00:15:5d:27:95:62  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 221579  bytes 15160108 (15.1 MB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 306691  bytes 15714800233 (15.7 GB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class=\"line\">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class=\"line\">        RX packets 392  bytes 43340 (43.3 KB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 392  bytes 43340 (43.3 KB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -C <span class=\"string\">\"ipconfig\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">Windows IP Configuration</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Ethernet adapter vEthernet (WSL):</span><br><span class=\"line\"></span><br><span class=\"line\">   Connection-specific DNS Suffix  . : </span><br><span class=\"line\">   Link-local IPv6 Address . . . . . : fe80::412b:ad3:5548:67ba%38</span><br><span class=\"line\">   IPv4 Address. . . . . . . . . . . : 172.28.224.1</span><br><span class=\"line\">   Subnet Mask . . . . . . . . . . . : 255.255.240.0</span><br><span class=\"line\">   Default Gateway . . . . . . . . . : </span><br><span class=\"line\"></span><br><span class=\"line\">Wireless LAN adapter ±¾µØÁ¬½Ó* 1:</span><br><span class=\"line\"></span><br><span class=\"line\">   Media State . . . . . . . . . . . : Media disconnected</span><br><span class=\"line\">   Connection-specific DNS Suffix  . : </span><br><span class=\"line\"></span><br><span class=\"line\">Wireless LAN adapter ±¾µØÁ¬½Ó* 10:</span><br><span class=\"line\"></span><br><span class=\"line\">   Media State . . . . . . . . . . . : Media disconnected</span><br><span class=\"line\">   Connection-specific DNS Suffix  . : </span><br><span class=\"line\"></span><br><span class=\"line\">Wireless LAN adapter WLAN:</span><br><span class=\"line\"></span><br><span class=\"line\">   Connection-specific DNS Suffix  . : DHCP HOST</span><br><span class=\"line\">   Link-local IPv6 Address . . . . . : fe80::954b:e66f:4065:20af%20</span><br><span class=\"line\">   IPv4 Address. . . . . . . . . . . : 192.168.2.100</span><br><span class=\"line\">   Subnet Mask . . . . . . . . . . . : 255.255.255.0</span><br><span class=\"line\">   Default Gateway . . . . . . . . . : 192.168.2.1</span><br></pre></td></tr></table></figure>\n\n<p>After starting up the X server VcXsrv, you need to export the environmnet variable <strong><code>DISPLAY</code></strong> on the WSL. In case of the vEthernet configuration changed after rebooting you’d better do it like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> DISPLAY=$(grep <span class=\"string\">'nameserver'</span> /etc/resolv.conf | awk <span class=\"string\">'&#123;print $2&#125;'</span>):0</span><br></pre></td></tr></table></figure>\n\n<p>NOTE: The Firewall between the host and WSL2 must be disabled or your X client can not connect VcXsrv.</p>\n<h2 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a>Debugging</h2><p>I trace the demo glxgears using gdb and tcpdump at the same time.</p>\n<ul>\n<li>gdb</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb -q -tui glxgears</span><br></pre></td></tr></table></figure>\n<ul>\n<li>tcpdump</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tcpdump -vvX not icmp and not arp and not udp and portrange 37900-37999 -w x110224.pcap</span><br></pre></td></tr></table></figure>\n<ul>\n<li>vv: verboser than -v</li>\n<li>X: show the packet’s content</li>\n<li>not icmp: filter out icmp packets</li>\n<li>not arp: filter out arp packets</li>\n<li>not udp: filter out udp packets</li>\n<li>portrange 37900-37999: listening on the ports from 37900 to 37999</li>\n<li>w x110224.pcap: save the packet captures into the file</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -X -r x110224.pcap</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reading from file /home/luc/github/x110224.pcap, link-type EN10MB (Ethernet)</span><br><span class=\"line\">09:11:56.659816 IP 172.28.233.193.37950 &gt; 172.28.224.1.x11: Flags [P.], seq 2796598646:2796598658, ack 1053772981, win 259, length 12</span><br><span class=\"line\">\t0x0000:  4500 0034 1d84 4000 4006 fb43 ac1c e9c1  E..4..@.@..C....</span><br><span class=\"line\">\t0x0010:  ac1c e001 943e 1770 a6b0 b576 3ecf 4cb5  .....&gt;.p...v&gt;.L.</span><br><span class=\"line\">\t0x0020:  5018 0103 2223 0000 6200 0300 0400 0000  P...&quot;#..b.......</span><br><span class=\"line\">\t0x0030:  4452 4932                                DRI2</span><br><span class=\"line\">09:11:56.660218 IP 172.28.224.1.x11 &gt; 172.28.233.193.37950: Flags [P.], seq 1:33, ack 12, win 8211, length 32</span><br><span class=\"line\">\t0x0000:  4500 0048 d9d7 4000 8006 fedb ac1c e001  E..H..@.........</span><br><span class=\"line\">\t0x0010:  ac1c e9c1 1770 943e 3ecf 4cb5 a6b0 b582  .....p.&gt;&gt;.L.....</span><br><span class=\"line\">\t0x0020:  5018 2013 cf36 0000 0100 0a00 0000 0000  P....6..........</span><br><span class=\"line\">\t0x0030:  0000 0000 0000 0000 0000 0000 0000 0000  ................</span><br><span class=\"line\">\t0x0040:  0000 0000 0000 0000                      ........</span><br><span class=\"line\">09:11:56.660232 IP 172.28.233.193.37950 &gt; 172.28.224.1.x11: Flags [.], ack 33, win 259, length 0</span><br><span class=\"line\">\t0x0000:  4500 0028 1d85 4000 4006 fb4e ac1c e9c1  E..(..@.@..N....</span><br><span class=\"line\">\t0x0010:  ac1c e001 943e 1770 a6b0 b582 3ecf 4cd5  .....&gt;.p....&gt;.L.</span><br><span class=\"line\">\t0x0020:  5010 0103 2217 0000                      P...&quot;...</span><br></pre></td></tr></table></figure>\n\n<p>what codes sends and receives these packets? The first two twenty-byted segments are IP header (20 bytes without option) and TCP header (20 bytes without option) separately in these packets.</p>\n<p>The source code snippet:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bool</span><br><span class=\"line\">XQueryExtension(</span><br><span class=\"line\">    <span class=\"keyword\">register</span> Display *dpy,</span><br><span class=\"line\">    _Xconst <span class=\"keyword\">char</span> *name,</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *major_opcode,  <span class=\"comment\">/* RETURN */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *first_event,   <span class=\"comment\">/* RETURN */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *first_error)\t<span class=\"comment\">/* RETURN */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    xQueryExtensionReply rep;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> xQueryExtensionReq *req;</span><br><span class=\"line\"></span><br><span class=\"line\">    LockDisplay(dpy);</span><br><span class=\"line\">    GetReq(QueryExtension, req);</span><br><span class=\"line\">    req-&gt;nbytes = name ? <span class=\"built_in\">strlen</span>(name) : <span class=\"number\">0</span>;</span><br><span class=\"line\">    req-&gt;length += (req-&gt;nbytes+(<span class=\"keyword\">unsigned</span>)<span class=\"number\">3</span>)&gt;&gt;<span class=\"number\">2</span>;</span><br><span class=\"line\">    _XSend(dpy, name, (<span class=\"keyword\">long</span>)req-&gt;nbytes);</span><br><span class=\"line\">    (<span class=\"keyword\">void</span>) _XReply (dpy, (xReply *)&amp;rep, <span class=\"number\">0</span>, xTrue);</span><br><span class=\"line\">    *major_opcode = rep.major_opcode;</span><br><span class=\"line\">    *first_event = rep.first_event;</span><br><span class=\"line\">    *first_error = rep.first_error;</span><br><span class=\"line\">    UnlockDisplay(dpy);</span><br><span class=\"line\">    SyncHandle();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (rep.present);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The gdb log:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting program: /mnt/c/Users/lulu/Documents/github/demos/src/xdemos/glxgears </span><br><span class=\"line\">[Thread debugging using libthread_db enabled]</span><br><span class=\"line\">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint 1, XextAddDisplay (extinfo=0x7ffff7e77380 &lt;_dri2Info_data&gt;, dpy=0x55555555d2a0, </span><br><span class=\"line\">    ext_name=0x7ffff7e76780 &lt;dri2ExtensionName&gt; &quot;DRI2&quot;, hooks=0x7ffff7e767a0 &lt;dri2ExtensionHooks&gt;, nevents=0, data=0x0)</span><br><span class=\"line\">    at extutil.c:103</span><br><span class=\"line\">XInitExtension (dpy=dpy@entry=0x55555555d2a0, name=name@entry=0x7ffff7e76780 &lt;dri2ExtensionName&gt; &quot;DRI2&quot;)</span><br><span class=\"line\">    at InitExt.c:44</span><br><span class=\"line\">XQueryExtension (dpy=dpy@entry=0x55555555d2a0, name=name@entry=0x7ffff7e76780 &lt;dri2ExtensionName&gt; &quot;DRI2&quot;, </span><br><span class=\"line\">    major_opcode=major_opcode@entry=0x7fffffffd984, first_event=first_event@entry=0x7fffffffd988, </span><br><span class=\"line\">    first_error=first_error@entry=0x7fffffffd98c) at QuExt.c:39</span><br><span class=\"line\">$2 = &#123;</span><br><span class=\"line\">  reqType = 0x62, </span><br><span class=\"line\">  pad = 0x0, </span><br><span class=\"line\">  length = 0x3, </span><br><span class=\"line\">  nbytes = 0x4, </span><br><span class=\"line\">  pad1 = 0x0, </span><br><span class=\"line\">  pad2 = 0x0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$3 = &#123;</span><br><span class=\"line\">  type = 0x1, </span><br><span class=\"line\">  pad1 = 0x0, </span><br><span class=\"line\">  sequenceNumber = 0xa, </span><br><span class=\"line\">  length = 0x0, </span><br><span class=\"line\">  present = 0x0, </span><br><span class=\"line\">  major_opcode = 0x0, </span><br><span class=\"line\">  first_event = 0x0, </span><br><span class=\"line\">  first_error = 0x0, </span><br><span class=\"line\">  pad3 = 0x0, </span><br><span class=\"line\">  pad4 = 0x0, </span><br><span class=\"line\">  pad5 = 0x0, </span><br><span class=\"line\">  pad6 = 0x0, </span><br><span class=\"line\">  pad7 = 0x0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>$2</code> is <strong>Request</strong> packet content to VcXsrv, <code>$3</code> is <strong>Reply</strong> packet content from VcXsrv. Even that we can notice the three-way handshake of TCP from the zero-lengthed packet in x110224.pcap. </p>\n","site":{"data":{}},"excerpt":"","more":"<p>X11 is designed as client-server mode. The communication between the X client and server complies with TCP protocol. Recently I have a Windows X server VcXsrv installed on my Windows 10 and I debug an OpenGL demo glxgears on the WSL2 with tcpdump.</p>\n<h2 id=\"Environment\"><a href=\"#Environment\" class=\"headerlink\" title=\"Environment\"></a>Environment</h2><p>WSL2 is equipped with its own networking interface like a virtual machine. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ifconfig</span><br><span class=\"line\">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class=\"line\">        inet 172.28.233.193  netmask 255.255.240.0  broadcast 172.28.239.255</span><br><span class=\"line\">        inet6 fe80::215:5dff:fe27:9562  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        ether 00:15:5d:27:95:62  txqueuelen 1000  (Ethernet)</span><br><span class=\"line\">        RX packets 221579  bytes 15160108 (15.1 MB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 306691  bytes 15714800233 (15.7 GB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class=\"line\"></span><br><span class=\"line\">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class=\"line\">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class=\"line\">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class=\"line\">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class=\"line\">        RX packets 392  bytes 43340 (43.3 KB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets 392  bytes 43340 (43.3 KB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -C <span class=\"string\">\"ipconfig\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">Windows IP Configuration</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Ethernet adapter vEthernet (WSL):</span><br><span class=\"line\"></span><br><span class=\"line\">   Connection-specific DNS Suffix  . : </span><br><span class=\"line\">   Link-local IPv6 Address . . . . . : fe80::412b:ad3:5548:67ba%38</span><br><span class=\"line\">   IPv4 Address. . . . . . . . . . . : 172.28.224.1</span><br><span class=\"line\">   Subnet Mask . . . . . . . . . . . : 255.255.240.0</span><br><span class=\"line\">   Default Gateway . . . . . . . . . : </span><br><span class=\"line\"></span><br><span class=\"line\">Wireless LAN adapter ±¾µØÁ¬½Ó* 1:</span><br><span class=\"line\"></span><br><span class=\"line\">   Media State . . . . . . . . . . . : Media disconnected</span><br><span class=\"line\">   Connection-specific DNS Suffix  . : </span><br><span class=\"line\"></span><br><span class=\"line\">Wireless LAN adapter ±¾µØÁ¬½Ó* 10:</span><br><span class=\"line\"></span><br><span class=\"line\">   Media State . . . . . . . . . . . : Media disconnected</span><br><span class=\"line\">   Connection-specific DNS Suffix  . : </span><br><span class=\"line\"></span><br><span class=\"line\">Wireless LAN adapter WLAN:</span><br><span class=\"line\"></span><br><span class=\"line\">   Connection-specific DNS Suffix  . : DHCP HOST</span><br><span class=\"line\">   Link-local IPv6 Address . . . . . : fe80::954b:e66f:4065:20af%20</span><br><span class=\"line\">   IPv4 Address. . . . . . . . . . . : 192.168.2.100</span><br><span class=\"line\">   Subnet Mask . . . . . . . . . . . : 255.255.255.0</span><br><span class=\"line\">   Default Gateway . . . . . . . . . : 192.168.2.1</span><br></pre></td></tr></table></figure>\n\n<p>After starting up the X server VcXsrv, you need to export the environmnet variable <strong><code>DISPLAY</code></strong> on the WSL. In case of the vEthernet configuration changed after rebooting you’d better do it like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> DISPLAY=$(grep <span class=\"string\">'nameserver'</span> /etc/resolv.conf | awk <span class=\"string\">'&#123;print $2&#125;'</span>):0</span><br></pre></td></tr></table></figure>\n\n<p>NOTE: The Firewall between the host and WSL2 must be disabled or your X client can not connect VcXsrv.</p>\n<h2 id=\"Debugging\"><a href=\"#Debugging\" class=\"headerlink\" title=\"Debugging\"></a>Debugging</h2><p>I trace the demo glxgears using gdb and tcpdump at the same time.</p>\n<ul>\n<li>gdb</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb -q -tui glxgears</span><br></pre></td></tr></table></figure>\n<ul>\n<li>tcpdump</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tcpdump -vvX not icmp and not arp and not udp and portrange 37900-37999 -w x110224.pcap</span><br></pre></td></tr></table></figure>\n<ul>\n<li>vv: verboser than -v</li>\n<li>X: show the packet’s content</li>\n<li>not icmp: filter out icmp packets</li>\n<li>not arp: filter out arp packets</li>\n<li>not udp: filter out udp packets</li>\n<li>portrange 37900-37999: listening on the ports from 37900 to 37999</li>\n<li>w x110224.pcap: save the packet captures into the file</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -X -r x110224.pcap</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reading from file /home/luc/github/x110224.pcap, link-type EN10MB (Ethernet)</span><br><span class=\"line\">09:11:56.659816 IP 172.28.233.193.37950 &gt; 172.28.224.1.x11: Flags [P.], seq 2796598646:2796598658, ack 1053772981, win 259, length 12</span><br><span class=\"line\">\t0x0000:  4500 0034 1d84 4000 4006 fb43 ac1c e9c1  E..4..@.@..C....</span><br><span class=\"line\">\t0x0010:  ac1c e001 943e 1770 a6b0 b576 3ecf 4cb5  .....&gt;.p...v&gt;.L.</span><br><span class=\"line\">\t0x0020:  5018 0103 2223 0000 6200 0300 0400 0000  P...&quot;#..b.......</span><br><span class=\"line\">\t0x0030:  4452 4932                                DRI2</span><br><span class=\"line\">09:11:56.660218 IP 172.28.224.1.x11 &gt; 172.28.233.193.37950: Flags [P.], seq 1:33, ack 12, win 8211, length 32</span><br><span class=\"line\">\t0x0000:  4500 0048 d9d7 4000 8006 fedb ac1c e001  E..H..@.........</span><br><span class=\"line\">\t0x0010:  ac1c e9c1 1770 943e 3ecf 4cb5 a6b0 b582  .....p.&gt;&gt;.L.....</span><br><span class=\"line\">\t0x0020:  5018 2013 cf36 0000 0100 0a00 0000 0000  P....6..........</span><br><span class=\"line\">\t0x0030:  0000 0000 0000 0000 0000 0000 0000 0000  ................</span><br><span class=\"line\">\t0x0040:  0000 0000 0000 0000                      ........</span><br><span class=\"line\">09:11:56.660232 IP 172.28.233.193.37950 &gt; 172.28.224.1.x11: Flags [.], ack 33, win 259, length 0</span><br><span class=\"line\">\t0x0000:  4500 0028 1d85 4000 4006 fb4e ac1c e9c1  E..(..@.@..N....</span><br><span class=\"line\">\t0x0010:  ac1c e001 943e 1770 a6b0 b582 3ecf 4cd5  .....&gt;.p....&gt;.L.</span><br><span class=\"line\">\t0x0020:  5010 0103 2217 0000                      P...&quot;...</span><br></pre></td></tr></table></figure>\n\n<p>what codes sends and receives these packets? The first two twenty-byted segments are IP header (20 bytes without option) and TCP header (20 bytes without option) separately in these packets.</p>\n<p>The source code snippet:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bool</span><br><span class=\"line\">XQueryExtension(</span><br><span class=\"line\">    <span class=\"keyword\">register</span> Display *dpy,</span><br><span class=\"line\">    _Xconst <span class=\"keyword\">char</span> *name,</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *major_opcode,  <span class=\"comment\">/* RETURN */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *first_event,   <span class=\"comment\">/* RETURN */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> *first_error)\t<span class=\"comment\">/* RETURN */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    xQueryExtensionReply rep;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> xQueryExtensionReq *req;</span><br><span class=\"line\"></span><br><span class=\"line\">    LockDisplay(dpy);</span><br><span class=\"line\">    GetReq(QueryExtension, req);</span><br><span class=\"line\">    req-&gt;nbytes = name ? <span class=\"built_in\">strlen</span>(name) : <span class=\"number\">0</span>;</span><br><span class=\"line\">    req-&gt;length += (req-&gt;nbytes+(<span class=\"keyword\">unsigned</span>)<span class=\"number\">3</span>)&gt;&gt;<span class=\"number\">2</span>;</span><br><span class=\"line\">    _XSend(dpy, name, (<span class=\"keyword\">long</span>)req-&gt;nbytes);</span><br><span class=\"line\">    (<span class=\"keyword\">void</span>) _XReply (dpy, (xReply *)&amp;rep, <span class=\"number\">0</span>, xTrue);</span><br><span class=\"line\">    *major_opcode = rep.major_opcode;</span><br><span class=\"line\">    *first_event = rep.first_event;</span><br><span class=\"line\">    *first_error = rep.first_error;</span><br><span class=\"line\">    UnlockDisplay(dpy);</span><br><span class=\"line\">    SyncHandle();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (rep.present);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The gdb log:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting program: /mnt/c/Users/lulu/Documents/github/demos/src/xdemos/glxgears </span><br><span class=\"line\">[Thread debugging using libthread_db enabled]</span><br><span class=\"line\">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint 1, XextAddDisplay (extinfo=0x7ffff7e77380 &lt;_dri2Info_data&gt;, dpy=0x55555555d2a0, </span><br><span class=\"line\">    ext_name=0x7ffff7e76780 &lt;dri2ExtensionName&gt; &quot;DRI2&quot;, hooks=0x7ffff7e767a0 &lt;dri2ExtensionHooks&gt;, nevents=0, data=0x0)</span><br><span class=\"line\">    at extutil.c:103</span><br><span class=\"line\">XInitExtension (dpy=dpy@entry=0x55555555d2a0, name=name@entry=0x7ffff7e76780 &lt;dri2ExtensionName&gt; &quot;DRI2&quot;)</span><br><span class=\"line\">    at InitExt.c:44</span><br><span class=\"line\">XQueryExtension (dpy=dpy@entry=0x55555555d2a0, name=name@entry=0x7ffff7e76780 &lt;dri2ExtensionName&gt; &quot;DRI2&quot;, </span><br><span class=\"line\">    major_opcode=major_opcode@entry=0x7fffffffd984, first_event=first_event@entry=0x7fffffffd988, </span><br><span class=\"line\">    first_error=first_error@entry=0x7fffffffd98c) at QuExt.c:39</span><br><span class=\"line\">$2 = &#123;</span><br><span class=\"line\">  reqType = 0x62, </span><br><span class=\"line\">  pad = 0x0, </span><br><span class=\"line\">  length = 0x3, </span><br><span class=\"line\">  nbytes = 0x4, </span><br><span class=\"line\">  pad1 = 0x0, </span><br><span class=\"line\">  pad2 = 0x0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$3 = &#123;</span><br><span class=\"line\">  type = 0x1, </span><br><span class=\"line\">  pad1 = 0x0, </span><br><span class=\"line\">  sequenceNumber = 0xa, </span><br><span class=\"line\">  length = 0x0, </span><br><span class=\"line\">  present = 0x0, </span><br><span class=\"line\">  major_opcode = 0x0, </span><br><span class=\"line\">  first_event = 0x0, </span><br><span class=\"line\">  first_error = 0x0, </span><br><span class=\"line\">  pad3 = 0x0, </span><br><span class=\"line\">  pad4 = 0x0, </span><br><span class=\"line\">  pad5 = 0x0, </span><br><span class=\"line\">  pad6 = 0x0, </span><br><span class=\"line\">  pad7 = 0x0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>$2</code> is <strong>Request</strong> packet content to VcXsrv, <code>$3</code> is <strong>Reply</strong> packet content from VcXsrv. Even that we can notice the three-way handshake of TCP from the zero-lengthed packet in x110224.pcap. </p>\n"},{"title":"GCC __attribute__","date":"2020-02-26T02:49:57.000Z","_content":"\n`__attribute__` is a keyword introduced by GCC. It is regarded as an extension of a language. It helps the compiler optimize calls, check code more carefully for correctness, control memory placement and code generation options.\n\n## Syntax\n```\n__attribute__ ((attribute-list))\n```\n\nwhere an attribute-list is a possibly empty comma-separated sequence of attributes. Say:\n\n```\nstatic void _init( void ) __attribute__((constructor));\n```\n\n## Categories\n- [Function Attributes](https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html#Function-Attributes)\n- [Variable Attribute](https://gcc.gnu.org/onlinedocs/gcc/Variable-Attributes.html#Variable-Attributes)\n- [Type Attributes](https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html#Type-Attributes)\n- [Label Attributes](https://gcc.gnu.org/onlinedocs/gcc/Label-Attributes.html#Label-Attributes)\n- [Enumerator Attributes](https://gcc.gnu.org/onlinedocs/gcc/Enumerator-Attributes.html#Enumerator-Attributes)\n- [Statement Attributes](https://gcc.gnu.org/onlinedocs/gcc/Statement-Attributes.html#Statement-Attributes)\n\nLet's say to specify an attribute of variables.\n\n```\nextern __thread struct _glapi_table * _glapi_tls_Dispatch\n    __attribute__((tls_model(\"initial-exec\")));\n```\n\nwhere the `tls_model` attribute sets thread-local storage model of a particular thread variable, overriding `-ftls-model=` command-line switch on a per-variable basis. The [`tls_model`](https://docs.oracle.com/cd/E53394_01/html/E54813/man-tlsam.html#scrolltoc) argument should be one of `global-dynamic`, `local-dynamic`, `initial-exec`, or `local-exec`.\n\n### [Visibility](http://anadoxin.org/blog/control-over-symbol-exports-in-gcc.html)\n\n```\n__attribute__((visibility(\"default\")));\n```\n\nthis attribute involves with the visibility of exported symbols in a shared object, overriding `-fvisibility=hidden` command-line option during the compilation. The visibility argument should be one of `default`, `hidden`, `internal`, or `protected`.\n","source":"_posts/gcc-attribute.md","raw":"---\ntitle: GCC __attribute__\ndate: 2020-02-26 10:49:57\ntags: [gcc]\n---\n\n`__attribute__` is a keyword introduced by GCC. It is regarded as an extension of a language. It helps the compiler optimize calls, check code more carefully for correctness, control memory placement and code generation options.\n\n## Syntax\n```\n__attribute__ ((attribute-list))\n```\n\nwhere an attribute-list is a possibly empty comma-separated sequence of attributes. Say:\n\n```\nstatic void _init( void ) __attribute__((constructor));\n```\n\n## Categories\n- [Function Attributes](https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html#Function-Attributes)\n- [Variable Attribute](https://gcc.gnu.org/onlinedocs/gcc/Variable-Attributes.html#Variable-Attributes)\n- [Type Attributes](https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html#Type-Attributes)\n- [Label Attributes](https://gcc.gnu.org/onlinedocs/gcc/Label-Attributes.html#Label-Attributes)\n- [Enumerator Attributes](https://gcc.gnu.org/onlinedocs/gcc/Enumerator-Attributes.html#Enumerator-Attributes)\n- [Statement Attributes](https://gcc.gnu.org/onlinedocs/gcc/Statement-Attributes.html#Statement-Attributes)\n\nLet's say to specify an attribute of variables.\n\n```\nextern __thread struct _glapi_table * _glapi_tls_Dispatch\n    __attribute__((tls_model(\"initial-exec\")));\n```\n\nwhere the `tls_model` attribute sets thread-local storage model of a particular thread variable, overriding `-ftls-model=` command-line switch on a per-variable basis. The [`tls_model`](https://docs.oracle.com/cd/E53394_01/html/E54813/man-tlsam.html#scrolltoc) argument should be one of `global-dynamic`, `local-dynamic`, `initial-exec`, or `local-exec`.\n\n### [Visibility](http://anadoxin.org/blog/control-over-symbol-exports-in-gcc.html)\n\n```\n__attribute__((visibility(\"default\")));\n```\n\nthis attribute involves with the visibility of exported symbols in a shared object, overriding `-fvisibility=hidden` command-line option during the compilation. The visibility argument should be one of `default`, `hidden`, `internal`, or `protected`.\n","slug":"gcc-attribute","published":1,"updated":"2020-02-29T02:56:27.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckair1g0e0002pvk717urfhdp","content":"<p><code>__attribute__</code> is a keyword introduced by GCC. It is regarded as an extension of a language. It helps the compiler optimize calls, check code more carefully for correctness, control memory placement and code generation options.</p>\n<h2 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__attribute__ ((attribute-list))</span><br></pre></td></tr></table></figure>\n\n<p>where an attribute-list is a possibly empty comma-separated sequence of attributes. Say:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void _init( void ) __attribute__((constructor));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Categories\"><a href=\"#Categories\" class=\"headerlink\" title=\"Categories\"></a>Categories</h2><ul>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html#Function-Attributes\" target=\"_blank\" rel=\"noopener\">Function Attributes</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Variable-Attributes.html#Variable-Attributes\" target=\"_blank\" rel=\"noopener\">Variable Attribute</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html#Type-Attributes\" target=\"_blank\" rel=\"noopener\">Type Attributes</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Label-Attributes.html#Label-Attributes\" target=\"_blank\" rel=\"noopener\">Label Attributes</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Enumerator-Attributes.html#Enumerator-Attributes\" target=\"_blank\" rel=\"noopener\">Enumerator Attributes</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Statement-Attributes.html#Statement-Attributes\" target=\"_blank\" rel=\"noopener\">Statement Attributes</a></li>\n</ul>\n<p>Let’s say to specify an attribute of variables.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern __thread struct _glapi_table * _glapi_tls_Dispatch</span><br><span class=\"line\">    __attribute__((tls_model(&quot;initial-exec&quot;)));</span><br></pre></td></tr></table></figure>\n\n<p>where the <code>tls_model</code> attribute sets thread-local storage model of a particular thread variable, overriding <code>-ftls-model=</code> command-line switch on a per-variable basis. The <a href=\"https://docs.oracle.com/cd/E53394_01/html/E54813/man-tlsam.html#scrolltoc\" target=\"_blank\" rel=\"noopener\"><code>tls_model</code></a> argument should be one of <code>global-dynamic</code>, <code>local-dynamic</code>, <code>initial-exec</code>, or <code>local-exec</code>.</p>\n<h3 id=\"Visibility\"><a href=\"#Visibility\" class=\"headerlink\" title=\"Visibility\"></a><a href=\"http://anadoxin.org/blog/control-over-symbol-exports-in-gcc.html\" target=\"_blank\" rel=\"noopener\">Visibility</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__attribute__((visibility(&quot;default&quot;)));</span><br></pre></td></tr></table></figure>\n\n<p>this attribute involves with the visibility of exported symbols in a shared object, overriding <code>-fvisibility=hidden</code> command-line option during the compilation. The visibility argument should be one of <code>default</code>, <code>hidden</code>, <code>internal</code>, or <code>protected</code>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>__attribute__</code> is a keyword introduced by GCC. It is regarded as an extension of a language. It helps the compiler optimize calls, check code more carefully for correctness, control memory placement and code generation options.</p>\n<h2 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__attribute__ ((attribute-list))</span><br></pre></td></tr></table></figure>\n\n<p>where an attribute-list is a possibly empty comma-separated sequence of attributes. Say:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static void _init( void ) __attribute__((constructor));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Categories\"><a href=\"#Categories\" class=\"headerlink\" title=\"Categories\"></a>Categories</h2><ul>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html#Function-Attributes\" target=\"_blank\" rel=\"noopener\">Function Attributes</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Variable-Attributes.html#Variable-Attributes\" target=\"_blank\" rel=\"noopener\">Variable Attribute</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Type-Attributes.html#Type-Attributes\" target=\"_blank\" rel=\"noopener\">Type Attributes</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Label-Attributes.html#Label-Attributes\" target=\"_blank\" rel=\"noopener\">Label Attributes</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Enumerator-Attributes.html#Enumerator-Attributes\" target=\"_blank\" rel=\"noopener\">Enumerator Attributes</a></li>\n<li><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Statement-Attributes.html#Statement-Attributes\" target=\"_blank\" rel=\"noopener\">Statement Attributes</a></li>\n</ul>\n<p>Let’s say to specify an attribute of variables.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern __thread struct _glapi_table * _glapi_tls_Dispatch</span><br><span class=\"line\">    __attribute__((tls_model(&quot;initial-exec&quot;)));</span><br></pre></td></tr></table></figure>\n\n<p>where the <code>tls_model</code> attribute sets thread-local storage model of a particular thread variable, overriding <code>-ftls-model=</code> command-line switch on a per-variable basis. The <a href=\"https://docs.oracle.com/cd/E53394_01/html/E54813/man-tlsam.html#scrolltoc\" target=\"_blank\" rel=\"noopener\"><code>tls_model</code></a> argument should be one of <code>global-dynamic</code>, <code>local-dynamic</code>, <code>initial-exec</code>, or <code>local-exec</code>.</p>\n<h3 id=\"Visibility\"><a href=\"#Visibility\" class=\"headerlink\" title=\"Visibility\"></a><a href=\"http://anadoxin.org/blog/control-over-symbol-exports-in-gcc.html\" target=\"_blank\" rel=\"noopener\">Visibility</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__attribute__((visibility(&quot;default&quot;)));</span><br></pre></td></tr></table></figure>\n\n<p>this attribute involves with the visibility of exported symbols in a shared object, overriding <code>-fvisibility=hidden</code> command-line option during the compilation. The visibility argument should be one of <code>default</code>, <code>hidden</code>, <code>internal</code>, or <code>protected</code>.</p>\n"},{"title":"ptx","date":"2020-05-17T07:02:15.000Z","_content":"","source":"_posts/ptx.md","raw":"---\ntitle: ptx\ndate: 2020-05-17 15:02:15\ntags:\n---\n","slug":"ptx","published":1,"updated":"2020-05-17T11:48:38.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckair1g0k0004pvk74s3d76m1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"gcc switch","date":"2020-05-22T18:17:06.000Z","_content":"\n## 什么时候需要切换gcc的版本\n当系统上安装了两个以上版本的gcc时，为了适应不同项目对编译器版本的特定要求，我们可能需要随时切换gcc的版本。\n\n## 如何做\n在Ubuntu(其它Linux发行版应该也有)系统，`update-alternatives`命令可以帮助我们快速简单地完成切换gcc版本。该命令的主要功能是维护`/etc/\nalternatives`目录下的symbolic links，以此来决定系统某些命令(例如gcc)最终是执行哪个可执行程序。\n\n命令原型\n- 没有symbolic link时\n```shell script\nupdate-alternatives [options] --install link name path priority\n```\n\n- 更改已有symbolic link时\n```shell script\nupdate-alternatives [options] --set name path\n```\n\n举例 \n- 切换gcc的版本从6.5到9.2\n```shell script\nsudo update-alternatives --set gcc /usr/bin/gcc-9\n```\n\n- 切换g++的版本从9.2到6.5\n```shell script\nsudo update-alternatives --set g++ /usr/bin/g++-6\n```\n\nNOTE: 在执行上面命令时，要保证是在已经安装了相应gcc/g++版本和其symbolic link(通过`--install`子命令)的前提下。\n\n","source":"_posts/switch-gcc.md","raw":"---\ntitle: gcc switch \ndate: 2020-05-23 02:17:06\ntags:\n---\n\n## 什么时候需要切换gcc的版本\n当系统上安装了两个以上版本的gcc时，为了适应不同项目对编译器版本的特定要求，我们可能需要随时切换gcc的版本。\n\n## 如何做\n在Ubuntu(其它Linux发行版应该也有)系统，`update-alternatives`命令可以帮助我们快速简单地完成切换gcc版本。该命令的主要功能是维护`/etc/\nalternatives`目录下的symbolic links，以此来决定系统某些命令(例如gcc)最终是执行哪个可执行程序。\n\n命令原型\n- 没有symbolic link时\n```shell script\nupdate-alternatives [options] --install link name path priority\n```\n\n- 更改已有symbolic link时\n```shell script\nupdate-alternatives [options] --set name path\n```\n\n举例 \n- 切换gcc的版本从6.5到9.2\n```shell script\nsudo update-alternatives --set gcc /usr/bin/gcc-9\n```\n\n- 切换g++的版本从9.2到6.5\n```shell script\nsudo update-alternatives --set g++ /usr/bin/g++-6\n```\n\nNOTE: 在执行上面命令时，要保证是在已经安装了相应gcc/g++版本和其symbolic link(通过`--install`子命令)的前提下。\n\n","slug":"switch-gcc","published":1,"updated":"2020-05-24T13:03:02.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckair1g0m0005pvk76anoh835","content":"<h2 id=\"什么时候需要切换gcc的版本\"><a href=\"#什么时候需要切换gcc的版本\" class=\"headerlink\" title=\"什么时候需要切换gcc的版本\"></a>什么时候需要切换gcc的版本</h2><p>当系统上安装了两个以上版本的gcc时，为了适应不同项目对编译器版本的特定要求，我们可能需要随时切换gcc的版本。</p>\n<h2 id=\"如何做\"><a href=\"#如何做\" class=\"headerlink\" title=\"如何做\"></a>如何做</h2><p>在Ubuntu(其它Linux发行版应该也有)系统，<code>update-alternatives</code>命令可以帮助我们快速简单地完成切换gcc版本。该命令的主要功能是维护<code>/etc/\nalternatives</code>目录下的symbolic links，以此来决定系统某些命令(例如gcc)最终是执行哪个可执行程序。</p>\n<p>命令原型</p>\n<ul>\n<li><p>没有symbolic link时</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-alternatives [options] --install link name path priority</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改已有symbolic link时</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-alternatives [options] --set name path</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>举例 </p>\n<ul>\n<li><p>切换gcc的版本从6.5到9.2</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --set gcc /usr/bin/gcc-9</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换g++的版本从9.2到6.5</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --set g++ /usr/bin/g++-6</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>NOTE: 在执行上面命令时，要保证是在已经安装了相应gcc/g++版本和其symbolic link(通过<code>--install</code>子命令)的前提下。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么时候需要切换gcc的版本\"><a href=\"#什么时候需要切换gcc的版本\" class=\"headerlink\" title=\"什么时候需要切换gcc的版本\"></a>什么时候需要切换gcc的版本</h2><p>当系统上安装了两个以上版本的gcc时，为了适应不同项目对编译器版本的特定要求，我们可能需要随时切换gcc的版本。</p>\n<h2 id=\"如何做\"><a href=\"#如何做\" class=\"headerlink\" title=\"如何做\"></a>如何做</h2><p>在Ubuntu(其它Linux发行版应该也有)系统，<code>update-alternatives</code>命令可以帮助我们快速简单地完成切换gcc版本。该命令的主要功能是维护<code>/etc/\nalternatives</code>目录下的symbolic links，以此来决定系统某些命令(例如gcc)最终是执行哪个可执行程序。</p>\n<p>命令原型</p>\n<ul>\n<li><p>没有symbolic link时</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-alternatives [options] --install link name path priority</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更改已有symbolic link时</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-alternatives [options] --set name path</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>举例 </p>\n<ul>\n<li><p>切换gcc的版本从6.5到9.2</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --set gcc /usr/bin/gcc-9</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换g++的版本从9.2到6.5</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --set g++ /usr/bin/g++-6</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>NOTE: 在执行上面命令时，要保证是在已经安装了相应gcc/g++版本和其symbolic link(通过<code>--install</code>子命令)的前提下。</p>\n"},{"title":"regex in vi","date":"2020-02-29T13:58:03.000Z","_content":"## Multiline\nRemove the multilined comment in the separated paragraphs\n\n```c\nstruct gl_vertex_array_object\n{\n   GLuint Name;\n   GLint RefCount;\n   GLchar *Label;       \n   /**\n    * Has this array object been bound?\n    */\n   GLboolean EverBound;\n   /**\n    * Marked to true if the object is shared between contexts and immutable.\n    * Then reference counting is done using atomics and thread safe.\n    * Is used for dlist VAOs.\n    */\n   bool SharedAndImmutable;\n   struct gl_array_attributes VertexAttrib[VERT_ATTRIB_MAX];\n   struct gl_vertex_buffer_binding BufferBinding[VERT_ATTRIB_MAX];\n   GLbitfield VertexAttribBufferMask;\n   GLbitfield Enabled;\n   /**\n    * Mask of VERT_BIT_* enabled arrays past position/generic0 mapping\n    *\n    * The value is valid past calling _mesa_update_vao_derived_arrays.\n    * Note that _mesa_update_vao_derived_arrays is called when binding\n    * the VAO to Array._DrawVAO.\n    */\n   GLbitfield _EffEnabledVBO;\n   gl_attribute_map_mode _AttributeMapMode;\n   GLbitfield NewArrays;\n   struct gl_buffer_object *IndexBufferObj;\n};\n```\n\nEx mode:\n\n```\n:%s;/\\*\\*\\_.\\{-}\\*/;;\n```\n\nwhere `\\{-}` means non-greedy match. See `:help non-greedy`.\n\nA regular expression in vim often includes the following patterns to search text in a single line:\n\n- `.` any character, except a newline\n- `^` the beginning of the line\n- `$` the end of the line\n- `\\s` a space or tab\n\nThe above patterns can be replaced with other patterns that also match the newline character, as follows:\n\n- `\\_.` any character, including a newline\n- `\\_^` the beginning of a line\n- `\\_$` the end of a line\n- `\\_s` a space, tab or newline character\n- `\\n` a newline character\n\n## Empty Lines\nRemove empty lines or lines which only contain whitespaces.\n\n```\n:g/^\\s*$/d\n```\n\n## Case Transform\n\nTo lowercase\n\n```\n:s/^##\\s\\(.\\)/## \\L\\1/\n```\n\nTo uppercase\n\n```\n:s/^##\\s\\(.\\)/## \\U\\1/\n```\n","source":"_posts/regex-in-vi.md","raw":"---\ntitle: regex in vi\ndate: 2020-02-29 21:58:03\ntags: regex\n---\n## Multiline\nRemove the multilined comment in the separated paragraphs\n\n```c\nstruct gl_vertex_array_object\n{\n   GLuint Name;\n   GLint RefCount;\n   GLchar *Label;       \n   /**\n    * Has this array object been bound?\n    */\n   GLboolean EverBound;\n   /**\n    * Marked to true if the object is shared between contexts and immutable.\n    * Then reference counting is done using atomics and thread safe.\n    * Is used for dlist VAOs.\n    */\n   bool SharedAndImmutable;\n   struct gl_array_attributes VertexAttrib[VERT_ATTRIB_MAX];\n   struct gl_vertex_buffer_binding BufferBinding[VERT_ATTRIB_MAX];\n   GLbitfield VertexAttribBufferMask;\n   GLbitfield Enabled;\n   /**\n    * Mask of VERT_BIT_* enabled arrays past position/generic0 mapping\n    *\n    * The value is valid past calling _mesa_update_vao_derived_arrays.\n    * Note that _mesa_update_vao_derived_arrays is called when binding\n    * the VAO to Array._DrawVAO.\n    */\n   GLbitfield _EffEnabledVBO;\n   gl_attribute_map_mode _AttributeMapMode;\n   GLbitfield NewArrays;\n   struct gl_buffer_object *IndexBufferObj;\n};\n```\n\nEx mode:\n\n```\n:%s;/\\*\\*\\_.\\{-}\\*/;;\n```\n\nwhere `\\{-}` means non-greedy match. See `:help non-greedy`.\n\nA regular expression in vim often includes the following patterns to search text in a single line:\n\n- `.` any character, except a newline\n- `^` the beginning of the line\n- `$` the end of the line\n- `\\s` a space or tab\n\nThe above patterns can be replaced with other patterns that also match the newline character, as follows:\n\n- `\\_.` any character, including a newline\n- `\\_^` the beginning of a line\n- `\\_$` the end of a line\n- `\\_s` a space, tab or newline character\n- `\\n` a newline character\n\n## Empty Lines\nRemove empty lines or lines which only contain whitespaces.\n\n```\n:g/^\\s*$/d\n```\n\n## Case Transform\n\nTo lowercase\n\n```\n:s/^##\\s\\(.\\)/## \\L\\1/\n```\n\nTo uppercase\n\n```\n:s/^##\\s\\(.\\)/## \\U\\1/\n```\n","slug":"regex-in-vi","published":1,"updated":"2020-03-01T01:57:17.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckair1g0n0006pvk7co779gl4","content":"<h2 id=\"Multiline\"><a href=\"#Multiline\" class=\"headerlink\" title=\"Multiline\"></a>Multiline</h2><p>Remove the multilined comment in the separated paragraphs</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_vertex_array_object</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   GLuint Name;</span><br><span class=\"line\">   GLint RefCount;</span><br><span class=\"line\">   GLchar *Label;       </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Has this array object been bound?</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   GLboolean EverBound;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Marked to true if the object is shared between contexts and immutable.</span></span><br><span class=\"line\"><span class=\"comment\">    * Then reference counting is done using atomics and thread safe.</span></span><br><span class=\"line\"><span class=\"comment\">    * Is used for dlist VAOs.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">bool</span> SharedAndImmutable;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_array_attributes</span> <span class=\"title\">VertexAttrib</span>[<span class=\"title\">VERT_ATTRIB_MAX</span>];</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_vertex_buffer_binding</span> <span class=\"title\">BufferBinding</span>[<span class=\"title\">VERT_ATTRIB_MAX</span>];</span></span><br><span class=\"line\">   GLbitfield VertexAttribBufferMask;</span><br><span class=\"line\">   GLbitfield Enabled;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Mask of VERT_BIT_* enabled arrays past position/generic0 mapping</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * The value is valid past calling _mesa_update_vao_derived_arrays.</span></span><br><span class=\"line\"><span class=\"comment\">    * Note that _mesa_update_vao_derived_arrays is called when binding</span></span><br><span class=\"line\"><span class=\"comment\">    * the VAO to Array._DrawVAO.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   GLbitfield _EffEnabledVBO;</span><br><span class=\"line\">   gl_attribute_map_mode _AttributeMapMode;</span><br><span class=\"line\">   GLbitfield NewArrays;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_buffer_object</span> *<span class=\"title\">IndexBufferObj</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Ex mode:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:%s;/\\*\\*\\_.\\&#123;-&#125;\\*/;;</span><br></pre></td></tr></table></figure>\n\n<p>where <code>\\{-}</code> means non-greedy match. See <code>:help non-greedy</code>.</p>\n<p>A regular expression in vim often includes the following patterns to search text in a single line:</p>\n<ul>\n<li><code>.</code> any character, except a newline</li>\n<li><code>^</code> the beginning of the line</li>\n<li><code>$</code> the end of the line</li>\n<li><code>\\s</code> a space or tab</li>\n</ul>\n<p>The above patterns can be replaced with other patterns that also match the newline character, as follows:</p>\n<ul>\n<li><code>\\_.</code> any character, including a newline</li>\n<li><code>\\_^</code> the beginning of a line</li>\n<li><code>\\_$</code> the end of a line</li>\n<li><code>\\_s</code> a space, tab or newline character</li>\n<li><code>\\n</code> a newline character</li>\n</ul>\n<h2 id=\"Empty-Lines\"><a href=\"#Empty-Lines\" class=\"headerlink\" title=\"Empty Lines\"></a>Empty Lines</h2><p>Remove empty lines or lines which only contain whitespaces.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:g/^\\s*$/d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Case-Transform\"><a href=\"#Case-Transform\" class=\"headerlink\" title=\"Case Transform\"></a>Case Transform</h2><p>To lowercase</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:s/^##\\s\\(.\\)/## \\L\\1/</span><br></pre></td></tr></table></figure>\n\n<p>To uppercase</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:s/^##\\s\\(.\\)/## \\U\\1/</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Multiline\"><a href=\"#Multiline\" class=\"headerlink\" title=\"Multiline\"></a>Multiline</h2><p>Remove the multilined comment in the separated paragraphs</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_vertex_array_object</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   GLuint Name;</span><br><span class=\"line\">   GLint RefCount;</span><br><span class=\"line\">   GLchar *Label;       </span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Has this array object been bound?</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   GLboolean EverBound;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Marked to true if the object is shared between contexts and immutable.</span></span><br><span class=\"line\"><span class=\"comment\">    * Then reference counting is done using atomics and thread safe.</span></span><br><span class=\"line\"><span class=\"comment\">    * Is used for dlist VAOs.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">bool</span> SharedAndImmutable;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_array_attributes</span> <span class=\"title\">VertexAttrib</span>[<span class=\"title\">VERT_ATTRIB_MAX</span>];</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_vertex_buffer_binding</span> <span class=\"title\">BufferBinding</span>[<span class=\"title\">VERT_ATTRIB_MAX</span>];</span></span><br><span class=\"line\">   GLbitfield VertexAttribBufferMask;</span><br><span class=\"line\">   GLbitfield Enabled;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Mask of VERT_BIT_* enabled arrays past position/generic0 mapping</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * The value is valid past calling _mesa_update_vao_derived_arrays.</span></span><br><span class=\"line\"><span class=\"comment\">    * Note that _mesa_update_vao_derived_arrays is called when binding</span></span><br><span class=\"line\"><span class=\"comment\">    * the VAO to Array._DrawVAO.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   GLbitfield _EffEnabledVBO;</span><br><span class=\"line\">   gl_attribute_map_mode _AttributeMapMode;</span><br><span class=\"line\">   GLbitfield NewArrays;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_buffer_object</span> *<span class=\"title\">IndexBufferObj</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Ex mode:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:%s;/\\*\\*\\_.\\&#123;-&#125;\\*/;;</span><br></pre></td></tr></table></figure>\n\n<p>where <code>\\{-}</code> means non-greedy match. See <code>:help non-greedy</code>.</p>\n<p>A regular expression in vim often includes the following patterns to search text in a single line:</p>\n<ul>\n<li><code>.</code> any character, except a newline</li>\n<li><code>^</code> the beginning of the line</li>\n<li><code>$</code> the end of the line</li>\n<li><code>\\s</code> a space or tab</li>\n</ul>\n<p>The above patterns can be replaced with other patterns that also match the newline character, as follows:</p>\n<ul>\n<li><code>\\_.</code> any character, including a newline</li>\n<li><code>\\_^</code> the beginning of a line</li>\n<li><code>\\_$</code> the end of a line</li>\n<li><code>\\_s</code> a space, tab or newline character</li>\n<li><code>\\n</code> a newline character</li>\n</ul>\n<h2 id=\"Empty-Lines\"><a href=\"#Empty-Lines\" class=\"headerlink\" title=\"Empty Lines\"></a>Empty Lines</h2><p>Remove empty lines or lines which only contain whitespaces.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:g/^\\s*$/d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Case-Transform\"><a href=\"#Case-Transform\" class=\"headerlink\" title=\"Case Transform\"></a>Case Transform</h2><p>To lowercase</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:s/^##\\s\\(.\\)/## \\L\\1/</span><br></pre></td></tr></table></figure>\n\n<p>To uppercase</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:s/^##\\s\\(.\\)/## \\U\\1/</span><br></pre></td></tr></table></figure>\n"},{"title":"Windows Insider Program","date":"2020-02-08T09:57:46.000Z","_content":"\nThe story begins with debugging an OpenGL demo on the WSL with the Mesa libraries compiled by myself. Every time the executable will crash when it stops at the breakpoint and steps into the function. The gdb outputs as follows:\n``` bash\nThread 1 \"osdemo\" hit Breakpoint 1, OSMesaMakeCurrent (osmesa=0x8056bf0, buffer=0x7ffff85f0010, type=5121, width=400, height=400)\n    at ../src/gallium/state_trackers/osmesa/osmesa.c:763\n763     {\n(gdb) n\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\n\nThread 13 \"osdemo\" received signal SIGABRT, Aborted.\n[Switching to Thread 0x7fffe0f90700 (LWP 4073)]\n__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50\n50      ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.\n(gdb) bt\n#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50\n#1  0x00007ffffb485899 in __GI_abort () at abort.c:79\n#2  0x00007ffffb4f009f in __libc_message (action=(do_abort | do_backtrace), fmt=0x7ffffb618fbe \"%s\", fmt=0x7ffffb618fbe \"%s\",\n    action=(do_abort | do_backtrace)) at ../sysdeps/posix/libc_fatal.c:181\n#3  0x00007ffffb4f0440 in __GI___libc_fatal (message=message@entry=0x7ffffb405000 \"The futex facility returned an unexpected error code.\\n\")\n    at ../sysdeps/posix/libc_fatal.c:191\n#4  0x00007ffffb3fd34a in futex_fatal_error () at ../sysdeps/nptl/futex-internal.h:200\n#5  futex_wake (private=<optimized out>, processes_to_wake=<optimized out>, futex_word=<optimized out>) at ../sysdeps/unix/sysv/linux/futex-internal.h:251\n#6  __condvar_confirm_wakeup (private=<optimized out>, cond=<optimized out>) at pthread_cond_wait.c:55\n#7  __pthread_cond_wait_common (abstime=0x0, clockid=0, mutex=0x806fad0, cond=0x806faf8) at pthread_cond_wait.c:425\n#8  __pthread_cond_wait (cond=0x806faf8, mutex=0x806fad0) at pthread_cond_wait.c:638\n#9  0x00007ffffc0be0cb in cnd_wait (mtx=0x806fad0, cond=0x806faf8) at ../include/c11/threads_posix.h:155\n#10 lp_cs_tpool_worker (data=data@entry=0x806fad0) at ../src/gallium/drivers/llvmpipe/lp_cs_tpool.c:48\n#11 0x00007ffffc0bdeab in impl_thrd_routine (p=<optimized out>) at ../include/c11/threads_posix.h:87\n#12 0x00007ffffb3f6669 in start_thread (arg=<optimized out>) at pthread_create.c:479\n#13 0x00007ffffb582323 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\n```\nI did not consider this crash as a WSL bug until I found this [issue](https://github.com/Microsoft/WSL/issues/3618) on the github. Then I realized that I had to update my WSL that is updated as the Windows is updated. The easy way to get the latest Windows build version is to register the [Windows Insider Program](https://insider.windows.com/zh-cn/) that only requires\n\n- Windows 10\n- Microsoft Account\n\nOnce you register successfully, you can check the Windows Updates for the latest Windows build.\n\n{% asset_img windows_update.png windows-updates %}\n","source":"_posts/windows-insider-program.md","raw":"---\ntitle: Windows Insider Program\ndate: 2020-02-08 17:57:46\ntags: [WSL, OpenGL]\n---\n\nThe story begins with debugging an OpenGL demo on the WSL with the Mesa libraries compiled by myself. Every time the executable will crash when it stops at the breakpoint and steps into the function. The gdb outputs as follows:\n``` bash\nThread 1 \"osdemo\" hit Breakpoint 1, OSMesaMakeCurrent (osmesa=0x8056bf0, buffer=0x7ffff85f0010, type=5121, width=400, height=400)\n    at ../src/gallium/state_trackers/osmesa/osmesa.c:763\n763     {\n(gdb) n\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\nThe futex facility returned an unexpected error code.\n\nThread 13 \"osdemo\" received signal SIGABRT, Aborted.\n[Switching to Thread 0x7fffe0f90700 (LWP 4073)]\n__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50\n50      ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.\n(gdb) bt\n#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50\n#1  0x00007ffffb485899 in __GI_abort () at abort.c:79\n#2  0x00007ffffb4f009f in __libc_message (action=(do_abort | do_backtrace), fmt=0x7ffffb618fbe \"%s\", fmt=0x7ffffb618fbe \"%s\",\n    action=(do_abort | do_backtrace)) at ../sysdeps/posix/libc_fatal.c:181\n#3  0x00007ffffb4f0440 in __GI___libc_fatal (message=message@entry=0x7ffffb405000 \"The futex facility returned an unexpected error code.\\n\")\n    at ../sysdeps/posix/libc_fatal.c:191\n#4  0x00007ffffb3fd34a in futex_fatal_error () at ../sysdeps/nptl/futex-internal.h:200\n#5  futex_wake (private=<optimized out>, processes_to_wake=<optimized out>, futex_word=<optimized out>) at ../sysdeps/unix/sysv/linux/futex-internal.h:251\n#6  __condvar_confirm_wakeup (private=<optimized out>, cond=<optimized out>) at pthread_cond_wait.c:55\n#7  __pthread_cond_wait_common (abstime=0x0, clockid=0, mutex=0x806fad0, cond=0x806faf8) at pthread_cond_wait.c:425\n#8  __pthread_cond_wait (cond=0x806faf8, mutex=0x806fad0) at pthread_cond_wait.c:638\n#9  0x00007ffffc0be0cb in cnd_wait (mtx=0x806fad0, cond=0x806faf8) at ../include/c11/threads_posix.h:155\n#10 lp_cs_tpool_worker (data=data@entry=0x806fad0) at ../src/gallium/drivers/llvmpipe/lp_cs_tpool.c:48\n#11 0x00007ffffc0bdeab in impl_thrd_routine (p=<optimized out>) at ../include/c11/threads_posix.h:87\n#12 0x00007ffffb3f6669 in start_thread (arg=<optimized out>) at pthread_create.c:479\n#13 0x00007ffffb582323 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\n```\nI did not consider this crash as a WSL bug until I found this [issue](https://github.com/Microsoft/WSL/issues/3618) on the github. Then I realized that I had to update my WSL that is updated as the Windows is updated. The easy way to get the latest Windows build version is to register the [Windows Insider Program](https://insider.windows.com/zh-cn/) that only requires\n\n- Windows 10\n- Microsoft Account\n\nOnce you register successfully, you can check the Windows Updates for the latest Windows build.\n\n{% asset_img windows_update.png windows-updates %}\n","slug":"windows-insider-program","published":1,"updated":"2020-02-08T10:46:27.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckair1g0q0009pvk74nr70xay","content":"<p>The story begins with debugging an OpenGL demo on the WSL with the Mesa libraries compiled by myself. Every time the executable will crash when it stops at the breakpoint and steps into the function. The gdb outputs as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 1 <span class=\"string\">\"osdemo\"</span> hit Breakpoint 1, OSMesaMakeCurrent (osmesa=0x8056bf0, buffer=0x7ffff85f0010, <span class=\"built_in\">type</span>=5121, width=400, height=400)</span><br><span class=\"line\">    at ../src/gallium/state_trackers/osmesa/osmesa.c:763</span><br><span class=\"line\">763     &#123;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\"></span><br><span class=\"line\">Thread 13 <span class=\"string\">\"osdemo\"</span> received signal SIGABRT, Aborted.</span><br><span class=\"line\">[Switching to Thread 0x7fffe0f90700 (LWP 4073)]</span><br><span class=\"line\">__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50</span><br><span class=\"line\">50      ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.</span><br><span class=\"line\">(gdb) bt</span><br><span class=\"line\"><span class=\"comment\">#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50</span></span><br><span class=\"line\"><span class=\"comment\">#1  0x00007ffffb485899 in __GI_abort () at abort.c:79</span></span><br><span class=\"line\"><span class=\"comment\">#2  0x00007ffffb4f009f in __libc_message (action=(do_abort | do_backtrace), fmt=0x7ffffb618fbe \"%s\", fmt=0x7ffffb618fbe \"%s\",</span></span><br><span class=\"line\">    action=(do_abort | do_backtrace)) at ../sysdeps/posix/libc_fatal.c:181</span><br><span class=\"line\"><span class=\"comment\">#3  0x00007ffffb4f0440 in __GI___libc_fatal (message=message@entry=0x7ffffb405000 \"The futex facility returned an unexpected error code.\\n\")</span></span><br><span class=\"line\">    at ../sysdeps/posix/libc_fatal.c:191</span><br><span class=\"line\"><span class=\"comment\">#4  0x00007ffffb3fd34a in futex_fatal_error () at ../sysdeps/nptl/futex-internal.h:200</span></span><br><span class=\"line\"><span class=\"comment\">#5  futex_wake (private=&lt;optimized out&gt;, processes_to_wake=&lt;optimized out&gt;, futex_word=&lt;optimized out&gt;) at ../sysdeps/unix/sysv/linux/futex-internal.h:251</span></span><br><span class=\"line\"><span class=\"comment\">#6  __condvar_confirm_wakeup (private=&lt;optimized out&gt;, cond=&lt;optimized out&gt;) at pthread_cond_wait.c:55</span></span><br><span class=\"line\"><span class=\"comment\">#7  __pthread_cond_wait_common (abstime=0x0, clockid=0, mutex=0x806fad0, cond=0x806faf8) at pthread_cond_wait.c:425</span></span><br><span class=\"line\"><span class=\"comment\">#8  __pthread_cond_wait (cond=0x806faf8, mutex=0x806fad0) at pthread_cond_wait.c:638</span></span><br><span class=\"line\"><span class=\"comment\">#9  0x00007ffffc0be0cb in cnd_wait (mtx=0x806fad0, cond=0x806faf8) at ../include/c11/threads_posix.h:155</span></span><br><span class=\"line\"><span class=\"comment\">#10 lp_cs_tpool_worker (data=data@entry=0x806fad0) at ../src/gallium/drivers/llvmpipe/lp_cs_tpool.c:48</span></span><br><span class=\"line\"><span class=\"comment\">#11 0x00007ffffc0bdeab in impl_thrd_routine (p=&lt;optimized out&gt;) at ../include/c11/threads_posix.h:87</span></span><br><span class=\"line\"><span class=\"comment\">#12 0x00007ffffb3f6669 in start_thread (arg=&lt;optimized out&gt;) at pthread_create.c:479</span></span><br><span class=\"line\"><span class=\"comment\">#13 0x00007ffffb582323 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95</span></span><br></pre></td></tr></table></figure>\n<p>I did not consider this crash as a WSL bug until I found this <a href=\"https://github.com/Microsoft/WSL/issues/3618\" target=\"_blank\" rel=\"noopener\">issue</a> on the github. Then I realized that I had to update my WSL that is updated as the Windows is updated. The easy way to get the latest Windows build version is to register the <a href=\"https://insider.windows.com/zh-cn/\" target=\"_blank\" rel=\"noopener\">Windows Insider Program</a> that only requires</p>\n<ul>\n<li>Windows 10</li>\n<li>Microsoft Account</li>\n</ul>\n<p>Once you register successfully, you can check the Windows Updates for the latest Windows build.</p>\n<img src=\"/windows-insider-program/windows_update.png\" class=\"\" title=\"windows-updates\">\n","site":{"data":{}},"excerpt":"","more":"<p>The story begins with debugging an OpenGL demo on the WSL with the Mesa libraries compiled by myself. Every time the executable will crash when it stops at the breakpoint and steps into the function. The gdb outputs as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread 1 <span class=\"string\">\"osdemo\"</span> hit Breakpoint 1, OSMesaMakeCurrent (osmesa=0x8056bf0, buffer=0x7ffff85f0010, <span class=\"built_in\">type</span>=5121, width=400, height=400)</span><br><span class=\"line\">    at ../src/gallium/state_trackers/osmesa/osmesa.c:763</span><br><span class=\"line\">763     &#123;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\">The futex facility returned an unexpected error code.</span><br><span class=\"line\"></span><br><span class=\"line\">Thread 13 <span class=\"string\">\"osdemo\"</span> received signal SIGABRT, Aborted.</span><br><span class=\"line\">[Switching to Thread 0x7fffe0f90700 (LWP 4073)]</span><br><span class=\"line\">__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50</span><br><span class=\"line\">50      ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.</span><br><span class=\"line\">(gdb) bt</span><br><span class=\"line\"><span class=\"comment\">#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50</span></span><br><span class=\"line\"><span class=\"comment\">#1  0x00007ffffb485899 in __GI_abort () at abort.c:79</span></span><br><span class=\"line\"><span class=\"comment\">#2  0x00007ffffb4f009f in __libc_message (action=(do_abort | do_backtrace), fmt=0x7ffffb618fbe \"%s\", fmt=0x7ffffb618fbe \"%s\",</span></span><br><span class=\"line\">    action=(do_abort | do_backtrace)) at ../sysdeps/posix/libc_fatal.c:181</span><br><span class=\"line\"><span class=\"comment\">#3  0x00007ffffb4f0440 in __GI___libc_fatal (message=message@entry=0x7ffffb405000 \"The futex facility returned an unexpected error code.\\n\")</span></span><br><span class=\"line\">    at ../sysdeps/posix/libc_fatal.c:191</span><br><span class=\"line\"><span class=\"comment\">#4  0x00007ffffb3fd34a in futex_fatal_error () at ../sysdeps/nptl/futex-internal.h:200</span></span><br><span class=\"line\"><span class=\"comment\">#5  futex_wake (private=&lt;optimized out&gt;, processes_to_wake=&lt;optimized out&gt;, futex_word=&lt;optimized out&gt;) at ../sysdeps/unix/sysv/linux/futex-internal.h:251</span></span><br><span class=\"line\"><span class=\"comment\">#6  __condvar_confirm_wakeup (private=&lt;optimized out&gt;, cond=&lt;optimized out&gt;) at pthread_cond_wait.c:55</span></span><br><span class=\"line\"><span class=\"comment\">#7  __pthread_cond_wait_common (abstime=0x0, clockid=0, mutex=0x806fad0, cond=0x806faf8) at pthread_cond_wait.c:425</span></span><br><span class=\"line\"><span class=\"comment\">#8  __pthread_cond_wait (cond=0x806faf8, mutex=0x806fad0) at pthread_cond_wait.c:638</span></span><br><span class=\"line\"><span class=\"comment\">#9  0x00007ffffc0be0cb in cnd_wait (mtx=0x806fad0, cond=0x806faf8) at ../include/c11/threads_posix.h:155</span></span><br><span class=\"line\"><span class=\"comment\">#10 lp_cs_tpool_worker (data=data@entry=0x806fad0) at ../src/gallium/drivers/llvmpipe/lp_cs_tpool.c:48</span></span><br><span class=\"line\"><span class=\"comment\">#11 0x00007ffffc0bdeab in impl_thrd_routine (p=&lt;optimized out&gt;) at ../include/c11/threads_posix.h:87</span></span><br><span class=\"line\"><span class=\"comment\">#12 0x00007ffffb3f6669 in start_thread (arg=&lt;optimized out&gt;) at pthread_create.c:479</span></span><br><span class=\"line\"><span class=\"comment\">#13 0x00007ffffb582323 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95</span></span><br></pre></td></tr></table></figure>\n<p>I did not consider this crash as a WSL bug until I found this <a href=\"https://github.com/Microsoft/WSL/issues/3618\" target=\"_blank\" rel=\"noopener\">issue</a> on the github. Then I realized that I had to update my WSL that is updated as the Windows is updated. The easy way to get the latest Windows build version is to register the <a href=\"https://insider.windows.com/zh-cn/\" target=\"_blank\" rel=\"noopener\">Windows Insider Program</a> that only requires</p>\n<ul>\n<li>Windows 10</li>\n<li>Microsoft Account</li>\n</ul>\n<p>Once you register successfully, you can check the Windows Updates for the latest Windows build.</p>\n<img src=\"/windows-insider-program/windows_update.png\" class=\"\" title=\"windows-updates\">\n"},{"title":"Installing CUDA Toolkit for GPGPU-sim on WSL","date":"2020-03-28T03:32:23.000Z","_content":"\n[GPGPU-sim](http://www.gpgpu-sim.org/) is a cycle-level simulator modeling contemporary graphics processing units (GPUs) and running GPU computing workloads written in CUDA or OpenCL. To look insight of its source code, I try to build it on the WSL (just for fun). For now WSL has not provided the support for GPU device yet. Fortunately compiling of GPGPU-sim has no dependency on NVIDIA driver. All that it needs is CUDA toolkit.\n\n# Where are CUDA Toolkit installed \n```\nDefault Install Location of CUDA Toolkit                                    \n                                                                               \n   Windows platform:                                                           \n                                                                               \n   %ProgramFiles%\\NVIDIA GPU Computing Toolkit\\CUDA\\v#.#                       \n                                                                               \n   Linux platform:                                                             \n                                                                               \n   /usr/local/cuda-#.#                                                         \n                                                                               \n   Mac platform:                                                               \n                                                                               \n   /Developer/NVIDIA/CUDA-#.#\n\nDefault Install Location of CUDA Samples                                    \n                                                                               \n   Windows platform:                                                           \n                                                                               \n   %ProgramData%\\NVIDIA Corporation\\CUDA Samples\\v#.#                          \n                                                                               \n   Linux platform:                                                             \n                                                                               \n   /usr/local/cuda-#.#/samples                                                 \n                                                                               \n   and                                                                         \n                                                                               \n   $HOME/NVIDIA_CUDA-#.#_Samples                                               \n                                                                               \n   Mac platform:                                                               \n                                                                               \n   /Developer/NVIDIA/CUDA-#.#/samples                                          \n                                                                               \n                                                                               \n   NVIDIA Nsight Visual Studio Edition (Windows only)  \n```\n\n# What are there in CUDA Toolkit\n```\n CUDA Installer                                                               \n  - [X] Driver                                                                 \n       [X] 440.33.01                                                           \n  - [X] CUDA Toolkit 10.2                                                      \n     - [X] CUDA Tools 10.2                                                     \n        - [X] CUDA Command Line Tools 10.2                                     \n             [X] cuda-gdb                                                      \n             [ ] cuda-gdb-src                                                  \n             [X] cuda-nvprof                                                   \n             [X] cuda-memcheck                                                 \n             [X] cuda-nvdisasm                                                 \n             [X] cuda-cupti                                                    \n             [X] cuda-sanitizer-api                                            \n             [X] cuda-nvtx                                                     \n        - [X] CUDA Visual Tools 10.2                                           \n             [X] cuda-nsight                                                   \n           - [X] cuda-nsight-compute                                           \n                [X] cuda-nsight-compute-integration                            \n           - [X] cuda-nsight-systems                                           \n                [X] cuda-nsight-systems-integration                            \n             [X] cuda-nvvp                                                     \n     - [X] CUDA Libraries 10.2                                                 \n        - [X] CUDA Runtime 10.2                                                \n             [X] cuda-cusolver                                                 \n             [X] libcublas10                                                   \n             [X] cuda-cufft                                                    \n             [X] cuda-curand                                                   \n             [X] cuda-cusparse                                                 \n             [X] cuda-nvgraph                                                  \n             [X] cuda-npp                                                      \n             [X] cuda-cudart                                                   \n             [X] cuda-nvrtc                                                    \n             [X] cuda-nvjpeg                                                   \n        - [X] CUDA Development 10.2                                            \n             [X] cuda-cusolver-dev                                             \n             [X] libcublas-dev                                                 \n             [X] cuda-cufft-dev                                                \n             [X] cuda-curand-dev                                               \n             [X] cuda-cusparse-dev                                             \n             [X] cuda-driver-dev                                               \n             [X] cuda-nvgraph-dev                                              \n             [X] cuda-npp-dev                                                  \n             [X] cuda-cudart-dev                                               \n             [X] cuda-nvrtc-dev                                                \n             [X] cuda-nvml-dev                                                 \n             [X] cuda-nvjpeg-dev                                               \n     - [X] CUDA Compiler 10.2                                                  \n          [X] cuda-nvcc                                                        \n          [X] cuda-cuobjdump                                                   \n          [X] cuda-nvprune                                                     \n       [X] CUDA Misc Headers 10.2                                              \n    [X] CUDA Samples 10.2                                                      \n    [X] CUDA Demo Suite 10.2                                                   \n    [X] CUDA Documentation 10.2                                                \n```\n\n# Post-Installation\n```\nDriver:   Not Selected\nToolkit:  Installed in /usr/local/cuda-10.2/\nSamples:  Installed in /home/luc/, but missing recommended libraries\n\nPlease make sure that\n -   PATH includes /usr/local/cuda-10.2/bin\n -   LD_LIBRARY_PATH includes /usr/local/cuda-10.2/lib64, or, add /usr/local/cuda-10.2/lib64 to /etc/ld.so.conf and run ldconfig as root\n\n  To uninstall the CUDA Toolkit, run cuda-uninstaller in /usr/local/cuda-10.2/bin\n\n  Please see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-10.2/doc/pdf for detailed information on setting up CUDA.\n  ***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 440.00 is required for CUDA 10.2 functionality to work.\n  To install the driver using this installer, run the following command, replacing <CudaInstaller> with the name of this\n  run file:\n      sudo <CudaInstaller>.run --silent --driver\n\n      Logfile is /var/log/cuda-installer.log\n```\n\n```\n* Please make sure your PATH includes /usr/local/cuda/bin\n* * Please make sure your LD_LIBRARY_PATH\n* *   for 32-bit Linux distributions includes /usr/local/cuda/lib\n* *   for 64-bit Linux distributions includes /usr/local/cuda/lib64:/usr/local/cuda/lib\n* * OR\n* *   for 32-bit Linux distributions add /usr/local/cuda/lib\n* *   for 64-bit Linux distributions add /usr/local/cuda/lib64 and /usr/local/cuda/lib\n* * to /etc/ld.so.conf and run ldconfig as root\n*\n* * Please read the release notes in /usr/local/cuda/doc/\n*\n* * To uninstall CUDA, remove the CUDA files in /usr/local/cuda\n* * Installation Complete\n```\n\nNOTES:\n\nGPGPU-sim has a restricted version of CUDA that ranging from 2.3 to 4.2. Neither the higher nor the lower does get it done.\n","source":"_posts/install-cuda.md","raw":"---\ntitle: Installing CUDA Toolkit for GPGPU-sim on WSL\ndate: 2020-03-28 11:32:23\ntags: CUDA, WSL\n---\n\n[GPGPU-sim](http://www.gpgpu-sim.org/) is a cycle-level simulator modeling contemporary graphics processing units (GPUs) and running GPU computing workloads written in CUDA or OpenCL. To look insight of its source code, I try to build it on the WSL (just for fun). For now WSL has not provided the support for GPU device yet. Fortunately compiling of GPGPU-sim has no dependency on NVIDIA driver. All that it needs is CUDA toolkit.\n\n# Where are CUDA Toolkit installed \n```\nDefault Install Location of CUDA Toolkit                                    \n                                                                               \n   Windows platform:                                                           \n                                                                               \n   %ProgramFiles%\\NVIDIA GPU Computing Toolkit\\CUDA\\v#.#                       \n                                                                               \n   Linux platform:                                                             \n                                                                               \n   /usr/local/cuda-#.#                                                         \n                                                                               \n   Mac platform:                                                               \n                                                                               \n   /Developer/NVIDIA/CUDA-#.#\n\nDefault Install Location of CUDA Samples                                    \n                                                                               \n   Windows platform:                                                           \n                                                                               \n   %ProgramData%\\NVIDIA Corporation\\CUDA Samples\\v#.#                          \n                                                                               \n   Linux platform:                                                             \n                                                                               \n   /usr/local/cuda-#.#/samples                                                 \n                                                                               \n   and                                                                         \n                                                                               \n   $HOME/NVIDIA_CUDA-#.#_Samples                                               \n                                                                               \n   Mac platform:                                                               \n                                                                               \n   /Developer/NVIDIA/CUDA-#.#/samples                                          \n                                                                               \n                                                                               \n   NVIDIA Nsight Visual Studio Edition (Windows only)  \n```\n\n# What are there in CUDA Toolkit\n```\n CUDA Installer                                                               \n  - [X] Driver                                                                 \n       [X] 440.33.01                                                           \n  - [X] CUDA Toolkit 10.2                                                      \n     - [X] CUDA Tools 10.2                                                     \n        - [X] CUDA Command Line Tools 10.2                                     \n             [X] cuda-gdb                                                      \n             [ ] cuda-gdb-src                                                  \n             [X] cuda-nvprof                                                   \n             [X] cuda-memcheck                                                 \n             [X] cuda-nvdisasm                                                 \n             [X] cuda-cupti                                                    \n             [X] cuda-sanitizer-api                                            \n             [X] cuda-nvtx                                                     \n        - [X] CUDA Visual Tools 10.2                                           \n             [X] cuda-nsight                                                   \n           - [X] cuda-nsight-compute                                           \n                [X] cuda-nsight-compute-integration                            \n           - [X] cuda-nsight-systems                                           \n                [X] cuda-nsight-systems-integration                            \n             [X] cuda-nvvp                                                     \n     - [X] CUDA Libraries 10.2                                                 \n        - [X] CUDA Runtime 10.2                                                \n             [X] cuda-cusolver                                                 \n             [X] libcublas10                                                   \n             [X] cuda-cufft                                                    \n             [X] cuda-curand                                                   \n             [X] cuda-cusparse                                                 \n             [X] cuda-nvgraph                                                  \n             [X] cuda-npp                                                      \n             [X] cuda-cudart                                                   \n             [X] cuda-nvrtc                                                    \n             [X] cuda-nvjpeg                                                   \n        - [X] CUDA Development 10.2                                            \n             [X] cuda-cusolver-dev                                             \n             [X] libcublas-dev                                                 \n             [X] cuda-cufft-dev                                                \n             [X] cuda-curand-dev                                               \n             [X] cuda-cusparse-dev                                             \n             [X] cuda-driver-dev                                               \n             [X] cuda-nvgraph-dev                                              \n             [X] cuda-npp-dev                                                  \n             [X] cuda-cudart-dev                                               \n             [X] cuda-nvrtc-dev                                                \n             [X] cuda-nvml-dev                                                 \n             [X] cuda-nvjpeg-dev                                               \n     - [X] CUDA Compiler 10.2                                                  \n          [X] cuda-nvcc                                                        \n          [X] cuda-cuobjdump                                                   \n          [X] cuda-nvprune                                                     \n       [X] CUDA Misc Headers 10.2                                              \n    [X] CUDA Samples 10.2                                                      \n    [X] CUDA Demo Suite 10.2                                                   \n    [X] CUDA Documentation 10.2                                                \n```\n\n# Post-Installation\n```\nDriver:   Not Selected\nToolkit:  Installed in /usr/local/cuda-10.2/\nSamples:  Installed in /home/luc/, but missing recommended libraries\n\nPlease make sure that\n -   PATH includes /usr/local/cuda-10.2/bin\n -   LD_LIBRARY_PATH includes /usr/local/cuda-10.2/lib64, or, add /usr/local/cuda-10.2/lib64 to /etc/ld.so.conf and run ldconfig as root\n\n  To uninstall the CUDA Toolkit, run cuda-uninstaller in /usr/local/cuda-10.2/bin\n\n  Please see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-10.2/doc/pdf for detailed information on setting up CUDA.\n  ***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 440.00 is required for CUDA 10.2 functionality to work.\n  To install the driver using this installer, run the following command, replacing <CudaInstaller> with the name of this\n  run file:\n      sudo <CudaInstaller>.run --silent --driver\n\n      Logfile is /var/log/cuda-installer.log\n```\n\n```\n* Please make sure your PATH includes /usr/local/cuda/bin\n* * Please make sure your LD_LIBRARY_PATH\n* *   for 32-bit Linux distributions includes /usr/local/cuda/lib\n* *   for 64-bit Linux distributions includes /usr/local/cuda/lib64:/usr/local/cuda/lib\n* * OR\n* *   for 32-bit Linux distributions add /usr/local/cuda/lib\n* *   for 64-bit Linux distributions add /usr/local/cuda/lib64 and /usr/local/cuda/lib\n* * to /etc/ld.so.conf and run ldconfig as root\n*\n* * Please read the release notes in /usr/local/cuda/doc/\n*\n* * To uninstall CUDA, remove the CUDA files in /usr/local/cuda\n* * Installation Complete\n```\n\nNOTES:\n\nGPGPU-sim has a restricted version of CUDA that ranging from 2.3 to 4.2. Neither the higher nor the lower does get it done.\n","slug":"install-cuda","published":1,"updated":"2020-03-29T10:49:46.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckair1g28000hpvk7br1u1qbi","content":"<p><a href=\"http://www.gpgpu-sim.org/\" target=\"_blank\" rel=\"noopener\">GPGPU-sim</a> is a cycle-level simulator modeling contemporary graphics processing units (GPUs) and running GPU computing workloads written in CUDA or OpenCL. To look insight of its source code, I try to build it on the WSL (just for fun). For now WSL has not provided the support for GPU device yet. Fortunately compiling of GPGPU-sim has no dependency on NVIDIA driver. All that it needs is CUDA toolkit.</p>\n<h1 id=\"Where-are-CUDA-Toolkit-installed\"><a href=\"#Where-are-CUDA-Toolkit-installed\" class=\"headerlink\" title=\"Where are CUDA Toolkit installed\"></a>Where are CUDA Toolkit installed</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Default Install Location of CUDA Toolkit                                    </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   Windows platform:                                                           </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   %ProgramFiles%\\NVIDIA GPU Computing Toolkit\\CUDA\\v#.#                       </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   Linux platform:                                                             </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   /usr/local/cuda-#.#                                                         </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   Mac platform:                                                               </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   /Developer/NVIDIA/CUDA-#.#</span><br><span class=\"line\"></span><br><span class=\"line\">Default Install Location of CUDA Samples                                    </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   Windows platform:                                                           </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   %ProgramData%\\NVIDIA Corporation\\CUDA Samples\\v#.#                          </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   Linux platform:                                                             </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   /usr/local/cuda-#.#/samples                                                 </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   and                                                                         </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   $HOME/NVIDIA_CUDA-#.#_Samples                                               </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   Mac platform:                                                               </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   /Developer/NVIDIA/CUDA-#.#/samples                                          </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   NVIDIA Nsight Visual Studio Edition (Windows only)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"What-are-there-in-CUDA-Toolkit\"><a href=\"#What-are-there-in-CUDA-Toolkit\" class=\"headerlink\" title=\"What are there in CUDA Toolkit\"></a>What are there in CUDA Toolkit</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CUDA Installer                                                               </span><br><span class=\"line\"> - [X] Driver                                                                 </span><br><span class=\"line\">      [X] 440.33.01                                                           </span><br><span class=\"line\"> - [X] CUDA Toolkit 10.2                                                      </span><br><span class=\"line\">    - [X] CUDA Tools 10.2                                                     </span><br><span class=\"line\">       - [X] CUDA Command Line Tools 10.2                                     </span><br><span class=\"line\">            [X] cuda-gdb                                                      </span><br><span class=\"line\">            [ ] cuda-gdb-src                                                  </span><br><span class=\"line\">            [X] cuda-nvprof                                                   </span><br><span class=\"line\">            [X] cuda-memcheck                                                 </span><br><span class=\"line\">            [X] cuda-nvdisasm                                                 </span><br><span class=\"line\">            [X] cuda-cupti                                                    </span><br><span class=\"line\">            [X] cuda-sanitizer-api                                            </span><br><span class=\"line\">            [X] cuda-nvtx                                                     </span><br><span class=\"line\">       - [X] CUDA Visual Tools 10.2                                           </span><br><span class=\"line\">            [X] cuda-nsight                                                   </span><br><span class=\"line\">          - [X] cuda-nsight-compute                                           </span><br><span class=\"line\">               [X] cuda-nsight-compute-integration                            </span><br><span class=\"line\">          - [X] cuda-nsight-systems                                           </span><br><span class=\"line\">               [X] cuda-nsight-systems-integration                            </span><br><span class=\"line\">            [X] cuda-nvvp                                                     </span><br><span class=\"line\">    - [X] CUDA Libraries 10.2                                                 </span><br><span class=\"line\">       - [X] CUDA Runtime 10.2                                                </span><br><span class=\"line\">            [X] cuda-cusolver                                                 </span><br><span class=\"line\">            [X] libcublas10                                                   </span><br><span class=\"line\">            [X] cuda-cufft                                                    </span><br><span class=\"line\">            [X] cuda-curand                                                   </span><br><span class=\"line\">            [X] cuda-cusparse                                                 </span><br><span class=\"line\">            [X] cuda-nvgraph                                                  </span><br><span class=\"line\">            [X] cuda-npp                                                      </span><br><span class=\"line\">            [X] cuda-cudart                                                   </span><br><span class=\"line\">            [X] cuda-nvrtc                                                    </span><br><span class=\"line\">            [X] cuda-nvjpeg                                                   </span><br><span class=\"line\">       - [X] CUDA Development 10.2                                            </span><br><span class=\"line\">            [X] cuda-cusolver-dev                                             </span><br><span class=\"line\">            [X] libcublas-dev                                                 </span><br><span class=\"line\">            [X] cuda-cufft-dev                                                </span><br><span class=\"line\">            [X] cuda-curand-dev                                               </span><br><span class=\"line\">            [X] cuda-cusparse-dev                                             </span><br><span class=\"line\">            [X] cuda-driver-dev                                               </span><br><span class=\"line\">            [X] cuda-nvgraph-dev                                              </span><br><span class=\"line\">            [X] cuda-npp-dev                                                  </span><br><span class=\"line\">            [X] cuda-cudart-dev                                               </span><br><span class=\"line\">            [X] cuda-nvrtc-dev                                                </span><br><span class=\"line\">            [X] cuda-nvml-dev                                                 </span><br><span class=\"line\">            [X] cuda-nvjpeg-dev                                               </span><br><span class=\"line\">    - [X] CUDA Compiler 10.2                                                  </span><br><span class=\"line\">         [X] cuda-nvcc                                                        </span><br><span class=\"line\">         [X] cuda-cuobjdump                                                   </span><br><span class=\"line\">         [X] cuda-nvprune                                                     </span><br><span class=\"line\">      [X] CUDA Misc Headers 10.2                                              </span><br><span class=\"line\">   [X] CUDA Samples 10.2                                                      </span><br><span class=\"line\">   [X] CUDA Demo Suite 10.2                                                   </span><br><span class=\"line\">   [X] CUDA Documentation 10.2</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Post-Installation\"><a href=\"#Post-Installation\" class=\"headerlink\" title=\"Post-Installation\"></a>Post-Installation</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Driver:   Not Selected</span><br><span class=\"line\">Toolkit:  Installed in /usr/local/cuda-10.2/</span><br><span class=\"line\">Samples:  Installed in /home/luc/, but missing recommended libraries</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure that</span><br><span class=\"line\"> -   PATH includes /usr/local/cuda-10.2/bin</span><br><span class=\"line\"> -   LD_LIBRARY_PATH includes /usr/local/cuda-10.2/lib64, or, add /usr/local/cuda-10.2/lib64 to /etc/ld.so.conf and run ldconfig as root</span><br><span class=\"line\"></span><br><span class=\"line\">  To uninstall the CUDA Toolkit, run cuda-uninstaller in /usr/local/cuda-10.2/bin</span><br><span class=\"line\"></span><br><span class=\"line\">  Please see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-10.2/doc/pdf for detailed information on setting up CUDA.</span><br><span class=\"line\">  ***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 440.00 is required for CUDA 10.2 functionality to work.</span><br><span class=\"line\">  To install the driver using this installer, run the following command, replacing &lt;CudaInstaller&gt; with the name of this</span><br><span class=\"line\">  run file:</span><br><span class=\"line\">      sudo &lt;CudaInstaller&gt;.run --silent --driver</span><br><span class=\"line\"></span><br><span class=\"line\">      Logfile is /var/log/cuda-installer.log</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Please make sure your PATH includes /usr/local/cuda/bin</span><br><span class=\"line\">* * Please make sure your LD_LIBRARY_PATH</span><br><span class=\"line\">* *   for 32-bit Linux distributions includes /usr/local/cuda/lib</span><br><span class=\"line\">* *   for 64-bit Linux distributions includes /usr/local/cuda/lib64:/usr/local/cuda/lib</span><br><span class=\"line\">* * OR</span><br><span class=\"line\">* *   for 32-bit Linux distributions add /usr/local/cuda/lib</span><br><span class=\"line\">* *   for 64-bit Linux distributions add /usr/local/cuda/lib64 and /usr/local/cuda/lib</span><br><span class=\"line\">* * to /etc/ld.so.conf and run ldconfig as root</span><br><span class=\"line\">*</span><br><span class=\"line\">* * Please read the release notes in /usr/local/cuda/doc/</span><br><span class=\"line\">*</span><br><span class=\"line\">* * To uninstall CUDA, remove the CUDA files in /usr/local/cuda</span><br><span class=\"line\">* * Installation Complete</span><br></pre></td></tr></table></figure>\n\n<p>NOTES:</p>\n<p>GPGPU-sim has a restricted version of CUDA that ranging from 2.3 to 4.2. Neither the higher nor the lower does get it done.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.gpgpu-sim.org/\" target=\"_blank\" rel=\"noopener\">GPGPU-sim</a> is a cycle-level simulator modeling contemporary graphics processing units (GPUs) and running GPU computing workloads written in CUDA or OpenCL. To look insight of its source code, I try to build it on the WSL (just for fun). For now WSL has not provided the support for GPU device yet. Fortunately compiling of GPGPU-sim has no dependency on NVIDIA driver. All that it needs is CUDA toolkit.</p>\n<h1 id=\"Where-are-CUDA-Toolkit-installed\"><a href=\"#Where-are-CUDA-Toolkit-installed\" class=\"headerlink\" title=\"Where are CUDA Toolkit installed\"></a>Where are CUDA Toolkit installed</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Default Install Location of CUDA Toolkit                                    </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   Windows platform:                                                           </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   %ProgramFiles%\\NVIDIA GPU Computing Toolkit\\CUDA\\v#.#                       </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   Linux platform:                                                             </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   /usr/local/cuda-#.#                                                         </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   Mac platform:                                                               </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   /Developer/NVIDIA/CUDA-#.#</span><br><span class=\"line\"></span><br><span class=\"line\">Default Install Location of CUDA Samples                                    </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   Windows platform:                                                           </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   %ProgramData%\\NVIDIA Corporation\\CUDA Samples\\v#.#                          </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   Linux platform:                                                             </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   /usr/local/cuda-#.#/samples                                                 </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   and                                                                         </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   $HOME/NVIDIA_CUDA-#.#_Samples                                               </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   Mac platform:                                                               </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   /Developer/NVIDIA/CUDA-#.#/samples                                          </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">                                                                               </span><br><span class=\"line\">   NVIDIA Nsight Visual Studio Edition (Windows only)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"What-are-there-in-CUDA-Toolkit\"><a href=\"#What-are-there-in-CUDA-Toolkit\" class=\"headerlink\" title=\"What are there in CUDA Toolkit\"></a>What are there in CUDA Toolkit</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CUDA Installer                                                               </span><br><span class=\"line\"> - [X] Driver                                                                 </span><br><span class=\"line\">      [X] 440.33.01                                                           </span><br><span class=\"line\"> - [X] CUDA Toolkit 10.2                                                      </span><br><span class=\"line\">    - [X] CUDA Tools 10.2                                                     </span><br><span class=\"line\">       - [X] CUDA Command Line Tools 10.2                                     </span><br><span class=\"line\">            [X] cuda-gdb                                                      </span><br><span class=\"line\">            [ ] cuda-gdb-src                                                  </span><br><span class=\"line\">            [X] cuda-nvprof                                                   </span><br><span class=\"line\">            [X] cuda-memcheck                                                 </span><br><span class=\"line\">            [X] cuda-nvdisasm                                                 </span><br><span class=\"line\">            [X] cuda-cupti                                                    </span><br><span class=\"line\">            [X] cuda-sanitizer-api                                            </span><br><span class=\"line\">            [X] cuda-nvtx                                                     </span><br><span class=\"line\">       - [X] CUDA Visual Tools 10.2                                           </span><br><span class=\"line\">            [X] cuda-nsight                                                   </span><br><span class=\"line\">          - [X] cuda-nsight-compute                                           </span><br><span class=\"line\">               [X] cuda-nsight-compute-integration                            </span><br><span class=\"line\">          - [X] cuda-nsight-systems                                           </span><br><span class=\"line\">               [X] cuda-nsight-systems-integration                            </span><br><span class=\"line\">            [X] cuda-nvvp                                                     </span><br><span class=\"line\">    - [X] CUDA Libraries 10.2                                                 </span><br><span class=\"line\">       - [X] CUDA Runtime 10.2                                                </span><br><span class=\"line\">            [X] cuda-cusolver                                                 </span><br><span class=\"line\">            [X] libcublas10                                                   </span><br><span class=\"line\">            [X] cuda-cufft                                                    </span><br><span class=\"line\">            [X] cuda-curand                                                   </span><br><span class=\"line\">            [X] cuda-cusparse                                                 </span><br><span class=\"line\">            [X] cuda-nvgraph                                                  </span><br><span class=\"line\">            [X] cuda-npp                                                      </span><br><span class=\"line\">            [X] cuda-cudart                                                   </span><br><span class=\"line\">            [X] cuda-nvrtc                                                    </span><br><span class=\"line\">            [X] cuda-nvjpeg                                                   </span><br><span class=\"line\">       - [X] CUDA Development 10.2                                            </span><br><span class=\"line\">            [X] cuda-cusolver-dev                                             </span><br><span class=\"line\">            [X] libcublas-dev                                                 </span><br><span class=\"line\">            [X] cuda-cufft-dev                                                </span><br><span class=\"line\">            [X] cuda-curand-dev                                               </span><br><span class=\"line\">            [X] cuda-cusparse-dev                                             </span><br><span class=\"line\">            [X] cuda-driver-dev                                               </span><br><span class=\"line\">            [X] cuda-nvgraph-dev                                              </span><br><span class=\"line\">            [X] cuda-npp-dev                                                  </span><br><span class=\"line\">            [X] cuda-cudart-dev                                               </span><br><span class=\"line\">            [X] cuda-nvrtc-dev                                                </span><br><span class=\"line\">            [X] cuda-nvml-dev                                                 </span><br><span class=\"line\">            [X] cuda-nvjpeg-dev                                               </span><br><span class=\"line\">    - [X] CUDA Compiler 10.2                                                  </span><br><span class=\"line\">         [X] cuda-nvcc                                                        </span><br><span class=\"line\">         [X] cuda-cuobjdump                                                   </span><br><span class=\"line\">         [X] cuda-nvprune                                                     </span><br><span class=\"line\">      [X] CUDA Misc Headers 10.2                                              </span><br><span class=\"line\">   [X] CUDA Samples 10.2                                                      </span><br><span class=\"line\">   [X] CUDA Demo Suite 10.2                                                   </span><br><span class=\"line\">   [X] CUDA Documentation 10.2</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Post-Installation\"><a href=\"#Post-Installation\" class=\"headerlink\" title=\"Post-Installation\"></a>Post-Installation</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Driver:   Not Selected</span><br><span class=\"line\">Toolkit:  Installed in /usr/local/cuda-10.2/</span><br><span class=\"line\">Samples:  Installed in /home/luc/, but missing recommended libraries</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure that</span><br><span class=\"line\"> -   PATH includes /usr/local/cuda-10.2/bin</span><br><span class=\"line\"> -   LD_LIBRARY_PATH includes /usr/local/cuda-10.2/lib64, or, add /usr/local/cuda-10.2/lib64 to /etc/ld.so.conf and run ldconfig as root</span><br><span class=\"line\"></span><br><span class=\"line\">  To uninstall the CUDA Toolkit, run cuda-uninstaller in /usr/local/cuda-10.2/bin</span><br><span class=\"line\"></span><br><span class=\"line\">  Please see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-10.2/doc/pdf for detailed information on setting up CUDA.</span><br><span class=\"line\">  ***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 440.00 is required for CUDA 10.2 functionality to work.</span><br><span class=\"line\">  To install the driver using this installer, run the following command, replacing &lt;CudaInstaller&gt; with the name of this</span><br><span class=\"line\">  run file:</span><br><span class=\"line\">      sudo &lt;CudaInstaller&gt;.run --silent --driver</span><br><span class=\"line\"></span><br><span class=\"line\">      Logfile is /var/log/cuda-installer.log</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Please make sure your PATH includes /usr/local/cuda/bin</span><br><span class=\"line\">* * Please make sure your LD_LIBRARY_PATH</span><br><span class=\"line\">* *   for 32-bit Linux distributions includes /usr/local/cuda/lib</span><br><span class=\"line\">* *   for 64-bit Linux distributions includes /usr/local/cuda/lib64:/usr/local/cuda/lib</span><br><span class=\"line\">* * OR</span><br><span class=\"line\">* *   for 32-bit Linux distributions add /usr/local/cuda/lib</span><br><span class=\"line\">* *   for 64-bit Linux distributions add /usr/local/cuda/lib64 and /usr/local/cuda/lib</span><br><span class=\"line\">* * to /etc/ld.so.conf and run ldconfig as root</span><br><span class=\"line\">*</span><br><span class=\"line\">* * Please read the release notes in /usr/local/cuda/doc/</span><br><span class=\"line\">*</span><br><span class=\"line\">* * To uninstall CUDA, remove the CUDA files in /usr/local/cuda</span><br><span class=\"line\">* * Installation Complete</span><br></pre></td></tr></table></figure>\n\n<p>NOTES:</p>\n<p>GPGPU-sim has a restricted version of CUDA that ranging from 2.3 to 4.2. Neither the higher nor the lower does get it done.</p>\n"},{"title":"Notes for Mesa","date":"2020-02-03T16:00:00.000Z","_content":"[Mesa](https://mesa3d.org/) is an open source implementation for OpenGL. Check [repository](https://gitlab.freedesktop.org/mesa/mesa) for its source code. There are something worth to learn about this project for a graphic driver developer.\n\n## Build\nIt's good choice for exploring any project's source code to start with its build script. So here is the start.\n\n### Requisite\n* Run-time dependency\n    - libdrm_intel\n    - libdrm_amdgpu\n    - libdrm_radeon\n    - libdrm_nouveau\n    - libdrm\n    - LLVM\n    - libelf\n    - valgrind\n    - bison\n    - flex\n    - gettext\n\n* Build-time dependency\n    - libx11-xcb-dev\n    - libxcb-fixes0-dev\n    - libxext-dev\n    - libxdamage-dev (if glx option is dri)\n    - libxfixes-dev (if glx option is dri)\n    - libxcb-glx-dev (if glx option is dri)\n    - libxcb-dri2-dev (if glx option is dri)\n    - libxxf86vm-dev (if glx option is dri)\n\nThese dependencies include from build-time headers to run-time tools. Nevertheless most of them are optional but not necessary. You can customize them in **meson_options.txt** by modifying the **value** field of each option. With the listed above run and build time dependencies installed you can create a build directory and start to configure.\n\n``` bash\nmeson build\n```\n\nYou can configure a minimal dependencies mesa given that WSL is not a desktop platform as the following my configuration result:\n\n```\nMessage: Configuration summary:\n        \n        prefix:          /usr/local\n        libdir:          lib/x86_64-linux-gnu\n        includedir:      include\n        \n        OpenGL:          yes (ES1: no ES2: no)\n        \n        OSMesa:          libOSMesa\n        \n        GLX:             Xlib-based (Gallium)\n        \n        EGL:             no\n        GBM:             no\n        EGL/Vulkan/VL platforms:   x11\n        \n        Vulkan drivers:  no\n        \n        llvm:            yes\n        llvm-version:    9.0.0\n        \n        Gallium drivers: swrast\n        Gallium st:      mesa\n        HUD lmsensors:   no\n        \n        Shared-glapi:    yes\n\nBuild targets in project: 90\nWARNING: Project specifies a minimum meson_version '>= 0.46' but uses features which were added in newer versions:\n * 0.51.0: {'dep.get_variable'}\nFound ninja-1.9.0 at /usr/bin/ninja\n```\nAs you see this configuration supports quite a few components which are essential for off-screen rendering. Once dependencies check passed fully you can begin to compile and install:\n\n``` bash\nninja -C build && sudo ninja -C build install\n```\n\nAfter compilation and installed as follow:\n\n``` bash\nls -l /usr/local/lib/x86_64-linux-gnu\ntotal 159360\nlrwxrwxrwx 1 root root        10 Feb  7 17:13 libGL.so -> libGL.so.1\nlrwxrwxrwx 1 root root        14 Feb  7 17:13 libGL.so.1 -> libGL.so.1.5.0\n-rwxr-xr-x 1 root root 111044912 Feb  7 17:13 libGL.so.1.5.0\nlrwxrwxrwx 1 root root        14 Feb  7 17:13 libOSMesa.so -> libOSMesa.so.8\nlrwxrwxrwx 1 root root        18 Feb  7 17:13 libOSMesa.so.8 -> libOSMesa.so.8.0.0\n-rwxr-xr-x 1 root root  51541176 Feb  7 17:13 libOSMesa.so.8.0.0\nlrwxrwxrwx 1 root root        13 Feb  7 17:13 libglapi.so -> libglapi.so.0\nlrwxrwxrwx 1 root root        17 Feb  7 17:13 libglapi.so.0 -> libglapi.so.0.0.0\n-rwxr-xr-x 1 root root    337264 Feb  7 17:07 libglapi.so.0.0.0\ndrwxr-xr-x 1 root root       512 Feb  7 17:13 pkgconfig\n```\n\nNOTE:\n- Mesa is installed in `/usr/local/lib/$(uname -p)-linux-gnu` by default. So you have to `ldconfig` so that your linker can find them.\n- libsoftpipe.a will be built but not installed.\n- meson build system will enable compiler's `-g` flag by default unless you are building on the release branch.\n- if you have remodified the **meson_options.txt** and built once and now are about to reconfigure and rebuild, you need to run:\n\n``` bash\nmeson setup --wipe build\n```\n\n## Off-screen Demos\nNow that mesa have been built and installed we can give a try to run an OGL application. Similarly without window system supportd on the WSL, [off-screen rendering](https://mesa3d.org/osmesa.html) is my choice. We can clone the mesa [demos](https://gitlab.freedesktop.org/mesa/demos) which includes a lot of demos besides off-screen demos. \n\n### Requisite\nWe need some more libraries besides libOSMesa and libGL before you can get these off-screen demos worked. They are:\n- [GLU](https://gitlab.freedesktop.org/mesa/glu)\n- libm\n\nTo build these demos:\n``` bash\ngcc osdemo.c -o osdemo -g -I/home/luc/github/demos/src/util -lGL -lGLU -lOSMesa -lm\n```\n\nThe executable osdemo saves the rendered pixels as the portable pixmap format. You need to covert it to image format e.g. jpg. You may do this with `pnmtojpeg output.ppm > output.jpg`.\n\n<div align=center>{% asset_img \"osdemo.jpg\" \"osdemo\" %}</div>\n\n## OSMesa Call Graphs\nMesa supports many features from software pipelines to hardware drivers. For example [Gallium](https://www.freedesktop.org/wiki/Software/gallium/), it features with several software or hardware implementations which include the two software pipelines, softpipe and [llvmpipe](https://www.mesa3d.org/llvmpipe.html). With the different pipes enabled will the calls walk in the different paths. \n\n### Three Different Build Configuration (reference to **meson_options.txt**)\n| Option | *platform* | *glx* | *dri-drivers* | *gallium-drivers* | *llvm* | *osmesa* |\n|-|-|-|-|-|-|-|\n| **llvmpipe** | x11 | gallium-xlib | | swrast | true  | gallium |\n| **softpipe** | x11 | gallium-xlib | | swrast | false | gallium |\n| **tnl**      | x11 | gallium-xlib | | swrast | true  | classic |\n\n### Three Different Call Paths\n#### Context\n<div align=center>{% asset_img OSMesaCreateContextExt.png \"context initialization\" %}</div>\n\nNOTE: As for softpipe and llvmpipe `gl_api` and `gl_context` are created respectively while both of them are created in one path for the classic osmesa.\n\n#### Draw\n<div align=center>{% asset_img PopMatrix.png \"draw command\" %}</div>\n\n## Gallium-Based GLX Demos\nIf you want to know the full graphic stack of an OpenGL demo, you can not get rid of the window system. That is why I will try some GLX demos. Evidently GLX demos must depend on X11. You can cope with this problem by installing [vcXsrv](https://sourceforge.net/projects/vcxsrv/) on the Windows 10 which hosts your WSL. \n\n<div align=center>{% asset_img glxgears.png \"glx demo\" %}</div>\n\nThis time I still choose the gallium-xlib with softpipe. The following call graph shows the path that GLX context is created.\n\n<div align=center>{% asset_img glXCreateContext.png \"glx context creation\" %}</div>\n\nAs we know, Mesa is quite modularized and flexible. How does it take the path that `softpipe_create_context` rather than other pipe contexts? The [st_manager](https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/include/state_tracker/st_api.h) is a key structure.\n\n`struct pipe_screen` has a callback function that will be set to `softpipe_create_context`. The following calls will create `struct pipe_screen` that will be set to the `st_manager`.\n\n<div align=center>{% asset_img glXChooseVisual.png \"pipe_screen creation\" %}</div>\n\nTo bind the intended gallium driver backend to Mesa there must be something done before `glXChooseVisual` is called. It's started by the library `init()` and prepare the global variables.\n\n[xm_public.h](https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/state_trackers/glx/xlib/xm_public.h)\n\n``` c\n/* This is the driver interface required by the glx/xlib state tracker. \n */\nstruct xm_driver {\n   struct pipe_screen *(*create_pipe_screen)( Display *display );\n   struct st_api *(*create_st_api)( void );\n};\n\nextern void\nxmesa_set_driver( const struct xm_driver *driver );\n```\n\n[xlib.c](https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/targets/libgl-xlib/xlib.c)\n\n``` c\n/* Helper function to build a subset of a driver stack consisting of\n * one of the software rasterizers (llvmpipe, softpipe) and the\n * xlib winsys.\n */\nstatic struct pipe_screen *\nswrast_xlib_create_screen( Display *display )\n{\n   struct sw_winsys *winsys;\n   struct pipe_screen *screen = NULL;\n\n   /* Create the underlying winsys, which performs presents to Xlib\n    * drawables:\n    */\n   winsys = xlib_create_sw_winsys( display );\n   if (winsys == NULL)\n      return NULL;\n\n   /* Create a software rasterizer on top of that winsys:\n    */\n   screen = sw_screen_create( winsys );\n   if (screen == NULL)\n      goto fail;\n\n   /* Inject any wrapping layers we want to here:\n    */\n   return debug_screen_wrap( screen );\n\nfail:\n   if (winsys)\n      winsys->destroy( winsys );\n\n   return NULL;\n}\n\nstatic struct xm_driver xlib_driver = \n{\n   .create_pipe_screen = swrast_xlib_create_screen,\n   .create_st_api = st_gl_api_create,\n};\n\n\n/* Build the rendering stack.\n *\n * NOTE: The obsolete symbols _init and _fini\n *\n * signature:\n * void _init(void);\n * void _fini(void);\n *\n * The linker recoginizes special symbols _init and _fini. If a dynamic library\n * exports a routine named _init, then that code is executed after the loading,\n * before dlopen() returns. If the dynamic library exports a routine named _fini,\n * then that routine is called just before the library is unloaded. In case you\n * need to avoid linking against the system startup files,this can be done by\n * giving gcc the \"-nostartfiles\" parameter on the command line.\n * Using these routines, or the gcc -nostartfiles of -nostdlib options, is not\n * recommended. Their use may result in undesired behavior, since the constructor/\n * destructor routines will not be executed(unless special measures are taken).\n * Instead, libraries should export routines using the __attribute__((constructor))\n * and __attribute__((destructor)) function attributes. Constructor routines are\n * executed before dlopen() returns, and destructor routines ared executed before\n * dlclose() returns.\n */\nstatic void _init( void ) __attribute__((constructor));\nstatic void _init( void )\n{\n   /* Initialize the xlib libgl code, pass in the winsys:\n    */\n   xmesa_set_driver( &xlib_driver );\n}\n```\n\nwhere define the `xlib_driver` and set by `_init()`.\n\n[sw_helper.h](https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/auxiliary/target-helpers/sw_helper.h)\n\n``` c\nstatic inline struct pipe_screen *\nsw_screen_create_named(struct sw_winsys *winsys, const char *driver)\n{\n   struct pipe_screen *screen = NULL;\n\n#if defined(GALLIUM_LLVMPIPE)\n   if (screen == NULL && strcmp(driver, \"llvmpipe\") == 0)\n      screen = llvmpipe_create_screen(winsys);\n#endif\n\n#if defined(GALLIUM_VIRGL)\n   if (screen == NULL && strcmp(driver, \"virpipe\") == 0) {\n      struct virgl_winsys *vws;\n      vws = virgl_vtest_winsys_wrap(winsys);\n      screen = virgl_create_screen(vws, NULL);\n   }\n#endif\n\n#if defined(GALLIUM_SOFTPIPE)\n   if (screen == NULL && strcmp(driver, \"softpipe\") == 0)\n      screen = softpipe_create_screen(winsys);\n#endif\n\n#if defined(GALLIUM_SWR)\n   if (screen == NULL && strcmp(driver, \"swr\") == 0)\n      screen = swr_create_screen(winsys);\n#endif\n\n#if defined(GALLIUM_ZINK)\n   if (screen == NULL && strcmp(driver, \"zink\") == 0)\n      screen = zink_create_screen(winsys);\n#endif\n\n   return screen;\n}\n\n\nstruct pipe_screen *\nsw_screen_create(struct sw_winsys *winsys)\n{\n   const char *default_driver;\n   const char *driver;\n\n#if defined(GALLIUM_LLVMPIPE)\n   default_driver = \"llvmpipe\";\n#elif defined(GALLIUM_SOFTPIPE)\n   default_driver = \"softpipe\";\n#elif defined(GALLIUM_SWR)\n   default_driver = \"swr\";\n#elif defined(GALLIUM_ZINK)\n   default_driver = \"zink\";\n#else\n   default_driver = \"\";\n#endif\n\n   driver = debug_get_option(\"GALLIUM_DRIVER\", default_driver);\n   return sw_screen_create_named(winsys, driver);\n}\n```\n\n[xm_api.c](https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/state_trackers/glx/xlib/xm_api.c)\n\n``` c\n/* Driver interface routines, set up by xlib backend on library\n * _init().  These are global in the same way that function names are\n * global.\n */\nstatic struct xm_driver driver;\nstatic struct st_api *stapi;\n\nvoid xmesa_set_driver( const struct xm_driver *templ )\n{\n   driver = *templ;\n   stapi = driver.create_st_api();\n\n   xmesa_strict_invalidate =\n      debug_get_bool_option(\"XMESA_STRICT_INVALIDATE\", FALSE);\n}\n\nstatic XMesaDisplay\nxmesa_init_display( Display *display )\n{\n   static mtx_t init_mutex = _MTX_INITIALIZER_NP;\n   XMesaDisplay xmdpy;\n   XMesaExtDisplayInfo *info;\n\n   if (display == NULL) {\n      return NULL;\n   }\n\n   mtx_lock(&init_mutex);\n\n   /* Look for XMesaDisplay which corresponds to this display */\n   info = MesaExtInfo.head;\n   while(info) {\n      if (info->display == display) {\n         /* Found it */\n         mtx_unlock(&init_mutex);\n         return  &info->mesaDisplay;\n      }\n      info = info->next;\n   }\n\n   /* Not found.  Create new XMesaDisplay */\n   /* first allocate X-related resources and hook destroy callback */\n\n   /* allocate mesa display info */\n   info = (XMesaExtDisplayInfo *) Xmalloc(sizeof(XMesaExtDisplayInfo));\n   if (info == NULL) {\n      mtx_unlock(&init_mutex);\n      return NULL;\n   }\n   info->display = display;\n\n   xmdpy = &info->mesaDisplay; /* to be filled out below */\n   xmdpy->display = display;\n   xmdpy->pipe = NULL;\n\n   xmdpy->smapi = CALLOC_STRUCT(st_manager);\n   if (!xmdpy->smapi) {\n      Xfree(info);\n      mtx_unlock(&init_mutex);\n      return NULL;\n   }\n\n   xmdpy->screen = driver.create_pipe_screen(display);\n   if (!xmdpy->screen) {\n      free(xmdpy->smapi);\n      Xfree(info);\n      mtx_unlock(&init_mutex);\n      return NULL;\n   }\n\n   /* At this point, both smapi and screen are known to be valid */\n   xmdpy->smapi->screen = xmdpy->screen;\n   xmdpy->smapi->get_param = xmesa_get_param;\n   (void) mtx_init(&xmdpy->mutex, mtx_plain);\n\n   /* chain to the list of displays */\n   _XLockMutex(_Xglobal_lock);\n   info->next = MesaExtInfo.head;\n   MesaExtInfo.head = info;\n   MesaExtInfo.ndisplays++;\n   _XUnlockMutex(_Xglobal_lock);\n\n   mtx_unlock(&init_mutex);\n\n   return xmdpy;\n}\n```\n\nwhere `driver.create_pipe_screen(display)` is instantiated as `xlib_driver.swrast_xlib_create_screen`. As we see, the dynamic library routine `_init()` will set `xlib_driver.create_pipe_screen` to `swrast_xlib_create_screen` that return a `pipe_screen` to be set to the `st_manager->screen`. Eventually those two helper functions decide which gallium driver backend will be used by compilation macros.\n\n## Gallium Genbu\nTo verify the analysis above we will try to add a customized gallium driver named **genbu** as a clone from the existing softpipe based GLX. All that we will do is three parts work below.\n\n- key data structures: genbu_screen, genbu_context, the related callbacks and definitions \n- helper functions for loading software rasterizers for GLX\n- build scripts\n\n### [Added or Modified Sources and Build Scripts](https://gitlab.freedesktop.org/lucmaa/mesa/tree/gallium-gb-1.0)\n\n### Trace\n\n| *belong* | *hook* | *callback* | *caller* | *X/GL API* |\n|-|-|-|-|-|\n| pipe_screen | resource_create | softpipe_resource_create | bufferobj_data | |\n| pipe_context | transfer_map | softpipe_transfer_map | | |\n| pipe_context | create_surface | softpipe_create_surface | st_framebuffer_validate | |\n| pipe_context | flush | softpipe_flush_wrapped | st_context_flush | glXSwapBuffers |\n| pipe_context | clear | softpipe_clear | st_Clear | glClear |\n| pipe_context | draw_vbo | softpipe_draw_vbo | st_draw_vbo | glCallList |\n| pipe_context | draw_vbo | softpipe_draw_vbo | st_draw_vbo | glCallList |\n\n\n## DRI-Based GLX Demos\n\n### Loading\n\n- `__glXInitialize`\n- `driOpenDriver`\n\n``` c\n#if defined(GLX_DIRECT_RENDERING) && !defined(GLX_USE_APPLEGL)\n   glx_direct = !env_var_as_boolean(\"LIBGL_ALWAYS_INDIRECT\", false);\n   glx_accel = !env_var_as_boolean(\"LIBGL_ALWAYS_SOFTWARE\", false);\n\n   dpyPriv->drawHash = __glxHashCreate();\n\n   /*\n    ** Initialize the direct rendering per display data and functions.\n    ** Note: This _must_ be done before calling any other DRI routines\n    ** (e.g., those called in AllocAndFetchScreenConfigs).\n    */\n#if defined(GLX_USE_DRM)\n   if (glx_direct && glx_accel) {\n#if defined(HAVE_DRI3)\n      if (!env_var_as_boolean(\"LIBGL_DRI3_DISABLE\", false))\n         dpyPriv->dri3Display = dri3_create_display(dpy);\n#endif /* HAVE_DRI3 */\n      dpyPriv->dri2Display = dri2CreateDisplay(dpy);\n      dpyPriv->driDisplay = driCreateDisplay(dpy);\n   }\n#endif /* GLX_USE_DRM */\n   if (glx_direct)\n      dpyPriv->driswDisplay = driswCreateDisplay(dpy);\n#endif /* GLX_DIRECT_RENDERING && !GLX_USE_APPLEGL */\n\n#ifdef GLX_USE_APPLEGL\n   if (!applegl_create_display(dpyPriv)) {\n      free(dpyPriv);\n      return NULL;\n   }\n#endif\n\n#ifdef GLX_USE_WINDOWSGL\n   if (glx_direct && glx_accel)\n      dpyPriv->windowsdriDisplay = driwindowsCreateDisplay(dpy);\n#endif\n\n   if (!AllocAndFetchScreenConfigs(dpy, dpyPriv)) {\n      free(dpyPriv);\n      return NULL;\n   }\n```\n\nThis process of loading drivers works similarly with that of gallium-based glx. Compilation macros and environment variables make a difference. There are several approaches to load the specific drivers:\n\n- `dri3_create_display`\n- `dri2CreateDisplay`\n- `driCreateDisplay`\n- `driswCreateDisplay`\n- `applegl_create_display`\n- `driwindowsCreateDisplay`\n\nLet's look into `driCreateDisplay`. Once it manages to attach to `driCreateScreen` which searches and matches the appropriate gallium driver the function `driOpenDriver` will open the **found** driver by its name like \"i965\", \"radeon\", \"nouveau\", etc. These drivers are supposed to be installed at **`LIBGL_DRIVERS_PATH`** or `LIBGL_DRIVERS_DIR`(deprecated) and named as `*_dri.so` by default.\n\nLike Gallium-based GLX's `_init` routine with GCC **`constructor`** attribute, DRI-based GLX also defines a routine `megadriver_stub_init` with `constructor` attribute which allows to load the specific driver in a way of **`__DRIextension`**.\n\n<div align=center>{% asset_img \"gdb.svg\" \"osdemo\" %}</div>\n\n\n``` c\n/**\n * This is a constructor function for the megadriver dynamic library.\n *\n * When the driver is dlopen'ed, this function will run. It will\n * search for the name of the foo_dri.so file that was opened using\n * the dladdr function.\n *\n * After finding foo's name, it will call __driDriverGetExtensions_foo\n * and use the return to update __driDriverExtensions to enable\n * compatibility with older DRI driver loaders.\n */\n__attribute__((constructor)) static void\nmegadriver_stub_init(void);\n```\n\n``` c\n/*\n * Allocate, initialize and return a __DRIdisplayPrivate object.\n * This is called from __glXInitialize() when we are given a new\n * display pointer.\n */\n_X_HIDDEN __GLXDRIdisplay *\ndriCreateDisplay(Display * dpy)\n{\n   struct dri_display *pdpyp;\n   int eventBase, errorBase;\n   int major, minor, patch;\n\n   if (!XF86DRIQueryExtension(dpy, &eventBase, &errorBase)) {\n      return NULL;\n   }\n\n   if (!XF86DRIQueryVersion(dpy, &major, &minor, &patch)) {\n      return NULL;\n   }\n\n   pdpyp = malloc(sizeof *pdpyp);\n   if (!pdpyp) {\n      return NULL;\n   }\n\n   pdpyp->driMajor = major;\n   pdpyp->driMinor = minor;\n   pdpyp->driPatch = patch;\n\n   pdpyp->base.destroyDisplay = driDestroyDisplay;\n   pdpyp->base.createScreen = driCreateScreen;\n\n   return &pdpyp->base;\n}\n```\n\n## Contexts\nThere are a variety of **contexts** in Mesa. They are designed as a framework of layers.\n\n```\n__________________\n|                |\n|   gl_contex    | --------------> standard & general\n|________________|\n\n__________________\n|                |\n|   st_contex    | --------------> adapter\n|________________|\n\n__________________\n|                |\n|  draw_contex   | --------------> driver-specific\n|________________|\n\n```\n\n### gl_context\n{% blockquote %}\nThis is the central context data structure for Mesa. Almost all OpenGL state is contained in this structure. Think of this as a base class from which device drivers will derive sub classes.\n{% endblockquote %}\nApart from OpenGL state it contains several other contexts\n\n- `swrast_context`\n- `swsetup_context`\n- `swtnl_context`\n- `vbo_context`\n- `st_context`\n\n### st_context\n\n### draw_context\n\n### vbo_context\nVBO is short for vertex buffer object. This context derives two kinds of vbo contexts, `vbo_exec_context` and `vbo_save_context` which `vbo_exec_context` is generic for core and compatible ogl and the other is specific for compatible ogl.\n\n#### vbo_exec_vtx_init\n\n- Allocate a `gl_buffer_object` which just is referenced.\n- Initialize vbo attributes including size, type and active size.\n\n#### vbo vs. vao\n\n``` c\nstruct gl_buffer_object\n{\n   GLint RefCount;\n   GLuint Name;\n   GLchar *Label;       \n   GLenum16 Usage;      \n   GLbitfield StorageFlags; \n   GLsizeiptrARB Size;  \n   GLubyte *Data;       \n   GLboolean DeletePending;   \n   GLboolean Written;   \n   GLboolean Purgeable; \n   GLboolean Immutable; \n   gl_buffer_usage UsageHistory; \n   GLuint NumSubDataCalls;\n   GLuint NumMapBufferWriteCalls;\n   struct gl_buffer_mapping Mappings[MAP_COUNT];\n   simple_mtx_t MinMaxCacheMutex;\n   struct hash_table *MinMaxCache;\n   unsigned MinMaxCacheHitIndices;\n   unsigned MinMaxCacheMissIndices;\n   bool MinMaxCacheDirty;\n   bool HandleAllocated; \n};\n\n\nstruct gl_vertex_array_object\n{\n   GLuint Name;\n   GLint RefCount;\n   GLchar *Label;       \n   GLboolean EverBound;\n   bool SharedAndImmutable;\n   struct gl_array_attributes VertexAttrib[VERT_ATTRIB_MAX];\n   struct gl_vertex_buffer_binding BufferBinding[VERT_ATTRIB_MAX];\n   GLbitfield VertexAttribBufferMask;\n   GLbitfield Enabled;\n   GLbitfield _EffEnabledVBO;\n   gl_attribute_map_mode _AttributeMapMode;\n   GLbitfield NewArrays;\n   struct gl_buffer_object *IndexBufferObj;\n};\n```\n\n## Dispatchers\n\n- *`Exec`*: The current dispatch table for non-displaylist-saving execution, either BeginEnd or OutsideBeginEnd\n- *`OutsideBeginEnd`*: The normal dispatch table for non-displaylist-saving, non-begin/end\n- *`Save`*: The dispatch table used between glNewList() and glEndList()\n- *`BeginEnd`*: The dispatch table used between glBegin() and glEnd() (outside of a display list). Only valid functions between those two are set, which is mostly just the set in a GLvertexformat struct.\n- *`ContextLost`*: Dispatch table for when a graphics reset has happened.\n- *`MarshalExec`*: Dispatch table used to marshal API calls from the client program to a separate server thread. NULL if API calls are not being marshalled to another thread.\n- *`CurrentClientDispatch`*: Dispatch table currently in use for fielding API calls from the client program. If API calls are being marshalled to another thread, this refers to *`MarshalExec`*. Otherwise it refers to *`CurrentServerDispatch`*.\n- *`CurrentServerDispatch`*: Dispatch table currently in use for performing API calls. It refers to *`Save`* or *`Exec`*.\n\n\n## Modules\n\n- draw module\n- CSO module\n- translate module\n- VBO module\n- TNL module(Transform & Light)\n\n## draw_xxx_stage\n\n- **`extern struct draw_stage *draw_unfilled_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_twoside_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_offset_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_clip_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_flatshade_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_cull_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_stipple_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_wide_line_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_wide_point_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_validate_stage( struct draw_context *context );`**\n\n## Auxiliary\n\n- cso_cache\n    The CSO cache is used to accelerate preparation of state by saving driver-specific state structure for later use.\n\n- draw\n    Draw is a software TCL pipeline for hardware that lacks vertex shaders or other essential parts of pre-rasterization vertex preparation.\n\n- driver_ddebug\n- driver_noop\n- driver_rbug\n- driver_trace\n- gallivm\n- hud\n- indices\n    Indices provides tools for translating or generating element indices for use with element-based rendering.\n\n- nir\n- os\n    * memory allocation\n    * simple message logging\n    * obtaining run-time configuration option\n    * threading primitives\n    The OS module contains the abstraction for basic operating system services above. This is the bare minimum required to port Gallium to a new platform. It already provides the implementations of these abstractions for the most common platforms. When targeting an embedded platform no implementation will be provided - these must be provided separately.\n\n- pipe-loader\n- pipebuffer\n- postprocess\n- rbug\n- renderonly\n- rtasm\n- target-helpers\n- tgsi\n- translate\n- util\n- vl\n\n## Q&A\n#### When xlib creates pipe screen, *only* software rasterizers or pipes'screen are created. And llvmpipe, softpipe, virgl, swr, unexceptionally, are software rasterizers or virtual GPU. [Zink](https://www.collabora.com/news-and-blog/blog/2018/10/31/introducing-zink-opengl-implementation-vulkan/) is, in brief, a translator from OpenGL to Vulkan and implemented as Gallium driver. So why only software pipes?\n\nThe answer is **`sw_winsys`**. All of target helpers's parameter is a `sw_winsys`. Check mesa source directory: [mesa/src/gallium/winsys](https://gitlab.freedesktop.org/mesa/mesa/tree/master/src/gallium/winsys)\n\n```\namdgpu\netnaviv\nfreedreno\ni915\niris\nkmsro\nlima\nnouveau\npanfrost\nradeon\nsvga\nsw\ntegra\nv3d\nvc4\nvirgl\n```\n\nTo put it simply, specific driver corresponds to specific winsys. The `sw` is for software rasterizers. If you expect to create pipe screen for some driver else, you need to add another target helper with its winsys as parameter like: \n\n```\nstatic inline struct pipe_screen *\ni915_screen_create_named(struct i915_drm_winsys *winsys, const char *driver)\n```\n\nThat means you have to declare a bunch of new interfaces from the top. So you'd better wrap the function to create specific driver's winsys so that it can take a sw_winsys as its parameter like:\n\n\n```\n#if defined(GALLIUM_VIRGL)\n   if (screen == NULL && strcmp(driver, \"virpipe\") == 0) {\n      struct virgl_winsys *vws;\n      vws = virgl_vtest_winsys_wrap(winsys);\n      screen = virgl_create_screen(vws, NULL);\n   }\n#endif\n\n```\n\n\n#### libGL.so is not built until glx option is enabled in **meson_options.txt**.\n\nOnly with essential build-time dependencies for X11 installed and glx option configured is libGL.so built.\n\n#### What role do DRM, DRI and Gallium play in Mesa? \n\n``` meson\n_libdrm_checks = [\n  ['intel', with_dri_i915 or with_gallium_i915],\n  ['amdgpu', with_amd_vk or with_gallium_radeonsi],\n  ['radeon', (with_gallium_radeonsi or with_dri_r100 or with_dri_r200 or\n              with_gallium_r300 or with_gallium_r600)],\n  ['nouveau', (with_gallium_nouveau or with_dri_nouveau)],\n]\n```\n\nDRI and Gallium seem to be respectively different underlying implementation in Mesa. Moreover in term of swrast and i915, you have to choose either of both as you can read the following code snippet in meson.build. In fact DRI is more complicated and staler but Gallium is more smaller and simpler.\n\n``` meson\nif with_dri_swrast and (with_gallium_softpipe or with_gallium_swr)\n  error('Only one swrast provider can be built')\nendif\nif with_dri_i915 and with_gallium_i915\n  error('Only one i915 provider can be built')\nendif\n```\n\n#### What problems are encountered when you build mesa on the WSL?\n\n- dri based GLX requires shared-glapi\n- Gallium-xlib based GLX requires softpipe or llvmpipe\n    * means that `gallium-xlib` is supposed to only support software rasterizers(llvmpipe, softpipe) and virtual GPU(virgl, swr).\n```\noption(\n  'glx',\n  type : 'combo',\n  value : 'xlib',\n  choices : ['auto', 'disabled', 'dri', 'xlib', 'gallium-xlib'],\n  description : 'Build support for GLX platform'\n)\n```\nIn Mesa, glx is implemented in three ways:\n\n| *-based | backend | window system |\n|-|-|-|\n| dri-based | non-sw-pipes | *_drm_winsys |\n| xlib | tnl | sw_winsys |\n| gallium-based | softpipe/llvmpipe | sw_winsys |\n\n\n- OSMesa gallium requires gallium softpipe or llvmpipe\n    * means if `osmesa` is configured as `gallium`, `gallium-drivers` must include `swrast` but the `classic` osmesa uses the fixed-functioned TNL by default.\n```\noption(\n  'osmesa',\n  type : 'combo',\n  value : 'gallium',\n  choices : ['none', 'classic', 'gallium'],\n  description : 'Build OSmesa.'\n)\n```\n- Cannot build GLX support without X11 platform support and at least one OpenGL API\n    * GLX, As the name suggests, is dedicated to X11 winsys.\n\n#### When `__glXInitialize` creates the `Display`, **only** `driswCreateDisplay` returns successfully. Both of `dri2CreateDisplay` and `driCreateDisplay` failed.\n\n- env: WSL on Windows 10 and with vcXsrv installed on the host as X server\n\nThe cause of failure is that vcXsrv has no extensions with DRI or DRI2. This lack of X server extension fails `DRI2QueryExtension` and `XF86DRIQueryExtension` so that the loading of gallium driver is not invoked.\n\n``` c\n/*\n * XextAddDisplay - add a display to this extension\n */\nXExtDisplayInfo *XextAddDisplay (\n    XExtensionInfo *extinfo,\n    Display *dpy,\n    _Xconst char *ext_name,\n    XExtensionHooks *hooks,\n    int nevents,\n    XPointer data)\n{\n    XExtDisplayInfo *dpyinfo;\n\n    dpyinfo = (XExtDisplayInfo *) Xmalloc (sizeof (XExtDisplayInfo));\n    if (!dpyinfo) return NULL;\n    dpyinfo->display = dpy;\n    dpyinfo->data = data;\n    dpyinfo->codes = XInitExtension (dpy, ext_name);\n\n    /*\n     * if the server has the extension, then we can initialize the\n     * appropriate function vectors\n     */\n    if (dpyinfo->codes) {\n\tint i, j;\n\n\tfor (i = 0, j = dpyinfo->codes->first_event; i < nevents; i++, j++) {\n\t    XESetWireToEvent (dpy, j, hooks->wire_to_event);\n\t    XESetEventToWire (dpy, j, hooks->event_to_wire);\n\t}\n\n        /* register extension for XGE */\n        if (strcmp(ext_name, GE_NAME))\n            xgeExtRegister(dpy, dpyinfo->codes->major_opcode, hooks);\n\n\tif (hooks->create_gc)\n\t  XESetCreateGC (dpy, dpyinfo->codes->extension, hooks->create_gc);\n\tif (hooks->copy_gc)\n\t  XESetCopyGC (dpy, dpyinfo->codes->extension, hooks->copy_gc);\n\tif (hooks->flush_gc)\n\t  XESetFlushGC (dpy, dpyinfo->codes->extension, hooks->flush_gc);\n\tif (hooks->free_gc)\n\t  XESetFreeGC (dpy, dpyinfo->codes->extension, hooks->free_gc);\n\tif (hooks->create_font)\n\t  XESetCreateFont (dpy, dpyinfo->codes->extension, hooks->create_font);\n\tif (hooks->free_font)\n\t  XESetFreeFont (dpy, dpyinfo->codes->extension, hooks->free_font);\n\tif (hooks->close_display)\n\t  XESetCloseDisplay (dpy, dpyinfo->codes->extension,\n\t\t\t     hooks->close_display);\n\tif (hooks->error)\n\t  XESetError (dpy, dpyinfo->codes->extension, hooks->error);\n\tif (hooks->error_string)\n\t  XESetErrorString (dpy, dpyinfo->codes->extension,\n\t\t\t    hooks->error_string);\n    } else if (hooks->close_display) {\n\t/* The server doesn't have this extension.\n\t * Use a private Xlib-internal extension to hang the close_display\n\t * hook on so that the \"cache\" (extinfo->cur) is properly cleaned.\n\t * (XBUG 7955)\n\t */\n\tXExtCodes *codes = XAddExtension(dpy);\n\tif (!codes) {\n\t    XFree(dpyinfo);\n\t    return NULL;\n\t}\n\tXESetCloseDisplay (dpy, codes->extension, hooks->close_display);\n    }\n\n    /*\n     * now, chain it onto the list\n     */\n    _XLockMutex(_Xglobal_lock);\n    dpyinfo->next = extinfo->head;\n    extinfo->head = dpyinfo;\n    extinfo->cur = dpyinfo;\n    extinfo->ndisplays++;\n    _XUnlockMutex(_Xglobal_lock);\n    return dpyinfo;\n}\n```\n\n","source":"_posts/mesa.md","raw":"---\ntitle: Notes for Mesa\ndate: 2020-2-4\ntags: [OpenGL]\n---\n[Mesa](https://mesa3d.org/) is an open source implementation for OpenGL. Check [repository](https://gitlab.freedesktop.org/mesa/mesa) for its source code. There are something worth to learn about this project for a graphic driver developer.\n\n## Build\nIt's good choice for exploring any project's source code to start with its build script. So here is the start.\n\n### Requisite\n* Run-time dependency\n    - libdrm_intel\n    - libdrm_amdgpu\n    - libdrm_radeon\n    - libdrm_nouveau\n    - libdrm\n    - LLVM\n    - libelf\n    - valgrind\n    - bison\n    - flex\n    - gettext\n\n* Build-time dependency\n    - libx11-xcb-dev\n    - libxcb-fixes0-dev\n    - libxext-dev\n    - libxdamage-dev (if glx option is dri)\n    - libxfixes-dev (if glx option is dri)\n    - libxcb-glx-dev (if glx option is dri)\n    - libxcb-dri2-dev (if glx option is dri)\n    - libxxf86vm-dev (if glx option is dri)\n\nThese dependencies include from build-time headers to run-time tools. Nevertheless most of them are optional but not necessary. You can customize them in **meson_options.txt** by modifying the **value** field of each option. With the listed above run and build time dependencies installed you can create a build directory and start to configure.\n\n``` bash\nmeson build\n```\n\nYou can configure a minimal dependencies mesa given that WSL is not a desktop platform as the following my configuration result:\n\n```\nMessage: Configuration summary:\n        \n        prefix:          /usr/local\n        libdir:          lib/x86_64-linux-gnu\n        includedir:      include\n        \n        OpenGL:          yes (ES1: no ES2: no)\n        \n        OSMesa:          libOSMesa\n        \n        GLX:             Xlib-based (Gallium)\n        \n        EGL:             no\n        GBM:             no\n        EGL/Vulkan/VL platforms:   x11\n        \n        Vulkan drivers:  no\n        \n        llvm:            yes\n        llvm-version:    9.0.0\n        \n        Gallium drivers: swrast\n        Gallium st:      mesa\n        HUD lmsensors:   no\n        \n        Shared-glapi:    yes\n\nBuild targets in project: 90\nWARNING: Project specifies a minimum meson_version '>= 0.46' but uses features which were added in newer versions:\n * 0.51.0: {'dep.get_variable'}\nFound ninja-1.9.0 at /usr/bin/ninja\n```\nAs you see this configuration supports quite a few components which are essential for off-screen rendering. Once dependencies check passed fully you can begin to compile and install:\n\n``` bash\nninja -C build && sudo ninja -C build install\n```\n\nAfter compilation and installed as follow:\n\n``` bash\nls -l /usr/local/lib/x86_64-linux-gnu\ntotal 159360\nlrwxrwxrwx 1 root root        10 Feb  7 17:13 libGL.so -> libGL.so.1\nlrwxrwxrwx 1 root root        14 Feb  7 17:13 libGL.so.1 -> libGL.so.1.5.0\n-rwxr-xr-x 1 root root 111044912 Feb  7 17:13 libGL.so.1.5.0\nlrwxrwxrwx 1 root root        14 Feb  7 17:13 libOSMesa.so -> libOSMesa.so.8\nlrwxrwxrwx 1 root root        18 Feb  7 17:13 libOSMesa.so.8 -> libOSMesa.so.8.0.0\n-rwxr-xr-x 1 root root  51541176 Feb  7 17:13 libOSMesa.so.8.0.0\nlrwxrwxrwx 1 root root        13 Feb  7 17:13 libglapi.so -> libglapi.so.0\nlrwxrwxrwx 1 root root        17 Feb  7 17:13 libglapi.so.0 -> libglapi.so.0.0.0\n-rwxr-xr-x 1 root root    337264 Feb  7 17:07 libglapi.so.0.0.0\ndrwxr-xr-x 1 root root       512 Feb  7 17:13 pkgconfig\n```\n\nNOTE:\n- Mesa is installed in `/usr/local/lib/$(uname -p)-linux-gnu` by default. So you have to `ldconfig` so that your linker can find them.\n- libsoftpipe.a will be built but not installed.\n- meson build system will enable compiler's `-g` flag by default unless you are building on the release branch.\n- if you have remodified the **meson_options.txt** and built once and now are about to reconfigure and rebuild, you need to run:\n\n``` bash\nmeson setup --wipe build\n```\n\n## Off-screen Demos\nNow that mesa have been built and installed we can give a try to run an OGL application. Similarly without window system supportd on the WSL, [off-screen rendering](https://mesa3d.org/osmesa.html) is my choice. We can clone the mesa [demos](https://gitlab.freedesktop.org/mesa/demos) which includes a lot of demos besides off-screen demos. \n\n### Requisite\nWe need some more libraries besides libOSMesa and libGL before you can get these off-screen demos worked. They are:\n- [GLU](https://gitlab.freedesktop.org/mesa/glu)\n- libm\n\nTo build these demos:\n``` bash\ngcc osdemo.c -o osdemo -g -I/home/luc/github/demos/src/util -lGL -lGLU -lOSMesa -lm\n```\n\nThe executable osdemo saves the rendered pixels as the portable pixmap format. You need to covert it to image format e.g. jpg. You may do this with `pnmtojpeg output.ppm > output.jpg`.\n\n<div align=center>{% asset_img \"osdemo.jpg\" \"osdemo\" %}</div>\n\n## OSMesa Call Graphs\nMesa supports many features from software pipelines to hardware drivers. For example [Gallium](https://www.freedesktop.org/wiki/Software/gallium/), it features with several software or hardware implementations which include the two software pipelines, softpipe and [llvmpipe](https://www.mesa3d.org/llvmpipe.html). With the different pipes enabled will the calls walk in the different paths. \n\n### Three Different Build Configuration (reference to **meson_options.txt**)\n| Option | *platform* | *glx* | *dri-drivers* | *gallium-drivers* | *llvm* | *osmesa* |\n|-|-|-|-|-|-|-|\n| **llvmpipe** | x11 | gallium-xlib | | swrast | true  | gallium |\n| **softpipe** | x11 | gallium-xlib | | swrast | false | gallium |\n| **tnl**      | x11 | gallium-xlib | | swrast | true  | classic |\n\n### Three Different Call Paths\n#### Context\n<div align=center>{% asset_img OSMesaCreateContextExt.png \"context initialization\" %}</div>\n\nNOTE: As for softpipe and llvmpipe `gl_api` and `gl_context` are created respectively while both of them are created in one path for the classic osmesa.\n\n#### Draw\n<div align=center>{% asset_img PopMatrix.png \"draw command\" %}</div>\n\n## Gallium-Based GLX Demos\nIf you want to know the full graphic stack of an OpenGL demo, you can not get rid of the window system. That is why I will try some GLX demos. Evidently GLX demos must depend on X11. You can cope with this problem by installing [vcXsrv](https://sourceforge.net/projects/vcxsrv/) on the Windows 10 which hosts your WSL. \n\n<div align=center>{% asset_img glxgears.png \"glx demo\" %}</div>\n\nThis time I still choose the gallium-xlib with softpipe. The following call graph shows the path that GLX context is created.\n\n<div align=center>{% asset_img glXCreateContext.png \"glx context creation\" %}</div>\n\nAs we know, Mesa is quite modularized and flexible. How does it take the path that `softpipe_create_context` rather than other pipe contexts? The [st_manager](https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/include/state_tracker/st_api.h) is a key structure.\n\n`struct pipe_screen` has a callback function that will be set to `softpipe_create_context`. The following calls will create `struct pipe_screen` that will be set to the `st_manager`.\n\n<div align=center>{% asset_img glXChooseVisual.png \"pipe_screen creation\" %}</div>\n\nTo bind the intended gallium driver backend to Mesa there must be something done before `glXChooseVisual` is called. It's started by the library `init()` and prepare the global variables.\n\n[xm_public.h](https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/state_trackers/glx/xlib/xm_public.h)\n\n``` c\n/* This is the driver interface required by the glx/xlib state tracker. \n */\nstruct xm_driver {\n   struct pipe_screen *(*create_pipe_screen)( Display *display );\n   struct st_api *(*create_st_api)( void );\n};\n\nextern void\nxmesa_set_driver( const struct xm_driver *driver );\n```\n\n[xlib.c](https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/targets/libgl-xlib/xlib.c)\n\n``` c\n/* Helper function to build a subset of a driver stack consisting of\n * one of the software rasterizers (llvmpipe, softpipe) and the\n * xlib winsys.\n */\nstatic struct pipe_screen *\nswrast_xlib_create_screen( Display *display )\n{\n   struct sw_winsys *winsys;\n   struct pipe_screen *screen = NULL;\n\n   /* Create the underlying winsys, which performs presents to Xlib\n    * drawables:\n    */\n   winsys = xlib_create_sw_winsys( display );\n   if (winsys == NULL)\n      return NULL;\n\n   /* Create a software rasterizer on top of that winsys:\n    */\n   screen = sw_screen_create( winsys );\n   if (screen == NULL)\n      goto fail;\n\n   /* Inject any wrapping layers we want to here:\n    */\n   return debug_screen_wrap( screen );\n\nfail:\n   if (winsys)\n      winsys->destroy( winsys );\n\n   return NULL;\n}\n\nstatic struct xm_driver xlib_driver = \n{\n   .create_pipe_screen = swrast_xlib_create_screen,\n   .create_st_api = st_gl_api_create,\n};\n\n\n/* Build the rendering stack.\n *\n * NOTE: The obsolete symbols _init and _fini\n *\n * signature:\n * void _init(void);\n * void _fini(void);\n *\n * The linker recoginizes special symbols _init and _fini. If a dynamic library\n * exports a routine named _init, then that code is executed after the loading,\n * before dlopen() returns. If the dynamic library exports a routine named _fini,\n * then that routine is called just before the library is unloaded. In case you\n * need to avoid linking against the system startup files,this can be done by\n * giving gcc the \"-nostartfiles\" parameter on the command line.\n * Using these routines, or the gcc -nostartfiles of -nostdlib options, is not\n * recommended. Their use may result in undesired behavior, since the constructor/\n * destructor routines will not be executed(unless special measures are taken).\n * Instead, libraries should export routines using the __attribute__((constructor))\n * and __attribute__((destructor)) function attributes. Constructor routines are\n * executed before dlopen() returns, and destructor routines ared executed before\n * dlclose() returns.\n */\nstatic void _init( void ) __attribute__((constructor));\nstatic void _init( void )\n{\n   /* Initialize the xlib libgl code, pass in the winsys:\n    */\n   xmesa_set_driver( &xlib_driver );\n}\n```\n\nwhere define the `xlib_driver` and set by `_init()`.\n\n[sw_helper.h](https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/auxiliary/target-helpers/sw_helper.h)\n\n``` c\nstatic inline struct pipe_screen *\nsw_screen_create_named(struct sw_winsys *winsys, const char *driver)\n{\n   struct pipe_screen *screen = NULL;\n\n#if defined(GALLIUM_LLVMPIPE)\n   if (screen == NULL && strcmp(driver, \"llvmpipe\") == 0)\n      screen = llvmpipe_create_screen(winsys);\n#endif\n\n#if defined(GALLIUM_VIRGL)\n   if (screen == NULL && strcmp(driver, \"virpipe\") == 0) {\n      struct virgl_winsys *vws;\n      vws = virgl_vtest_winsys_wrap(winsys);\n      screen = virgl_create_screen(vws, NULL);\n   }\n#endif\n\n#if defined(GALLIUM_SOFTPIPE)\n   if (screen == NULL && strcmp(driver, \"softpipe\") == 0)\n      screen = softpipe_create_screen(winsys);\n#endif\n\n#if defined(GALLIUM_SWR)\n   if (screen == NULL && strcmp(driver, \"swr\") == 0)\n      screen = swr_create_screen(winsys);\n#endif\n\n#if defined(GALLIUM_ZINK)\n   if (screen == NULL && strcmp(driver, \"zink\") == 0)\n      screen = zink_create_screen(winsys);\n#endif\n\n   return screen;\n}\n\n\nstruct pipe_screen *\nsw_screen_create(struct sw_winsys *winsys)\n{\n   const char *default_driver;\n   const char *driver;\n\n#if defined(GALLIUM_LLVMPIPE)\n   default_driver = \"llvmpipe\";\n#elif defined(GALLIUM_SOFTPIPE)\n   default_driver = \"softpipe\";\n#elif defined(GALLIUM_SWR)\n   default_driver = \"swr\";\n#elif defined(GALLIUM_ZINK)\n   default_driver = \"zink\";\n#else\n   default_driver = \"\";\n#endif\n\n   driver = debug_get_option(\"GALLIUM_DRIVER\", default_driver);\n   return sw_screen_create_named(winsys, driver);\n}\n```\n\n[xm_api.c](https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/state_trackers/glx/xlib/xm_api.c)\n\n``` c\n/* Driver interface routines, set up by xlib backend on library\n * _init().  These are global in the same way that function names are\n * global.\n */\nstatic struct xm_driver driver;\nstatic struct st_api *stapi;\n\nvoid xmesa_set_driver( const struct xm_driver *templ )\n{\n   driver = *templ;\n   stapi = driver.create_st_api();\n\n   xmesa_strict_invalidate =\n      debug_get_bool_option(\"XMESA_STRICT_INVALIDATE\", FALSE);\n}\n\nstatic XMesaDisplay\nxmesa_init_display( Display *display )\n{\n   static mtx_t init_mutex = _MTX_INITIALIZER_NP;\n   XMesaDisplay xmdpy;\n   XMesaExtDisplayInfo *info;\n\n   if (display == NULL) {\n      return NULL;\n   }\n\n   mtx_lock(&init_mutex);\n\n   /* Look for XMesaDisplay which corresponds to this display */\n   info = MesaExtInfo.head;\n   while(info) {\n      if (info->display == display) {\n         /* Found it */\n         mtx_unlock(&init_mutex);\n         return  &info->mesaDisplay;\n      }\n      info = info->next;\n   }\n\n   /* Not found.  Create new XMesaDisplay */\n   /* first allocate X-related resources and hook destroy callback */\n\n   /* allocate mesa display info */\n   info = (XMesaExtDisplayInfo *) Xmalloc(sizeof(XMesaExtDisplayInfo));\n   if (info == NULL) {\n      mtx_unlock(&init_mutex);\n      return NULL;\n   }\n   info->display = display;\n\n   xmdpy = &info->mesaDisplay; /* to be filled out below */\n   xmdpy->display = display;\n   xmdpy->pipe = NULL;\n\n   xmdpy->smapi = CALLOC_STRUCT(st_manager);\n   if (!xmdpy->smapi) {\n      Xfree(info);\n      mtx_unlock(&init_mutex);\n      return NULL;\n   }\n\n   xmdpy->screen = driver.create_pipe_screen(display);\n   if (!xmdpy->screen) {\n      free(xmdpy->smapi);\n      Xfree(info);\n      mtx_unlock(&init_mutex);\n      return NULL;\n   }\n\n   /* At this point, both smapi and screen are known to be valid */\n   xmdpy->smapi->screen = xmdpy->screen;\n   xmdpy->smapi->get_param = xmesa_get_param;\n   (void) mtx_init(&xmdpy->mutex, mtx_plain);\n\n   /* chain to the list of displays */\n   _XLockMutex(_Xglobal_lock);\n   info->next = MesaExtInfo.head;\n   MesaExtInfo.head = info;\n   MesaExtInfo.ndisplays++;\n   _XUnlockMutex(_Xglobal_lock);\n\n   mtx_unlock(&init_mutex);\n\n   return xmdpy;\n}\n```\n\nwhere `driver.create_pipe_screen(display)` is instantiated as `xlib_driver.swrast_xlib_create_screen`. As we see, the dynamic library routine `_init()` will set `xlib_driver.create_pipe_screen` to `swrast_xlib_create_screen` that return a `pipe_screen` to be set to the `st_manager->screen`. Eventually those two helper functions decide which gallium driver backend will be used by compilation macros.\n\n## Gallium Genbu\nTo verify the analysis above we will try to add a customized gallium driver named **genbu** as a clone from the existing softpipe based GLX. All that we will do is three parts work below.\n\n- key data structures: genbu_screen, genbu_context, the related callbacks and definitions \n- helper functions for loading software rasterizers for GLX\n- build scripts\n\n### [Added or Modified Sources and Build Scripts](https://gitlab.freedesktop.org/lucmaa/mesa/tree/gallium-gb-1.0)\n\n### Trace\n\n| *belong* | *hook* | *callback* | *caller* | *X/GL API* |\n|-|-|-|-|-|\n| pipe_screen | resource_create | softpipe_resource_create | bufferobj_data | |\n| pipe_context | transfer_map | softpipe_transfer_map | | |\n| pipe_context | create_surface | softpipe_create_surface | st_framebuffer_validate | |\n| pipe_context | flush | softpipe_flush_wrapped | st_context_flush | glXSwapBuffers |\n| pipe_context | clear | softpipe_clear | st_Clear | glClear |\n| pipe_context | draw_vbo | softpipe_draw_vbo | st_draw_vbo | glCallList |\n| pipe_context | draw_vbo | softpipe_draw_vbo | st_draw_vbo | glCallList |\n\n\n## DRI-Based GLX Demos\n\n### Loading\n\n- `__glXInitialize`\n- `driOpenDriver`\n\n``` c\n#if defined(GLX_DIRECT_RENDERING) && !defined(GLX_USE_APPLEGL)\n   glx_direct = !env_var_as_boolean(\"LIBGL_ALWAYS_INDIRECT\", false);\n   glx_accel = !env_var_as_boolean(\"LIBGL_ALWAYS_SOFTWARE\", false);\n\n   dpyPriv->drawHash = __glxHashCreate();\n\n   /*\n    ** Initialize the direct rendering per display data and functions.\n    ** Note: This _must_ be done before calling any other DRI routines\n    ** (e.g., those called in AllocAndFetchScreenConfigs).\n    */\n#if defined(GLX_USE_DRM)\n   if (glx_direct && glx_accel) {\n#if defined(HAVE_DRI3)\n      if (!env_var_as_boolean(\"LIBGL_DRI3_DISABLE\", false))\n         dpyPriv->dri3Display = dri3_create_display(dpy);\n#endif /* HAVE_DRI3 */\n      dpyPriv->dri2Display = dri2CreateDisplay(dpy);\n      dpyPriv->driDisplay = driCreateDisplay(dpy);\n   }\n#endif /* GLX_USE_DRM */\n   if (glx_direct)\n      dpyPriv->driswDisplay = driswCreateDisplay(dpy);\n#endif /* GLX_DIRECT_RENDERING && !GLX_USE_APPLEGL */\n\n#ifdef GLX_USE_APPLEGL\n   if (!applegl_create_display(dpyPriv)) {\n      free(dpyPriv);\n      return NULL;\n   }\n#endif\n\n#ifdef GLX_USE_WINDOWSGL\n   if (glx_direct && glx_accel)\n      dpyPriv->windowsdriDisplay = driwindowsCreateDisplay(dpy);\n#endif\n\n   if (!AllocAndFetchScreenConfigs(dpy, dpyPriv)) {\n      free(dpyPriv);\n      return NULL;\n   }\n```\n\nThis process of loading drivers works similarly with that of gallium-based glx. Compilation macros and environment variables make a difference. There are several approaches to load the specific drivers:\n\n- `dri3_create_display`\n- `dri2CreateDisplay`\n- `driCreateDisplay`\n- `driswCreateDisplay`\n- `applegl_create_display`\n- `driwindowsCreateDisplay`\n\nLet's look into `driCreateDisplay`. Once it manages to attach to `driCreateScreen` which searches and matches the appropriate gallium driver the function `driOpenDriver` will open the **found** driver by its name like \"i965\", \"radeon\", \"nouveau\", etc. These drivers are supposed to be installed at **`LIBGL_DRIVERS_PATH`** or `LIBGL_DRIVERS_DIR`(deprecated) and named as `*_dri.so` by default.\n\nLike Gallium-based GLX's `_init` routine with GCC **`constructor`** attribute, DRI-based GLX also defines a routine `megadriver_stub_init` with `constructor` attribute which allows to load the specific driver in a way of **`__DRIextension`**.\n\n<div align=center>{% asset_img \"gdb.svg\" \"osdemo\" %}</div>\n\n\n``` c\n/**\n * This is a constructor function for the megadriver dynamic library.\n *\n * When the driver is dlopen'ed, this function will run. It will\n * search for the name of the foo_dri.so file that was opened using\n * the dladdr function.\n *\n * After finding foo's name, it will call __driDriverGetExtensions_foo\n * and use the return to update __driDriverExtensions to enable\n * compatibility with older DRI driver loaders.\n */\n__attribute__((constructor)) static void\nmegadriver_stub_init(void);\n```\n\n``` c\n/*\n * Allocate, initialize and return a __DRIdisplayPrivate object.\n * This is called from __glXInitialize() when we are given a new\n * display pointer.\n */\n_X_HIDDEN __GLXDRIdisplay *\ndriCreateDisplay(Display * dpy)\n{\n   struct dri_display *pdpyp;\n   int eventBase, errorBase;\n   int major, minor, patch;\n\n   if (!XF86DRIQueryExtension(dpy, &eventBase, &errorBase)) {\n      return NULL;\n   }\n\n   if (!XF86DRIQueryVersion(dpy, &major, &minor, &patch)) {\n      return NULL;\n   }\n\n   pdpyp = malloc(sizeof *pdpyp);\n   if (!pdpyp) {\n      return NULL;\n   }\n\n   pdpyp->driMajor = major;\n   pdpyp->driMinor = minor;\n   pdpyp->driPatch = patch;\n\n   pdpyp->base.destroyDisplay = driDestroyDisplay;\n   pdpyp->base.createScreen = driCreateScreen;\n\n   return &pdpyp->base;\n}\n```\n\n## Contexts\nThere are a variety of **contexts** in Mesa. They are designed as a framework of layers.\n\n```\n__________________\n|                |\n|   gl_contex    | --------------> standard & general\n|________________|\n\n__________________\n|                |\n|   st_contex    | --------------> adapter\n|________________|\n\n__________________\n|                |\n|  draw_contex   | --------------> driver-specific\n|________________|\n\n```\n\n### gl_context\n{% blockquote %}\nThis is the central context data structure for Mesa. Almost all OpenGL state is contained in this structure. Think of this as a base class from which device drivers will derive sub classes.\n{% endblockquote %}\nApart from OpenGL state it contains several other contexts\n\n- `swrast_context`\n- `swsetup_context`\n- `swtnl_context`\n- `vbo_context`\n- `st_context`\n\n### st_context\n\n### draw_context\n\n### vbo_context\nVBO is short for vertex buffer object. This context derives two kinds of vbo contexts, `vbo_exec_context` and `vbo_save_context` which `vbo_exec_context` is generic for core and compatible ogl and the other is specific for compatible ogl.\n\n#### vbo_exec_vtx_init\n\n- Allocate a `gl_buffer_object` which just is referenced.\n- Initialize vbo attributes including size, type and active size.\n\n#### vbo vs. vao\n\n``` c\nstruct gl_buffer_object\n{\n   GLint RefCount;\n   GLuint Name;\n   GLchar *Label;       \n   GLenum16 Usage;      \n   GLbitfield StorageFlags; \n   GLsizeiptrARB Size;  \n   GLubyte *Data;       \n   GLboolean DeletePending;   \n   GLboolean Written;   \n   GLboolean Purgeable; \n   GLboolean Immutable; \n   gl_buffer_usage UsageHistory; \n   GLuint NumSubDataCalls;\n   GLuint NumMapBufferWriteCalls;\n   struct gl_buffer_mapping Mappings[MAP_COUNT];\n   simple_mtx_t MinMaxCacheMutex;\n   struct hash_table *MinMaxCache;\n   unsigned MinMaxCacheHitIndices;\n   unsigned MinMaxCacheMissIndices;\n   bool MinMaxCacheDirty;\n   bool HandleAllocated; \n};\n\n\nstruct gl_vertex_array_object\n{\n   GLuint Name;\n   GLint RefCount;\n   GLchar *Label;       \n   GLboolean EverBound;\n   bool SharedAndImmutable;\n   struct gl_array_attributes VertexAttrib[VERT_ATTRIB_MAX];\n   struct gl_vertex_buffer_binding BufferBinding[VERT_ATTRIB_MAX];\n   GLbitfield VertexAttribBufferMask;\n   GLbitfield Enabled;\n   GLbitfield _EffEnabledVBO;\n   gl_attribute_map_mode _AttributeMapMode;\n   GLbitfield NewArrays;\n   struct gl_buffer_object *IndexBufferObj;\n};\n```\n\n## Dispatchers\n\n- *`Exec`*: The current dispatch table for non-displaylist-saving execution, either BeginEnd or OutsideBeginEnd\n- *`OutsideBeginEnd`*: The normal dispatch table for non-displaylist-saving, non-begin/end\n- *`Save`*: The dispatch table used between glNewList() and glEndList()\n- *`BeginEnd`*: The dispatch table used between glBegin() and glEnd() (outside of a display list). Only valid functions between those two are set, which is mostly just the set in a GLvertexformat struct.\n- *`ContextLost`*: Dispatch table for when a graphics reset has happened.\n- *`MarshalExec`*: Dispatch table used to marshal API calls from the client program to a separate server thread. NULL if API calls are not being marshalled to another thread.\n- *`CurrentClientDispatch`*: Dispatch table currently in use for fielding API calls from the client program. If API calls are being marshalled to another thread, this refers to *`MarshalExec`*. Otherwise it refers to *`CurrentServerDispatch`*.\n- *`CurrentServerDispatch`*: Dispatch table currently in use for performing API calls. It refers to *`Save`* or *`Exec`*.\n\n\n## Modules\n\n- draw module\n- CSO module\n- translate module\n- VBO module\n- TNL module(Transform & Light)\n\n## draw_xxx_stage\n\n- **`extern struct draw_stage *draw_unfilled_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_twoside_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_offset_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_clip_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_flatshade_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_cull_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_stipple_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_wide_line_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_wide_point_stage( struct draw_context *context );`**\n- **`extern struct draw_stage *draw_validate_stage( struct draw_context *context );`**\n\n## Auxiliary\n\n- cso_cache\n    The CSO cache is used to accelerate preparation of state by saving driver-specific state structure for later use.\n\n- draw\n    Draw is a software TCL pipeline for hardware that lacks vertex shaders or other essential parts of pre-rasterization vertex preparation.\n\n- driver_ddebug\n- driver_noop\n- driver_rbug\n- driver_trace\n- gallivm\n- hud\n- indices\n    Indices provides tools for translating or generating element indices for use with element-based rendering.\n\n- nir\n- os\n    * memory allocation\n    * simple message logging\n    * obtaining run-time configuration option\n    * threading primitives\n    The OS module contains the abstraction for basic operating system services above. This is the bare minimum required to port Gallium to a new platform. It already provides the implementations of these abstractions for the most common platforms. When targeting an embedded platform no implementation will be provided - these must be provided separately.\n\n- pipe-loader\n- pipebuffer\n- postprocess\n- rbug\n- renderonly\n- rtasm\n- target-helpers\n- tgsi\n- translate\n- util\n- vl\n\n## Q&A\n#### When xlib creates pipe screen, *only* software rasterizers or pipes'screen are created. And llvmpipe, softpipe, virgl, swr, unexceptionally, are software rasterizers or virtual GPU. [Zink](https://www.collabora.com/news-and-blog/blog/2018/10/31/introducing-zink-opengl-implementation-vulkan/) is, in brief, a translator from OpenGL to Vulkan and implemented as Gallium driver. So why only software pipes?\n\nThe answer is **`sw_winsys`**. All of target helpers's parameter is a `sw_winsys`. Check mesa source directory: [mesa/src/gallium/winsys](https://gitlab.freedesktop.org/mesa/mesa/tree/master/src/gallium/winsys)\n\n```\namdgpu\netnaviv\nfreedreno\ni915\niris\nkmsro\nlima\nnouveau\npanfrost\nradeon\nsvga\nsw\ntegra\nv3d\nvc4\nvirgl\n```\n\nTo put it simply, specific driver corresponds to specific winsys. The `sw` is for software rasterizers. If you expect to create pipe screen for some driver else, you need to add another target helper with its winsys as parameter like: \n\n```\nstatic inline struct pipe_screen *\ni915_screen_create_named(struct i915_drm_winsys *winsys, const char *driver)\n```\n\nThat means you have to declare a bunch of new interfaces from the top. So you'd better wrap the function to create specific driver's winsys so that it can take a sw_winsys as its parameter like:\n\n\n```\n#if defined(GALLIUM_VIRGL)\n   if (screen == NULL && strcmp(driver, \"virpipe\") == 0) {\n      struct virgl_winsys *vws;\n      vws = virgl_vtest_winsys_wrap(winsys);\n      screen = virgl_create_screen(vws, NULL);\n   }\n#endif\n\n```\n\n\n#### libGL.so is not built until glx option is enabled in **meson_options.txt**.\n\nOnly with essential build-time dependencies for X11 installed and glx option configured is libGL.so built.\n\n#### What role do DRM, DRI and Gallium play in Mesa? \n\n``` meson\n_libdrm_checks = [\n  ['intel', with_dri_i915 or with_gallium_i915],\n  ['amdgpu', with_amd_vk or with_gallium_radeonsi],\n  ['radeon', (with_gallium_radeonsi or with_dri_r100 or with_dri_r200 or\n              with_gallium_r300 or with_gallium_r600)],\n  ['nouveau', (with_gallium_nouveau or with_dri_nouveau)],\n]\n```\n\nDRI and Gallium seem to be respectively different underlying implementation in Mesa. Moreover in term of swrast and i915, you have to choose either of both as you can read the following code snippet in meson.build. In fact DRI is more complicated and staler but Gallium is more smaller and simpler.\n\n``` meson\nif with_dri_swrast and (with_gallium_softpipe or with_gallium_swr)\n  error('Only one swrast provider can be built')\nendif\nif with_dri_i915 and with_gallium_i915\n  error('Only one i915 provider can be built')\nendif\n```\n\n#### What problems are encountered when you build mesa on the WSL?\n\n- dri based GLX requires shared-glapi\n- Gallium-xlib based GLX requires softpipe or llvmpipe\n    * means that `gallium-xlib` is supposed to only support software rasterizers(llvmpipe, softpipe) and virtual GPU(virgl, swr).\n```\noption(\n  'glx',\n  type : 'combo',\n  value : 'xlib',\n  choices : ['auto', 'disabled', 'dri', 'xlib', 'gallium-xlib'],\n  description : 'Build support for GLX platform'\n)\n```\nIn Mesa, glx is implemented in three ways:\n\n| *-based | backend | window system |\n|-|-|-|\n| dri-based | non-sw-pipes | *_drm_winsys |\n| xlib | tnl | sw_winsys |\n| gallium-based | softpipe/llvmpipe | sw_winsys |\n\n\n- OSMesa gallium requires gallium softpipe or llvmpipe\n    * means if `osmesa` is configured as `gallium`, `gallium-drivers` must include `swrast` but the `classic` osmesa uses the fixed-functioned TNL by default.\n```\noption(\n  'osmesa',\n  type : 'combo',\n  value : 'gallium',\n  choices : ['none', 'classic', 'gallium'],\n  description : 'Build OSmesa.'\n)\n```\n- Cannot build GLX support without X11 platform support and at least one OpenGL API\n    * GLX, As the name suggests, is dedicated to X11 winsys.\n\n#### When `__glXInitialize` creates the `Display`, **only** `driswCreateDisplay` returns successfully. Both of `dri2CreateDisplay` and `driCreateDisplay` failed.\n\n- env: WSL on Windows 10 and with vcXsrv installed on the host as X server\n\nThe cause of failure is that vcXsrv has no extensions with DRI or DRI2. This lack of X server extension fails `DRI2QueryExtension` and `XF86DRIQueryExtension` so that the loading of gallium driver is not invoked.\n\n``` c\n/*\n * XextAddDisplay - add a display to this extension\n */\nXExtDisplayInfo *XextAddDisplay (\n    XExtensionInfo *extinfo,\n    Display *dpy,\n    _Xconst char *ext_name,\n    XExtensionHooks *hooks,\n    int nevents,\n    XPointer data)\n{\n    XExtDisplayInfo *dpyinfo;\n\n    dpyinfo = (XExtDisplayInfo *) Xmalloc (sizeof (XExtDisplayInfo));\n    if (!dpyinfo) return NULL;\n    dpyinfo->display = dpy;\n    dpyinfo->data = data;\n    dpyinfo->codes = XInitExtension (dpy, ext_name);\n\n    /*\n     * if the server has the extension, then we can initialize the\n     * appropriate function vectors\n     */\n    if (dpyinfo->codes) {\n\tint i, j;\n\n\tfor (i = 0, j = dpyinfo->codes->first_event; i < nevents; i++, j++) {\n\t    XESetWireToEvent (dpy, j, hooks->wire_to_event);\n\t    XESetEventToWire (dpy, j, hooks->event_to_wire);\n\t}\n\n        /* register extension for XGE */\n        if (strcmp(ext_name, GE_NAME))\n            xgeExtRegister(dpy, dpyinfo->codes->major_opcode, hooks);\n\n\tif (hooks->create_gc)\n\t  XESetCreateGC (dpy, dpyinfo->codes->extension, hooks->create_gc);\n\tif (hooks->copy_gc)\n\t  XESetCopyGC (dpy, dpyinfo->codes->extension, hooks->copy_gc);\n\tif (hooks->flush_gc)\n\t  XESetFlushGC (dpy, dpyinfo->codes->extension, hooks->flush_gc);\n\tif (hooks->free_gc)\n\t  XESetFreeGC (dpy, dpyinfo->codes->extension, hooks->free_gc);\n\tif (hooks->create_font)\n\t  XESetCreateFont (dpy, dpyinfo->codes->extension, hooks->create_font);\n\tif (hooks->free_font)\n\t  XESetFreeFont (dpy, dpyinfo->codes->extension, hooks->free_font);\n\tif (hooks->close_display)\n\t  XESetCloseDisplay (dpy, dpyinfo->codes->extension,\n\t\t\t     hooks->close_display);\n\tif (hooks->error)\n\t  XESetError (dpy, dpyinfo->codes->extension, hooks->error);\n\tif (hooks->error_string)\n\t  XESetErrorString (dpy, dpyinfo->codes->extension,\n\t\t\t    hooks->error_string);\n    } else if (hooks->close_display) {\n\t/* The server doesn't have this extension.\n\t * Use a private Xlib-internal extension to hang the close_display\n\t * hook on so that the \"cache\" (extinfo->cur) is properly cleaned.\n\t * (XBUG 7955)\n\t */\n\tXExtCodes *codes = XAddExtension(dpy);\n\tif (!codes) {\n\t    XFree(dpyinfo);\n\t    return NULL;\n\t}\n\tXESetCloseDisplay (dpy, codes->extension, hooks->close_display);\n    }\n\n    /*\n     * now, chain it onto the list\n     */\n    _XLockMutex(_Xglobal_lock);\n    dpyinfo->next = extinfo->head;\n    extinfo->head = dpyinfo;\n    extinfo->cur = dpyinfo;\n    extinfo->ndisplays++;\n    _XUnlockMutex(_Xglobal_lock);\n    return dpyinfo;\n}\n```\n\n","slug":"mesa","published":1,"updated":"2020-03-02T12:58:28.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckair1g3j000kpvk7746z6obr","content":"<p><a href=\"https://mesa3d.org/\" target=\"_blank\" rel=\"noopener\">Mesa</a> is an open source implementation for OpenGL. Check <a href=\"https://gitlab.freedesktop.org/mesa/mesa\" target=\"_blank\" rel=\"noopener\">repository</a> for its source code. There are something worth to learn about this project for a graphic driver developer.</p>\n<h2 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build\"></a>Build</h2><p>It’s good choice for exploring any project’s source code to start with its build script. So here is the start.</p>\n<h3 id=\"Requisite\"><a href=\"#Requisite\" class=\"headerlink\" title=\"Requisite\"></a>Requisite</h3><ul>\n<li><p>Run-time dependency</p>\n<ul>\n<li>libdrm_intel</li>\n<li>libdrm_amdgpu</li>\n<li>libdrm_radeon</li>\n<li>libdrm_nouveau</li>\n<li>libdrm</li>\n<li>LLVM</li>\n<li>libelf</li>\n<li>valgrind</li>\n<li>bison</li>\n<li>flex</li>\n<li>gettext</li>\n</ul>\n</li>\n<li><p>Build-time dependency</p>\n<ul>\n<li>libx11-xcb-dev</li>\n<li>libxcb-fixes0-dev</li>\n<li>libxext-dev</li>\n<li>libxdamage-dev (if glx option is dri)</li>\n<li>libxfixes-dev (if glx option is dri)</li>\n<li>libxcb-glx-dev (if glx option is dri)</li>\n<li>libxcb-dri2-dev (if glx option is dri)</li>\n<li>libxxf86vm-dev (if glx option is dri)</li>\n</ul>\n</li>\n</ul>\n<p>These dependencies include from build-time headers to run-time tools. Nevertheless most of them are optional but not necessary. You can customize them in <strong>meson_options.txt</strong> by modifying the <strong>value</strong> field of each option. With the listed above run and build time dependencies installed you can create a build directory and start to configure.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meson build</span><br></pre></td></tr></table></figure>\n\n<p>You can configure a minimal dependencies mesa given that WSL is not a desktop platform as the following my configuration result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Message: Configuration summary:</span><br><span class=\"line\">        </span><br><span class=\"line\">        prefix:          /usr/local</span><br><span class=\"line\">        libdir:          lib/x86_64-linux-gnu</span><br><span class=\"line\">        includedir:      include</span><br><span class=\"line\">        </span><br><span class=\"line\">        OpenGL:          yes (ES1: no ES2: no)</span><br><span class=\"line\">        </span><br><span class=\"line\">        OSMesa:          libOSMesa</span><br><span class=\"line\">        </span><br><span class=\"line\">        GLX:             Xlib-based (Gallium)</span><br><span class=\"line\">        </span><br><span class=\"line\">        EGL:             no</span><br><span class=\"line\">        GBM:             no</span><br><span class=\"line\">        EGL/Vulkan/VL platforms:   x11</span><br><span class=\"line\">        </span><br><span class=\"line\">        Vulkan drivers:  no</span><br><span class=\"line\">        </span><br><span class=\"line\">        llvm:            yes</span><br><span class=\"line\">        llvm-version:    9.0.0</span><br><span class=\"line\">        </span><br><span class=\"line\">        Gallium drivers: swrast</span><br><span class=\"line\">        Gallium st:      mesa</span><br><span class=\"line\">        HUD lmsensors:   no</span><br><span class=\"line\">        </span><br><span class=\"line\">        Shared-glapi:    yes</span><br><span class=\"line\"></span><br><span class=\"line\">Build targets in project: 90</span><br><span class=\"line\">WARNING: Project specifies a minimum meson_version &apos;&gt;= 0.46&apos; but uses features which were added in newer versions:</span><br><span class=\"line\"> * 0.51.0: &#123;&apos;dep.get_variable&apos;&#125;</span><br><span class=\"line\">Found ninja-1.9.0 at /usr/bin/ninja</span><br></pre></td></tr></table></figure>\n<p>As you see this configuration supports quite a few components which are essential for off-screen rendering. Once dependencies check passed fully you can begin to compile and install:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ninja -C build &amp;&amp; sudo ninja -C build install</span><br></pre></td></tr></table></figure>\n\n<p>After compilation and installed as follow:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /usr/<span class=\"built_in\">local</span>/lib/x86_64-linux-gnu</span><br><span class=\"line\">total 159360</span><br><span class=\"line\">lrwxrwxrwx 1 root root        10 Feb  7 17:13 libGL.so -&gt; libGL.so.1</span><br><span class=\"line\">lrwxrwxrwx 1 root root        14 Feb  7 17:13 libGL.so.1 -&gt; libGL.so.1.5.0</span><br><span class=\"line\">-rwxr-xr-x 1 root root 111044912 Feb  7 17:13 libGL.so.1.5.0</span><br><span class=\"line\">lrwxrwxrwx 1 root root        14 Feb  7 17:13 libOSMesa.so -&gt; libOSMesa.so.8</span><br><span class=\"line\">lrwxrwxrwx 1 root root        18 Feb  7 17:13 libOSMesa.so.8 -&gt; libOSMesa.so.8.0.0</span><br><span class=\"line\">-rwxr-xr-x 1 root root  51541176 Feb  7 17:13 libOSMesa.so.8.0.0</span><br><span class=\"line\">lrwxrwxrwx 1 root root        13 Feb  7 17:13 libglapi.so -&gt; libglapi.so.0</span><br><span class=\"line\">lrwxrwxrwx 1 root root        17 Feb  7 17:13 libglapi.so.0 -&gt; libglapi.so.0.0.0</span><br><span class=\"line\">-rwxr-xr-x 1 root root    337264 Feb  7 17:07 libglapi.so.0.0.0</span><br><span class=\"line\">drwxr-xr-x 1 root root       512 Feb  7 17:13 pkgconfig</span><br></pre></td></tr></table></figure>\n\n<p>NOTE:</p>\n<ul>\n<li>Mesa is installed in <code>/usr/local/lib/$(uname -p)-linux-gnu</code> by default. So you have to <code>ldconfig</code> so that your linker can find them.</li>\n<li>libsoftpipe.a will be built but not installed.</li>\n<li>meson build system will enable compiler’s <code>-g</code> flag by default unless you are building on the release branch.</li>\n<li>if you have remodified the <strong>meson_options.txt</strong> and built once and now are about to reconfigure and rebuild, you need to run:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meson setup --wipe build</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Off-screen-Demos\"><a href=\"#Off-screen-Demos\" class=\"headerlink\" title=\"Off-screen Demos\"></a>Off-screen Demos</h2><p>Now that mesa have been built and installed we can give a try to run an OGL application. Similarly without window system supportd on the WSL, <a href=\"https://mesa3d.org/osmesa.html\" target=\"_blank\" rel=\"noopener\">off-screen rendering</a> is my choice. We can clone the mesa <a href=\"https://gitlab.freedesktop.org/mesa/demos\" target=\"_blank\" rel=\"noopener\">demos</a> which includes a lot of demos besides off-screen demos. </p>\n<h3 id=\"Requisite-1\"><a href=\"#Requisite-1\" class=\"headerlink\" title=\"Requisite\"></a>Requisite</h3><p>We need some more libraries besides libOSMesa and libGL before you can get these off-screen demos worked. They are:</p>\n<ul>\n<li><a href=\"https://gitlab.freedesktop.org/mesa/glu\" target=\"_blank\" rel=\"noopener\">GLU</a></li>\n<li>libm</li>\n</ul>\n<p>To build these demos:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc osdemo.c -o osdemo -g -I/home/luc/github/demos/src/util -lGL -lGLU -lOSMesa -lm</span><br></pre></td></tr></table></figure>\n\n<p>The executable osdemo saves the rendered pixels as the portable pixmap format. You need to covert it to image format e.g. jpg. You may do this with <code>pnmtojpeg output.ppm &gt; output.jpg</code>.</p>\n<div align=center><img src=\"/mesa/osdemo.jpg\" class=\"\" title=\"osdemo\"></div>\n\n<h2 id=\"OSMesa-Call-Graphs\"><a href=\"#OSMesa-Call-Graphs\" class=\"headerlink\" title=\"OSMesa Call Graphs\"></a>OSMesa Call Graphs</h2><p>Mesa supports many features from software pipelines to hardware drivers. For example <a href=\"https://www.freedesktop.org/wiki/Software/gallium/\" target=\"_blank\" rel=\"noopener\">Gallium</a>, it features with several software or hardware implementations which include the two software pipelines, softpipe and <a href=\"https://www.mesa3d.org/llvmpipe.html\" target=\"_blank\" rel=\"noopener\">llvmpipe</a>. With the different pipes enabled will the calls walk in the different paths. </p>\n<h3 id=\"Three-Different-Build-Configuration-reference-to-meson-options-txt\"><a href=\"#Three-Different-Build-Configuration-reference-to-meson-options-txt\" class=\"headerlink\" title=\"Three Different Build Configuration (reference to meson_options.txt)\"></a>Three Different Build Configuration (reference to <strong>meson_options.txt</strong>)</h3><table>\n<thead>\n<tr>\n<th>Option</th>\n<th><em>platform</em></th>\n<th><em>glx</em></th>\n<th><em>dri-drivers</em></th>\n<th><em>gallium-drivers</em></th>\n<th><em>llvm</em></th>\n<th><em>osmesa</em></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>llvmpipe</strong></td>\n<td>x11</td>\n<td>gallium-xlib</td>\n<td></td>\n<td>swrast</td>\n<td>true</td>\n<td>gallium</td>\n</tr>\n<tr>\n<td><strong>softpipe</strong></td>\n<td>x11</td>\n<td>gallium-xlib</td>\n<td></td>\n<td>swrast</td>\n<td>false</td>\n<td>gallium</td>\n</tr>\n<tr>\n<td><strong>tnl</strong></td>\n<td>x11</td>\n<td>gallium-xlib</td>\n<td></td>\n<td>swrast</td>\n<td>true</td>\n<td>classic</td>\n</tr>\n</tbody></table>\n<h3 id=\"Three-Different-Call-Paths\"><a href=\"#Three-Different-Call-Paths\" class=\"headerlink\" title=\"Three Different Call Paths\"></a>Three Different Call Paths</h3><h4 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h4><div align=center><img src=\"/mesa/OSMesaCreateContextExt.png\" class=\"\" title=\"context initialization\"></div>\n\n<p>NOTE: As for softpipe and llvmpipe <code>gl_api</code> and <code>gl_context</code> are created respectively while both of them are created in one path for the classic osmesa.</p>\n<h4 id=\"Draw\"><a href=\"#Draw\" class=\"headerlink\" title=\"Draw\"></a>Draw</h4><div align=center><img src=\"/mesa/PopMatrix.png\" class=\"\" title=\"draw command\"></div>\n\n<h2 id=\"Gallium-Based-GLX-Demos\"><a href=\"#Gallium-Based-GLX-Demos\" class=\"headerlink\" title=\"Gallium-Based GLX Demos\"></a>Gallium-Based GLX Demos</h2><p>If you want to know the full graphic stack of an OpenGL demo, you can not get rid of the window system. That is why I will try some GLX demos. Evidently GLX demos must depend on X11. You can cope with this problem by installing <a href=\"https://sourceforge.net/projects/vcxsrv/\" target=\"_blank\" rel=\"noopener\">vcXsrv</a> on the Windows 10 which hosts your WSL. </p>\n<div align=center><img src=\"/mesa/glxgears.png\" class=\"\" title=\"glx demo\"></div>\n\n<p>This time I still choose the gallium-xlib with softpipe. The following call graph shows the path that GLX context is created.</p>\n<div align=center><img src=\"/mesa/glXCreateContext.png\" class=\"\" title=\"glx context creation\"></div>\n\n<p>As we know, Mesa is quite modularized and flexible. How does it take the path that <code>softpipe_create_context</code> rather than other pipe contexts? The <a href=\"https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/include/state_tracker/st_api.h\" target=\"_blank\" rel=\"noopener\">st_manager</a> is a key structure.</p>\n<p><code>struct pipe_screen</code> has a callback function that will be set to <code>softpipe_create_context</code>. The following calls will create <code>struct pipe_screen</code> that will be set to the <code>st_manager</code>.</p>\n<div align=center><img src=\"/mesa/glXChooseVisual.png\" class=\"\" title=\"pipe_screen creation\"></div>\n\n<p>To bind the intended gallium driver backend to Mesa there must be something done before <code>glXChooseVisual</code> is called. It’s started by the library <code>init()</code> and prepare the global variables.</p>\n<p><a href=\"https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/state_trackers/glx/xlib/xm_public.h\" target=\"_blank\" rel=\"noopener\">xm_public.h</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* This is the driver interface required by the glx/xlib state tracker. </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xm_driver</span> &#123;</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_screen</span> *(*<span class=\"title\">create_pipe_screen</span>)( <span class=\"title\">Display</span> *<span class=\"title\">display</span> );</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">st_api</span> *(*<span class=\"title\">create_st_api</span>)( <span class=\"title\">void</span> );</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">xmesa_set_driver( <span class=\"keyword\">const</span> struct xm_driver *driver );</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/targets/libgl-xlib/xlib.c\" target=\"_blank\" rel=\"noopener\">xlib.c</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Helper function to build a subset of a driver stack consisting of</span></span><br><span class=\"line\"><span class=\"comment\"> * one of the software rasterizers (llvmpipe, softpipe) and the</span></span><br><span class=\"line\"><span class=\"comment\"> * xlib winsys.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_screen</span> *</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">swrast_xlib_create_screen</span>( <span class=\"title\">Display</span> *<span class=\"title\">display</span> )</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sw_winsys</span> *<span class=\"title\">winsys</span>;</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_screen</span> *<span class=\"title\">screen</span> = <span class=\"title\">NULL</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Create the underlying winsys, which performs presents to Xlib</span></span><br><span class=\"line\"><span class=\"comment\">    * drawables:</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   winsys = xlib_create_sw_winsys( display );</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (winsys == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Create a software rasterizer on top of that winsys:</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   screen = sw_screen_create( winsys );</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (screen == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> fail;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Inject any wrapping layers we want to here:</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> debug_screen_wrap( screen );</span><br><span class=\"line\"></span><br><span class=\"line\">fail:</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (winsys)</span><br><span class=\"line\">      winsys-&gt;destroy( winsys );</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xm_driver</span> <span class=\"title\">xlib_driver</span> = </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   .create_pipe_screen = swrast_xlib_create_screen,</span><br><span class=\"line\">   .create_st_api = st_gl_api_create,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Build the rendering stack.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">NOTE:</span> The obsolete symbols _init and _fini</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * signature:</span></span><br><span class=\"line\"><span class=\"comment\"> * void _init(void);</span></span><br><span class=\"line\"><span class=\"comment\"> * void _fini(void);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The linker recoginizes special symbols _init and _fini. If a dynamic library</span></span><br><span class=\"line\"><span class=\"comment\"> * exports a routine named _init, then that code is executed after the loading,</span></span><br><span class=\"line\"><span class=\"comment\"> * before dlopen() returns. If the dynamic library exports a routine named _fini,</span></span><br><span class=\"line\"><span class=\"comment\"> * then that routine is called just before the library is unloaded. In case you</span></span><br><span class=\"line\"><span class=\"comment\"> * need to avoid linking against the system startup files,this can be done by</span></span><br><span class=\"line\"><span class=\"comment\"> * giving gcc the \"-nostartfiles\" parameter on the command line.</span></span><br><span class=\"line\"><span class=\"comment\"> * Using these routines, or the gcc -nostartfiles of -nostdlib options, is not</span></span><br><span class=\"line\"><span class=\"comment\"> * recommended. Their use may result in undesired behavior, since the constructor/</span></span><br><span class=\"line\"><span class=\"comment\"> * destructor routines will not be executed(unless special measures are taken).</span></span><br><span class=\"line\"><span class=\"comment\"> * Instead, libraries should export routines using the __attribute__((constructor))</span></span><br><span class=\"line\"><span class=\"comment\"> * and __attribute__((destructor)) function attributes. Constructor routines are</span></span><br><span class=\"line\"><span class=\"comment\"> * executed before dlopen() returns, and destructor routines ared executed before</span></span><br><span class=\"line\"><span class=\"comment\"> * dlclose() returns.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> _init( <span class=\"keyword\">void</span> ) __attribute__((constructor));</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> _init( <span class=\"keyword\">void</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">/* Initialize the xlib libgl code, pass in the winsys:</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   xmesa_set_driver( &amp;xlib_driver );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>where define the <code>xlib_driver</code> and set by <code>_init()</code>.</p>\n<p><a href=\"https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/auxiliary/target-helpers/sw_helper.h\" target=\"_blank\" rel=\"noopener\">sw_helper.h</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_screen</span> *</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">sw_screen_create_named</span>(<span class=\"title\">struct</span> <span class=\"title\">sw_winsys</span> *<span class=\"title\">winsys</span>, <span class=\"title\">const</span> <span class=\"title\">char</span> *<span class=\"title\">driver</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_screen</span> *<span class=\"title\">screen</span> = <span class=\"title\">NULL</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GALLIUM_LLVMPIPE)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (screen == <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(driver, <span class=\"string\">\"llvmpipe\"</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">      screen = llvmpipe_create_screen(winsys);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GALLIUM_VIRGL)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (screen == <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(driver, <span class=\"string\">\"virpipe\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">virgl_winsys</span> *<span class=\"title\">vws</span>;</span></span><br><span class=\"line\">      vws = virgl_vtest_winsys_wrap(winsys);</span><br><span class=\"line\">      screen = virgl_create_screen(vws, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GALLIUM_SOFTPIPE)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (screen == <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(driver, <span class=\"string\">\"softpipe\"</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">      screen = softpipe_create_screen(winsys);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GALLIUM_SWR)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (screen == <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(driver, <span class=\"string\">\"swr\"</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">      screen = swr_create_screen(winsys);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GALLIUM_ZINK)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (screen == <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(driver, <span class=\"string\">\"zink\"</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">      screen = zink_create_screen(winsys);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> screen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_screen</span> *</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">sw_screen_create</span>(<span class=\"title\">struct</span> <span class=\"title\">sw_winsys</span> *<span class=\"title\">winsys</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *default_driver;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *driver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GALLIUM_LLVMPIPE)</span></span><br><span class=\"line\">   default_driver = <span class=\"string\">\"llvmpipe\"</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(GALLIUM_SOFTPIPE)</span></span><br><span class=\"line\">   default_driver = <span class=\"string\">\"softpipe\"</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(GALLIUM_SWR)</span></span><br><span class=\"line\">   default_driver = <span class=\"string\">\"swr\"</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(GALLIUM_ZINK)</span></span><br><span class=\"line\">   default_driver = <span class=\"string\">\"zink\"</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">   default_driver = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">   driver = debug_get_option(<span class=\"string\">\"GALLIUM_DRIVER\"</span>, default_driver);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> sw_screen_create_named(winsys, driver);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/state_trackers/glx/xlib/xm_api.c\" target=\"_blank\" rel=\"noopener\">xm_api.c</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Driver interface routines, set up by xlib backend on library</span></span><br><span class=\"line\"><span class=\"comment\"> * _init().  These are global in the same way that function names are</span></span><br><span class=\"line\"><span class=\"comment\"> * global.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xm_driver</span> <span class=\"title\">driver</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">st_api</span> *<span class=\"title\">stapi</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">xmesa_set_driver</span><span class=\"params\">( <span class=\"keyword\">const</span> struct xm_driver *templ )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   driver = *templ;</span><br><span class=\"line\">   stapi = driver.create_st_api();</span><br><span class=\"line\"></span><br><span class=\"line\">   xmesa_strict_invalidate =</span><br><span class=\"line\">      debug_get_bool_option(<span class=\"string\">\"XMESA_STRICT_INVALIDATE\"</span>, FALSE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> XMesaDisplay</span><br><span class=\"line\">xmesa_init_display( Display *display )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">mtx_t</span> init_mutex = _MTX_INITIALIZER_NP;</span><br><span class=\"line\">   XMesaDisplay xmdpy;</span><br><span class=\"line\">   XMesaExtDisplayInfo *info;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (display == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   mtx_lock(&amp;init_mutex);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Look for XMesaDisplay which corresponds to this display */</span></span><br><span class=\"line\">   info = MesaExtInfo.head;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(info) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (info-&gt;display == display) &#123;</span><br><span class=\"line\">         <span class=\"comment\">/* Found it */</span></span><br><span class=\"line\">         mtx_unlock(&amp;init_mutex);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>  &amp;info-&gt;mesaDisplay;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      info = info-&gt;next;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Not found.  Create new XMesaDisplay */</span></span><br><span class=\"line\">   <span class=\"comment\">/* first allocate X-related resources and hook destroy callback */</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* allocate mesa display info */</span></span><br><span class=\"line\">   info = (XMesaExtDisplayInfo *) Xmalloc(<span class=\"keyword\">sizeof</span>(XMesaExtDisplayInfo));</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (info == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      mtx_unlock(&amp;init_mutex);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   info-&gt;display = display;</span><br><span class=\"line\"></span><br><span class=\"line\">   xmdpy = &amp;info-&gt;mesaDisplay; <span class=\"comment\">/* to be filled out below */</span></span><br><span class=\"line\">   xmdpy-&gt;display = display;</span><br><span class=\"line\">   xmdpy-&gt;pipe = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   xmdpy-&gt;smapi = CALLOC_STRUCT(st_manager);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!xmdpy-&gt;smapi) &#123;</span><br><span class=\"line\">      Xfree(info);</span><br><span class=\"line\">      mtx_unlock(&amp;init_mutex);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   xmdpy-&gt;screen = driver.create_pipe_screen(display);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!xmdpy-&gt;screen) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">free</span>(xmdpy-&gt;smapi);</span><br><span class=\"line\">      Xfree(info);</span><br><span class=\"line\">      mtx_unlock(&amp;init_mutex);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* At this point, both smapi and screen are known to be valid */</span></span><br><span class=\"line\">   xmdpy-&gt;smapi-&gt;screen = xmdpy-&gt;screen;</span><br><span class=\"line\">   xmdpy-&gt;smapi-&gt;get_param = xmesa_get_param;</span><br><span class=\"line\">   (<span class=\"keyword\">void</span>) mtx_init(&amp;xmdpy-&gt;mutex, mtx_plain);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* chain to the list of displays */</span></span><br><span class=\"line\">   _XLockMutex(_Xglobal_lock);</span><br><span class=\"line\">   info-&gt;next = MesaExtInfo.head;</span><br><span class=\"line\">   MesaExtInfo.head = info;</span><br><span class=\"line\">   MesaExtInfo.ndisplays++;</span><br><span class=\"line\">   _XUnlockMutex(_Xglobal_lock);</span><br><span class=\"line\"></span><br><span class=\"line\">   mtx_unlock(&amp;init_mutex);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> xmdpy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>where <code>driver.create_pipe_screen(display)</code> is instantiated as <code>xlib_driver.swrast_xlib_create_screen</code>. As we see, the dynamic library routine <code>_init()</code> will set <code>xlib_driver.create_pipe_screen</code> to <code>swrast_xlib_create_screen</code> that return a <code>pipe_screen</code> to be set to the <code>st_manager-&gt;screen</code>. Eventually those two helper functions decide which gallium driver backend will be used by compilation macros.</p>\n<h2 id=\"Gallium-Genbu\"><a href=\"#Gallium-Genbu\" class=\"headerlink\" title=\"Gallium Genbu\"></a>Gallium Genbu</h2><p>To verify the analysis above we will try to add a customized gallium driver named <strong>genbu</strong> as a clone from the existing softpipe based GLX. All that we will do is three parts work below.</p>\n<ul>\n<li>key data structures: genbu_screen, genbu_context, the related callbacks and definitions </li>\n<li>helper functions for loading software rasterizers for GLX</li>\n<li>build scripts</li>\n</ul>\n<h3 id=\"Added-or-Modified-Sources-and-Build-Scripts\"><a href=\"#Added-or-Modified-Sources-and-Build-Scripts\" class=\"headerlink\" title=\"Added or Modified Sources and Build Scripts\"></a><a href=\"https://gitlab.freedesktop.org/lucmaa/mesa/tree/gallium-gb-1.0\" target=\"_blank\" rel=\"noopener\">Added or Modified Sources and Build Scripts</a></h3><h3 id=\"Trace\"><a href=\"#Trace\" class=\"headerlink\" title=\"Trace\"></a>Trace</h3><table>\n<thead>\n<tr>\n<th><em>belong</em></th>\n<th><em>hook</em></th>\n<th><em>callback</em></th>\n<th><em>caller</em></th>\n<th><em>X/GL API</em></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pipe_screen</td>\n<td>resource_create</td>\n<td>softpipe_resource_create</td>\n<td>bufferobj_data</td>\n<td></td>\n</tr>\n<tr>\n<td>pipe_context</td>\n<td>transfer_map</td>\n<td>softpipe_transfer_map</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>pipe_context</td>\n<td>create_surface</td>\n<td>softpipe_create_surface</td>\n<td>st_framebuffer_validate</td>\n<td></td>\n</tr>\n<tr>\n<td>pipe_context</td>\n<td>flush</td>\n<td>softpipe_flush_wrapped</td>\n<td>st_context_flush</td>\n<td>glXSwapBuffers</td>\n</tr>\n<tr>\n<td>pipe_context</td>\n<td>clear</td>\n<td>softpipe_clear</td>\n<td>st_Clear</td>\n<td>glClear</td>\n</tr>\n<tr>\n<td>pipe_context</td>\n<td>draw_vbo</td>\n<td>softpipe_draw_vbo</td>\n<td>st_draw_vbo</td>\n<td>glCallList</td>\n</tr>\n<tr>\n<td>pipe_context</td>\n<td>draw_vbo</td>\n<td>softpipe_draw_vbo</td>\n<td>st_draw_vbo</td>\n<td>glCallList</td>\n</tr>\n</tbody></table>\n<h2 id=\"DRI-Based-GLX-Demos\"><a href=\"#DRI-Based-GLX-Demos\" class=\"headerlink\" title=\"DRI-Based GLX Demos\"></a>DRI-Based GLX Demos</h2><h3 id=\"Loading\"><a href=\"#Loading\" class=\"headerlink\" title=\"Loading\"></a>Loading</h3><ul>\n<li><code>__glXInitialize</code></li>\n<li><code>driOpenDriver</code></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GLX_DIRECT_RENDERING) &amp;&amp; !defined(GLX_USE_APPLEGL)</span></span><br><span class=\"line\">   glx_direct = !env_var_as_boolean(<span class=\"string\">\"LIBGL_ALWAYS_INDIRECT\"</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">   glx_accel = !env_var_as_boolean(<span class=\"string\">\"LIBGL_ALWAYS_SOFTWARE\"</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   dpyPriv-&gt;drawHash = __glxHashCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    ** Initialize the direct rendering per display data and functions.</span></span><br><span class=\"line\"><span class=\"comment\">    ** Note: This _must_ be done before calling any other DRI routines</span></span><br><span class=\"line\"><span class=\"comment\">    ** (e.g., those called in AllocAndFetchScreenConfigs).</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GLX_USE_DRM)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (glx_direct &amp;&amp; glx_accel) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(HAVE_DRI3)</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!env_var_as_boolean(<span class=\"string\">\"LIBGL_DRI3_DISABLE\"</span>, <span class=\"literal\">false</span>))</span><br><span class=\"line\">         dpyPriv-&gt;dri3Display = dri3_create_display(dpy);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* HAVE_DRI3 */</span></span></span><br><span class=\"line\">      dpyPriv-&gt;dri2Display = dri2CreateDisplay(dpy);</span><br><span class=\"line\">      dpyPriv-&gt;driDisplay = driCreateDisplay(dpy);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* GLX_USE_DRM */</span></span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (glx_direct)</span><br><span class=\"line\">      dpyPriv-&gt;driswDisplay = driswCreateDisplay(dpy);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* GLX_DIRECT_RENDERING &amp;&amp; !GLX_USE_APPLEGL */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> GLX_USE_APPLEGL</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!applegl_create_display(dpyPriv)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">free</span>(dpyPriv);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> GLX_USE_WINDOWSGL</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (glx_direct &amp;&amp; glx_accel)</span><br><span class=\"line\">      dpyPriv-&gt;windowsdriDisplay = driwindowsCreateDisplay(dpy);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!AllocAndFetchScreenConfigs(dpy, dpyPriv)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">free</span>(dpyPriv);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>This process of loading drivers works similarly with that of gallium-based glx. Compilation macros and environment variables make a difference. There are several approaches to load the specific drivers:</p>\n<ul>\n<li><code>dri3_create_display</code></li>\n<li><code>dri2CreateDisplay</code></li>\n<li><code>driCreateDisplay</code></li>\n<li><code>driswCreateDisplay</code></li>\n<li><code>applegl_create_display</code></li>\n<li><code>driwindowsCreateDisplay</code></li>\n</ul>\n<p>Let’s look into <code>driCreateDisplay</code>. Once it manages to attach to <code>driCreateScreen</code> which searches and matches the appropriate gallium driver the function <code>driOpenDriver</code> will open the <strong>found</strong> driver by its name like “i965”, “radeon”, “nouveau”, etc. These drivers are supposed to be installed at <strong><code>LIBGL_DRIVERS_PATH</code></strong> or <code>LIBGL_DRIVERS_DIR</code>(deprecated) and named as <code>*_dri.so</code> by default.</p>\n<p>Like Gallium-based GLX’s <code>_init</code> routine with GCC <strong><code>constructor</code></strong> attribute, DRI-based GLX also defines a routine <code>megadriver_stub_init</code> with <code>constructor</code> attribute which allows to load the specific driver in a way of <strong><code>__DRIextension</code></strong>.</p>\n<div align=center><img src=\"/mesa/gdb.svg\" class=\"\" title=\"osdemo\"></div>\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This is a constructor function for the megadriver dynamic library.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * When the driver is dlopen'ed, this function will run. It will</span></span><br><span class=\"line\"><span class=\"comment\"> * search for the name of the foo_dri.so file that was opened using</span></span><br><span class=\"line\"><span class=\"comment\"> * the dladdr function.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * After finding foo's name, it will call __driDriverGetExtensions_foo</span></span><br><span class=\"line\"><span class=\"comment\"> * and use the return to update __driDriverExtensions to enable</span></span><br><span class=\"line\"><span class=\"comment\"> * compatibility with older DRI driver loaders.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">__attribute__((constructor)) <span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">megadriver_stub_init(<span class=\"keyword\">void</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Allocate, initialize and return a __DRIdisplayPrivate object.</span></span><br><span class=\"line\"><span class=\"comment\"> * This is called from __glXInitialize() when we are given a new</span></span><br><span class=\"line\"><span class=\"comment\"> * display pointer.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">_X_HIDDEN __GLXDRIdisplay *</span><br><span class=\"line\">driCreateDisplay(Display * dpy)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dri_display</span> *<span class=\"title\">pdpyp</span>;</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> eventBase, errorBase;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> major, minor, patch;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!XF86DRIQueryExtension(dpy, &amp;eventBase, &amp;errorBase)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!XF86DRIQueryVersion(dpy, &amp;major, &amp;minor, &amp;patch)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   pdpyp = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> *pdpyp);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!pdpyp) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   pdpyp-&gt;driMajor = major;</span><br><span class=\"line\">   pdpyp-&gt;driMinor = minor;</span><br><span class=\"line\">   pdpyp-&gt;driPatch = patch;</span><br><span class=\"line\"></span><br><span class=\"line\">   pdpyp-&gt;base.destroyDisplay = driDestroyDisplay;</span><br><span class=\"line\">   pdpyp-&gt;base.createScreen = driCreateScreen;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;pdpyp-&gt;base;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Contexts\"><a href=\"#Contexts\" class=\"headerlink\" title=\"Contexts\"></a>Contexts</h2><p>There are a variety of <strong>contexts</strong> in Mesa. They are designed as a framework of layers.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__________________</span><br><span class=\"line\">|                |</span><br><span class=\"line\">|   gl_contex    | --------------&gt; standard &amp; general</span><br><span class=\"line\">|________________|</span><br><span class=\"line\"></span><br><span class=\"line\">__________________</span><br><span class=\"line\">|                |</span><br><span class=\"line\">|   st_contex    | --------------&gt; adapter</span><br><span class=\"line\">|________________|</span><br><span class=\"line\"></span><br><span class=\"line\">__________________</span><br><span class=\"line\">|                |</span><br><span class=\"line\">|  draw_contex   | --------------&gt; driver-specific</span><br><span class=\"line\">|________________|</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"gl-context\"><a href=\"#gl-context\" class=\"headerlink\" title=\"gl_context\"></a>gl_context</h3><blockquote><p>This is the central context data structure for Mesa. Almost all OpenGL state is contained in this structure. Think of this as a base class from which device drivers will derive sub classes.</p>\n</blockquote>\n<p>Apart from OpenGL state it contains several other contexts</p>\n<ul>\n<li><code>swrast_context</code></li>\n<li><code>swsetup_context</code></li>\n<li><code>swtnl_context</code></li>\n<li><code>vbo_context</code></li>\n<li><code>st_context</code></li>\n</ul>\n<h3 id=\"st-context\"><a href=\"#st-context\" class=\"headerlink\" title=\"st_context\"></a>st_context</h3><h3 id=\"draw-context\"><a href=\"#draw-context\" class=\"headerlink\" title=\"draw_context\"></a>draw_context</h3><h3 id=\"vbo-context\"><a href=\"#vbo-context\" class=\"headerlink\" title=\"vbo_context\"></a>vbo_context</h3><p>VBO is short for vertex buffer object. This context derives two kinds of vbo contexts, <code>vbo_exec_context</code> and <code>vbo_save_context</code> which <code>vbo_exec_context</code> is generic for core and compatible ogl and the other is specific for compatible ogl.</p>\n<h4 id=\"vbo-exec-vtx-init\"><a href=\"#vbo-exec-vtx-init\" class=\"headerlink\" title=\"vbo_exec_vtx_init\"></a>vbo_exec_vtx_init</h4><ul>\n<li>Allocate a <code>gl_buffer_object</code> which just is referenced.</li>\n<li>Initialize vbo attributes including size, type and active size.</li>\n</ul>\n<h4 id=\"vbo-vs-vao\"><a href=\"#vbo-vs-vao\" class=\"headerlink\" title=\"vbo vs. vao\"></a>vbo vs. vao</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_buffer_object</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   GLint RefCount;</span><br><span class=\"line\">   GLuint Name;</span><br><span class=\"line\">   GLchar *Label;       </span><br><span class=\"line\">   GLenum16 Usage;      </span><br><span class=\"line\">   GLbitfield StorageFlags; </span><br><span class=\"line\">   GLsizeiptrARB Size;  </span><br><span class=\"line\">   GLubyte *Data;       </span><br><span class=\"line\">   GLboolean DeletePending;   </span><br><span class=\"line\">   GLboolean Written;   </span><br><span class=\"line\">   GLboolean Purgeable; </span><br><span class=\"line\">   GLboolean Immutable; </span><br><span class=\"line\">   gl_buffer_usage UsageHistory; </span><br><span class=\"line\">   GLuint NumSubDataCalls;</span><br><span class=\"line\">   GLuint NumMapBufferWriteCalls;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_buffer_mapping</span> <span class=\"title\">Mappings</span>[<span class=\"title\">MAP_COUNT</span>];</span></span><br><span class=\"line\">   <span class=\"keyword\">simple_mtx_t</span> MinMaxCacheMutex;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hash_table</span> *<span class=\"title\">MinMaxCache</span>;</span></span><br><span class=\"line\">   <span class=\"keyword\">unsigned</span> MinMaxCacheHitIndices;</span><br><span class=\"line\">   <span class=\"keyword\">unsigned</span> MinMaxCacheMissIndices;</span><br><span class=\"line\">   <span class=\"keyword\">bool</span> MinMaxCacheDirty;</span><br><span class=\"line\">   <span class=\"keyword\">bool</span> HandleAllocated; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_vertex_array_object</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   GLuint Name;</span><br><span class=\"line\">   GLint RefCount;</span><br><span class=\"line\">   GLchar *Label;       </span><br><span class=\"line\">   GLboolean EverBound;</span><br><span class=\"line\">   <span class=\"keyword\">bool</span> SharedAndImmutable;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_array_attributes</span> <span class=\"title\">VertexAttrib</span>[<span class=\"title\">VERT_ATTRIB_MAX</span>];</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_vertex_buffer_binding</span> <span class=\"title\">BufferBinding</span>[<span class=\"title\">VERT_ATTRIB_MAX</span>];</span></span><br><span class=\"line\">   GLbitfield VertexAttribBufferMask;</span><br><span class=\"line\">   GLbitfield Enabled;</span><br><span class=\"line\">   GLbitfield _EffEnabledVBO;</span><br><span class=\"line\">   gl_attribute_map_mode _AttributeMapMode;</span><br><span class=\"line\">   GLbitfield NewArrays;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_buffer_object</span> *<span class=\"title\">IndexBufferObj</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dispatchers\"><a href=\"#Dispatchers\" class=\"headerlink\" title=\"Dispatchers\"></a>Dispatchers</h2><ul>\n<li><em><code>Exec</code></em>: The current dispatch table for non-displaylist-saving execution, either BeginEnd or OutsideBeginEnd</li>\n<li><em><code>OutsideBeginEnd</code></em>: The normal dispatch table for non-displaylist-saving, non-begin/end</li>\n<li><em><code>Save</code></em>: The dispatch table used between glNewList() and glEndList()</li>\n<li><em><code>BeginEnd</code></em>: The dispatch table used between glBegin() and glEnd() (outside of a display list). Only valid functions between those two are set, which is mostly just the set in a GLvertexformat struct.</li>\n<li><em><code>ContextLost</code></em>: Dispatch table for when a graphics reset has happened.</li>\n<li><em><code>MarshalExec</code></em>: Dispatch table used to marshal API calls from the client program to a separate server thread. NULL if API calls are not being marshalled to another thread.</li>\n<li><em><code>CurrentClientDispatch</code></em>: Dispatch table currently in use for fielding API calls from the client program. If API calls are being marshalled to another thread, this refers to <em><code>MarshalExec</code></em>. Otherwise it refers to <em><code>CurrentServerDispatch</code></em>.</li>\n<li><em><code>CurrentServerDispatch</code></em>: Dispatch table currently in use for performing API calls. It refers to <em><code>Save</code></em> or <em><code>Exec</code></em>.</li>\n</ul>\n<h2 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h2><ul>\n<li>draw module</li>\n<li>CSO module</li>\n<li>translate module</li>\n<li>VBO module</li>\n<li>TNL module(Transform &amp; Light)</li>\n</ul>\n<h2 id=\"draw-xxx-stage\"><a href=\"#draw-xxx-stage\" class=\"headerlink\" title=\"draw_xxx_stage\"></a>draw_xxx_stage</h2><ul>\n<li><strong><code>extern struct draw_stage *draw_unfilled_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_twoside_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_offset_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_clip_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_flatshade_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_cull_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_stipple_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_wide_line_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_wide_point_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_validate_stage( struct draw_context *context );</code></strong></li>\n</ul>\n<h2 id=\"Auxiliary\"><a href=\"#Auxiliary\" class=\"headerlink\" title=\"Auxiliary\"></a>Auxiliary</h2><ul>\n<li><p>cso_cache<br>  The CSO cache is used to accelerate preparation of state by saving driver-specific state structure for later use.</p>\n</li>\n<li><p>draw<br>  Draw is a software TCL pipeline for hardware that lacks vertex shaders or other essential parts of pre-rasterization vertex preparation.</p>\n</li>\n<li><p>driver_ddebug</p>\n</li>\n<li><p>driver_noop</p>\n</li>\n<li><p>driver_rbug</p>\n</li>\n<li><p>driver_trace</p>\n</li>\n<li><p>gallivm</p>\n</li>\n<li><p>hud</p>\n</li>\n<li><p>indices<br>  Indices provides tools for translating or generating element indices for use with element-based rendering.</p>\n</li>\n<li><p>nir</p>\n</li>\n<li><p>os</p>\n<ul>\n<li>memory allocation</li>\n<li>simple message logging</li>\n<li>obtaining run-time configuration option</li>\n<li>threading primitives<br>The OS module contains the abstraction for basic operating system services above. This is the bare minimum required to port Gallium to a new platform. It already provides the implementations of these abstractions for the most common platforms. When targeting an embedded platform no implementation will be provided - these must be provided separately.</li>\n</ul>\n</li>\n<li><p>pipe-loader</p>\n</li>\n<li><p>pipebuffer</p>\n</li>\n<li><p>postprocess</p>\n</li>\n<li><p>rbug</p>\n</li>\n<li><p>renderonly</p>\n</li>\n<li><p>rtasm</p>\n</li>\n<li><p>target-helpers</p>\n</li>\n<li><p>tgsi</p>\n</li>\n<li><p>translate</p>\n</li>\n<li><p>util</p>\n</li>\n<li><p>vl</p>\n</li>\n</ul>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><h4 id=\"When-xlib-creates-pipe-screen-only-software-rasterizers-or-pipes’screen-are-created-And-llvmpipe-softpipe-virgl-swr-unexceptionally-are-software-rasterizers-or-virtual-GPU-Zink-is-in-brief-a-translator-from-OpenGL-to-Vulkan-and-implemented-as-Gallium-driver-So-why-only-software-pipes\"><a href=\"#When-xlib-creates-pipe-screen-only-software-rasterizers-or-pipes’screen-are-created-And-llvmpipe-softpipe-virgl-swr-unexceptionally-are-software-rasterizers-or-virtual-GPU-Zink-is-in-brief-a-translator-from-OpenGL-to-Vulkan-and-implemented-as-Gallium-driver-So-why-only-software-pipes\" class=\"headerlink\" title=\"When xlib creates pipe screen, only software rasterizers or pipes’screen are created. And llvmpipe, softpipe, virgl, swr, unexceptionally, are software rasterizers or virtual GPU. Zink is, in brief, a translator from OpenGL to Vulkan and implemented as Gallium driver. So why only software pipes?\"></a>When xlib creates pipe screen, <em>only</em> software rasterizers or pipes’screen are created. And llvmpipe, softpipe, virgl, swr, unexceptionally, are software rasterizers or virtual GPU. <a href=\"https://www.collabora.com/news-and-blog/blog/2018/10/31/introducing-zink-opengl-implementation-vulkan/\" target=\"_blank\" rel=\"noopener\">Zink</a> is, in brief, a translator from OpenGL to Vulkan and implemented as Gallium driver. So why only software pipes?</h4><p>The answer is <strong><code>sw_winsys</code></strong>. All of target helpers’s parameter is a <code>sw_winsys</code>. Check mesa source directory: <a href=\"https://gitlab.freedesktop.org/mesa/mesa/tree/master/src/gallium/winsys\" target=\"_blank\" rel=\"noopener\">mesa/src/gallium/winsys</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amdgpu</span><br><span class=\"line\">etnaviv</span><br><span class=\"line\">freedreno</span><br><span class=\"line\">i915</span><br><span class=\"line\">iris</span><br><span class=\"line\">kmsro</span><br><span class=\"line\">lima</span><br><span class=\"line\">nouveau</span><br><span class=\"line\">panfrost</span><br><span class=\"line\">radeon</span><br><span class=\"line\">svga</span><br><span class=\"line\">sw</span><br><span class=\"line\">tegra</span><br><span class=\"line\">v3d</span><br><span class=\"line\">vc4</span><br><span class=\"line\">virgl</span><br></pre></td></tr></table></figure>\n\n<p>To put it simply, specific driver corresponds to specific winsys. The <code>sw</code> is for software rasterizers. If you expect to create pipe screen for some driver else, you need to add another target helper with its winsys as parameter like: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline struct pipe_screen *</span><br><span class=\"line\">i915_screen_create_named(struct i915_drm_winsys *winsys, const char *driver)</span><br></pre></td></tr></table></figure>\n\n<p>That means you have to declare a bunch of new interfaces from the top. So you’d better wrap the function to create specific driver’s winsys so that it can take a sw_winsys as its parameter like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#if defined(GALLIUM_VIRGL)</span><br><span class=\"line\">   if (screen == NULL &amp;&amp; strcmp(driver, &quot;virpipe&quot;) == 0) &#123;</span><br><span class=\"line\">      struct virgl_winsys *vws;</span><br><span class=\"line\">      vws = virgl_vtest_winsys_wrap(winsys);</span><br><span class=\"line\">      screen = virgl_create_screen(vws, NULL);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"libGL-so-is-not-built-until-glx-option-is-enabled-in-meson-options-txt\"><a href=\"#libGL-so-is-not-built-until-glx-option-is-enabled-in-meson-options-txt\" class=\"headerlink\" title=\"libGL.so is not built until glx option is enabled in meson_options.txt.\"></a>libGL.so is not built until glx option is enabled in <strong>meson_options.txt</strong>.</h4><p>Only with essential build-time dependencies for X11 installed and glx option configured is libGL.so built.</p>\n<h4 id=\"What-role-do-DRM-DRI-and-Gallium-play-in-Mesa\"><a href=\"#What-role-do-DRM-DRI-and-Gallium-play-in-Mesa\" class=\"headerlink\" title=\"What role do DRM, DRI and Gallium play in Mesa?\"></a>What role do DRM, DRI and Gallium play in Mesa?</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_libdrm_checks = [</span><br><span class=\"line\">  [&apos;intel&apos;, with_dri_i915 or with_gallium_i915],</span><br><span class=\"line\">  [&apos;amdgpu&apos;, with_amd_vk or with_gallium_radeonsi],</span><br><span class=\"line\">  [&apos;radeon&apos;, (with_gallium_radeonsi or with_dri_r100 or with_dri_r200 or</span><br><span class=\"line\">              with_gallium_r300 or with_gallium_r600)],</span><br><span class=\"line\">  [&apos;nouveau&apos;, (with_gallium_nouveau or with_dri_nouveau)],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>DRI and Gallium seem to be respectively different underlying implementation in Mesa. Moreover in term of swrast and i915, you have to choose either of both as you can read the following code snippet in meson.build. In fact DRI is more complicated and staler but Gallium is more smaller and simpler.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if with_dri_swrast and (with_gallium_softpipe or with_gallium_swr)</span><br><span class=\"line\">  error(&apos;Only one swrast provider can be built&apos;)</span><br><span class=\"line\">endif</span><br><span class=\"line\">if with_dri_i915 and with_gallium_i915</span><br><span class=\"line\">  error(&apos;Only one i915 provider can be built&apos;)</span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"What-problems-are-encountered-when-you-build-mesa-on-the-WSL\"><a href=\"#What-problems-are-encountered-when-you-build-mesa-on-the-WSL\" class=\"headerlink\" title=\"What problems are encountered when you build mesa on the WSL?\"></a>What problems are encountered when you build mesa on the WSL?</h4><ul>\n<li>dri based GLX requires shared-glapi</li>\n<li>Gallium-xlib based GLX requires softpipe or llvmpipe<ul>\n<li>means that <code>gallium-xlib</code> is supposed to only support software rasterizers(llvmpipe, softpipe) and virtual GPU(virgl, swr).<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">option(</span><br><span class=\"line\">  &apos;glx&apos;,</span><br><span class=\"line\">  type : &apos;combo&apos;,</span><br><span class=\"line\">  value : &apos;xlib&apos;,</span><br><span class=\"line\">  choices : [&apos;auto&apos;, &apos;disabled&apos;, &apos;dri&apos;, &apos;xlib&apos;, &apos;gallium-xlib&apos;],</span><br><span class=\"line\">  description : &apos;Build support for GLX platform&apos;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\nIn Mesa, glx is implemented in three ways:</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>*-based</th>\n<th>backend</th>\n<th>window system</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dri-based</td>\n<td>non-sw-pipes</td>\n<td>*_drm_winsys</td>\n</tr>\n<tr>\n<td>xlib</td>\n<td>tnl</td>\n<td>sw_winsys</td>\n</tr>\n<tr>\n<td>gallium-based</td>\n<td>softpipe/llvmpipe</td>\n<td>sw_winsys</td>\n</tr>\n</tbody></table>\n<ul>\n<li>OSMesa gallium requires gallium softpipe or llvmpipe<ul>\n<li>means if <code>osmesa</code> is configured as <code>gallium</code>, <code>gallium-drivers</code> must include <code>swrast</code> but the <code>classic</code> osmesa uses the fixed-functioned TNL by default.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">option(</span><br><span class=\"line\">  &apos;osmesa&apos;,</span><br><span class=\"line\">  type : &apos;combo&apos;,</span><br><span class=\"line\">  value : &apos;gallium&apos;,</span><br><span class=\"line\">  choices : [&apos;none&apos;, &apos;classic&apos;, &apos;gallium&apos;],</span><br><span class=\"line\">  description : &apos;Build OSmesa.&apos;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Cannot build GLX support without X11 platform support and at least one OpenGL API<ul>\n<li>GLX, As the name suggests, is dedicated to X11 winsys.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"When-glXInitialize-creates-the-Display-only-driswCreateDisplay-returns-successfully-Both-of-dri2CreateDisplay-and-driCreateDisplay-failed\"><a href=\"#When-glXInitialize-creates-the-Display-only-driswCreateDisplay-returns-successfully-Both-of-dri2CreateDisplay-and-driCreateDisplay-failed\" class=\"headerlink\" title=\"When __glXInitialize creates the Display, only driswCreateDisplay returns successfully. Both of dri2CreateDisplay and driCreateDisplay failed.\"></a>When <code>__glXInitialize</code> creates the <code>Display</code>, <strong>only</strong> <code>driswCreateDisplay</code> returns successfully. Both of <code>dri2CreateDisplay</code> and <code>driCreateDisplay</code> failed.</h4><ul>\n<li>env: WSL on Windows 10 and with vcXsrv installed on the host as X server</li>\n</ul>\n<p>The cause of failure is that vcXsrv has no extensions with DRI or DRI2. This lack of X server extension fails <code>DRI2QueryExtension</code> and <code>XF86DRIQueryExtension</code> so that the loading of gallium driver is not invoked.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * XextAddDisplay - add a display to this extension</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">XExtDisplayInfo *<span class=\"title\">XextAddDisplay</span> <span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    XExtensionInfo *extinfo,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    Display *dpy,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    _Xconst <span class=\"keyword\">char</span> *ext_name,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    XExtensionHooks *hooks,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> nevents,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    XPointer data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    XExtDisplayInfo *dpyinfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    dpyinfo = (XExtDisplayInfo *) Xmalloc (<span class=\"keyword\">sizeof</span> (XExtDisplayInfo));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dpyinfo) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    dpyinfo-&gt;display = dpy;</span><br><span class=\"line\">    dpyinfo-&gt;data = data;</span><br><span class=\"line\">    dpyinfo-&gt;codes = XInitExtension (dpy, ext_name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * if the server has the extension, then we can initialize the</span></span><br><span class=\"line\"><span class=\"comment\">     * appropriate function vectors</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dpyinfo-&gt;codes) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, j = dpyinfo-&gt;codes-&gt;first_event; i &lt; nevents; i++, j++) &#123;</span><br><span class=\"line\">\t    XESetWireToEvent (dpy, j, hooks-&gt;wire_to_event);</span><br><span class=\"line\">\t    XESetEventToWire (dpy, j, hooks-&gt;event_to_wire);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* register extension for XGE */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(ext_name, GE_NAME))</span><br><span class=\"line\">            xgeExtRegister(dpy, dpyinfo-&gt;codes-&gt;major_opcode, hooks);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;create_gc)</span><br><span class=\"line\">\t  XESetCreateGC (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;create_gc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;copy_gc)</span><br><span class=\"line\">\t  XESetCopyGC (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;copy_gc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;flush_gc)</span><br><span class=\"line\">\t  XESetFlushGC (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;flush_gc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;free_gc)</span><br><span class=\"line\">\t  XESetFreeGC (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;free_gc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;create_font)</span><br><span class=\"line\">\t  XESetCreateFont (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;create_font);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;free_font)</span><br><span class=\"line\">\t  XESetFreeFont (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;free_font);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;close_display)</span><br><span class=\"line\">\t  XESetCloseDisplay (dpy, dpyinfo-&gt;codes-&gt;extension,</span><br><span class=\"line\">\t\t\t     hooks-&gt;close_display);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;error)</span><br><span class=\"line\">\t  XESetError (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;error);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;error_string)</span><br><span class=\"line\">\t  XESetErrorString (dpy, dpyinfo-&gt;codes-&gt;extension,</span><br><span class=\"line\">\t\t\t    hooks-&gt;error_string);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (hooks-&gt;close_display) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* The server doesn't have this extension.</span></span><br><span class=\"line\"><span class=\"comment\">\t * Use a private Xlib-internal extension to hang the close_display</span></span><br><span class=\"line\"><span class=\"comment\">\t * hook on so that the \"cache\" (extinfo-&gt;cur) is properly cleaned.</span></span><br><span class=\"line\"><span class=\"comment\">\t * (XBUG 7955)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tXExtCodes *codes = XAddExtension(dpy);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!codes) &#123;</span><br><span class=\"line\">\t    XFree(dpyinfo);</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tXESetCloseDisplay (dpy, codes-&gt;extension, hooks-&gt;close_display);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * now, chain it onto the list</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    _XLockMutex(_Xglobal_lock);</span><br><span class=\"line\">    dpyinfo-&gt;next = extinfo-&gt;head;</span><br><span class=\"line\">    extinfo-&gt;head = dpyinfo;</span><br><span class=\"line\">    extinfo-&gt;cur = dpyinfo;</span><br><span class=\"line\">    extinfo-&gt;ndisplays++;</span><br><span class=\"line\">    _XUnlockMutex(_Xglobal_lock);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dpyinfo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://mesa3d.org/\" target=\"_blank\" rel=\"noopener\">Mesa</a> is an open source implementation for OpenGL. Check <a href=\"https://gitlab.freedesktop.org/mesa/mesa\" target=\"_blank\" rel=\"noopener\">repository</a> for its source code. There are something worth to learn about this project for a graphic driver developer.</p>\n<h2 id=\"Build\"><a href=\"#Build\" class=\"headerlink\" title=\"Build\"></a>Build</h2><p>It’s good choice for exploring any project’s source code to start with its build script. So here is the start.</p>\n<h3 id=\"Requisite\"><a href=\"#Requisite\" class=\"headerlink\" title=\"Requisite\"></a>Requisite</h3><ul>\n<li><p>Run-time dependency</p>\n<ul>\n<li>libdrm_intel</li>\n<li>libdrm_amdgpu</li>\n<li>libdrm_radeon</li>\n<li>libdrm_nouveau</li>\n<li>libdrm</li>\n<li>LLVM</li>\n<li>libelf</li>\n<li>valgrind</li>\n<li>bison</li>\n<li>flex</li>\n<li>gettext</li>\n</ul>\n</li>\n<li><p>Build-time dependency</p>\n<ul>\n<li>libx11-xcb-dev</li>\n<li>libxcb-fixes0-dev</li>\n<li>libxext-dev</li>\n<li>libxdamage-dev (if glx option is dri)</li>\n<li>libxfixes-dev (if glx option is dri)</li>\n<li>libxcb-glx-dev (if glx option is dri)</li>\n<li>libxcb-dri2-dev (if glx option is dri)</li>\n<li>libxxf86vm-dev (if glx option is dri)</li>\n</ul>\n</li>\n</ul>\n<p>These dependencies include from build-time headers to run-time tools. Nevertheless most of them are optional but not necessary. You can customize them in <strong>meson_options.txt</strong> by modifying the <strong>value</strong> field of each option. With the listed above run and build time dependencies installed you can create a build directory and start to configure.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meson build</span><br></pre></td></tr></table></figure>\n\n<p>You can configure a minimal dependencies mesa given that WSL is not a desktop platform as the following my configuration result:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Message: Configuration summary:</span><br><span class=\"line\">        </span><br><span class=\"line\">        prefix:          /usr/local</span><br><span class=\"line\">        libdir:          lib/x86_64-linux-gnu</span><br><span class=\"line\">        includedir:      include</span><br><span class=\"line\">        </span><br><span class=\"line\">        OpenGL:          yes (ES1: no ES2: no)</span><br><span class=\"line\">        </span><br><span class=\"line\">        OSMesa:          libOSMesa</span><br><span class=\"line\">        </span><br><span class=\"line\">        GLX:             Xlib-based (Gallium)</span><br><span class=\"line\">        </span><br><span class=\"line\">        EGL:             no</span><br><span class=\"line\">        GBM:             no</span><br><span class=\"line\">        EGL/Vulkan/VL platforms:   x11</span><br><span class=\"line\">        </span><br><span class=\"line\">        Vulkan drivers:  no</span><br><span class=\"line\">        </span><br><span class=\"line\">        llvm:            yes</span><br><span class=\"line\">        llvm-version:    9.0.0</span><br><span class=\"line\">        </span><br><span class=\"line\">        Gallium drivers: swrast</span><br><span class=\"line\">        Gallium st:      mesa</span><br><span class=\"line\">        HUD lmsensors:   no</span><br><span class=\"line\">        </span><br><span class=\"line\">        Shared-glapi:    yes</span><br><span class=\"line\"></span><br><span class=\"line\">Build targets in project: 90</span><br><span class=\"line\">WARNING: Project specifies a minimum meson_version &apos;&gt;= 0.46&apos; but uses features which were added in newer versions:</span><br><span class=\"line\"> * 0.51.0: &#123;&apos;dep.get_variable&apos;&#125;</span><br><span class=\"line\">Found ninja-1.9.0 at /usr/bin/ninja</span><br></pre></td></tr></table></figure>\n<p>As you see this configuration supports quite a few components which are essential for off-screen rendering. Once dependencies check passed fully you can begin to compile and install:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ninja -C build &amp;&amp; sudo ninja -C build install</span><br></pre></td></tr></table></figure>\n\n<p>After compilation and installed as follow:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l /usr/<span class=\"built_in\">local</span>/lib/x86_64-linux-gnu</span><br><span class=\"line\">total 159360</span><br><span class=\"line\">lrwxrwxrwx 1 root root        10 Feb  7 17:13 libGL.so -&gt; libGL.so.1</span><br><span class=\"line\">lrwxrwxrwx 1 root root        14 Feb  7 17:13 libGL.so.1 -&gt; libGL.so.1.5.0</span><br><span class=\"line\">-rwxr-xr-x 1 root root 111044912 Feb  7 17:13 libGL.so.1.5.0</span><br><span class=\"line\">lrwxrwxrwx 1 root root        14 Feb  7 17:13 libOSMesa.so -&gt; libOSMesa.so.8</span><br><span class=\"line\">lrwxrwxrwx 1 root root        18 Feb  7 17:13 libOSMesa.so.8 -&gt; libOSMesa.so.8.0.0</span><br><span class=\"line\">-rwxr-xr-x 1 root root  51541176 Feb  7 17:13 libOSMesa.so.8.0.0</span><br><span class=\"line\">lrwxrwxrwx 1 root root        13 Feb  7 17:13 libglapi.so -&gt; libglapi.so.0</span><br><span class=\"line\">lrwxrwxrwx 1 root root        17 Feb  7 17:13 libglapi.so.0 -&gt; libglapi.so.0.0.0</span><br><span class=\"line\">-rwxr-xr-x 1 root root    337264 Feb  7 17:07 libglapi.so.0.0.0</span><br><span class=\"line\">drwxr-xr-x 1 root root       512 Feb  7 17:13 pkgconfig</span><br></pre></td></tr></table></figure>\n\n<p>NOTE:</p>\n<ul>\n<li>Mesa is installed in <code>/usr/local/lib/$(uname -p)-linux-gnu</code> by default. So you have to <code>ldconfig</code> so that your linker can find them.</li>\n<li>libsoftpipe.a will be built but not installed.</li>\n<li>meson build system will enable compiler’s <code>-g</code> flag by default unless you are building on the release branch.</li>\n<li>if you have remodified the <strong>meson_options.txt</strong> and built once and now are about to reconfigure and rebuild, you need to run:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meson setup --wipe build</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Off-screen-Demos\"><a href=\"#Off-screen-Demos\" class=\"headerlink\" title=\"Off-screen Demos\"></a>Off-screen Demos</h2><p>Now that mesa have been built and installed we can give a try to run an OGL application. Similarly without window system supportd on the WSL, <a href=\"https://mesa3d.org/osmesa.html\" target=\"_blank\" rel=\"noopener\">off-screen rendering</a> is my choice. We can clone the mesa <a href=\"https://gitlab.freedesktop.org/mesa/demos\" target=\"_blank\" rel=\"noopener\">demos</a> which includes a lot of demos besides off-screen demos. </p>\n<h3 id=\"Requisite-1\"><a href=\"#Requisite-1\" class=\"headerlink\" title=\"Requisite\"></a>Requisite</h3><p>We need some more libraries besides libOSMesa and libGL before you can get these off-screen demos worked. They are:</p>\n<ul>\n<li><a href=\"https://gitlab.freedesktop.org/mesa/glu\" target=\"_blank\" rel=\"noopener\">GLU</a></li>\n<li>libm</li>\n</ul>\n<p>To build these demos:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc osdemo.c -o osdemo -g -I/home/luc/github/demos/src/util -lGL -lGLU -lOSMesa -lm</span><br></pre></td></tr></table></figure>\n\n<p>The executable osdemo saves the rendered pixels as the portable pixmap format. You need to covert it to image format e.g. jpg. You may do this with <code>pnmtojpeg output.ppm &gt; output.jpg</code>.</p>\n<div align=center><img src=\"/mesa/osdemo.jpg\" class=\"\" title=\"osdemo\"></div>\n\n<h2 id=\"OSMesa-Call-Graphs\"><a href=\"#OSMesa-Call-Graphs\" class=\"headerlink\" title=\"OSMesa Call Graphs\"></a>OSMesa Call Graphs</h2><p>Mesa supports many features from software pipelines to hardware drivers. For example <a href=\"https://www.freedesktop.org/wiki/Software/gallium/\" target=\"_blank\" rel=\"noopener\">Gallium</a>, it features with several software or hardware implementations which include the two software pipelines, softpipe and <a href=\"https://www.mesa3d.org/llvmpipe.html\" target=\"_blank\" rel=\"noopener\">llvmpipe</a>. With the different pipes enabled will the calls walk in the different paths. </p>\n<h3 id=\"Three-Different-Build-Configuration-reference-to-meson-options-txt\"><a href=\"#Three-Different-Build-Configuration-reference-to-meson-options-txt\" class=\"headerlink\" title=\"Three Different Build Configuration (reference to meson_options.txt)\"></a>Three Different Build Configuration (reference to <strong>meson_options.txt</strong>)</h3><table>\n<thead>\n<tr>\n<th>Option</th>\n<th><em>platform</em></th>\n<th><em>glx</em></th>\n<th><em>dri-drivers</em></th>\n<th><em>gallium-drivers</em></th>\n<th><em>llvm</em></th>\n<th><em>osmesa</em></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>llvmpipe</strong></td>\n<td>x11</td>\n<td>gallium-xlib</td>\n<td></td>\n<td>swrast</td>\n<td>true</td>\n<td>gallium</td>\n</tr>\n<tr>\n<td><strong>softpipe</strong></td>\n<td>x11</td>\n<td>gallium-xlib</td>\n<td></td>\n<td>swrast</td>\n<td>false</td>\n<td>gallium</td>\n</tr>\n<tr>\n<td><strong>tnl</strong></td>\n<td>x11</td>\n<td>gallium-xlib</td>\n<td></td>\n<td>swrast</td>\n<td>true</td>\n<td>classic</td>\n</tr>\n</tbody></table>\n<h3 id=\"Three-Different-Call-Paths\"><a href=\"#Three-Different-Call-Paths\" class=\"headerlink\" title=\"Three Different Call Paths\"></a>Three Different Call Paths</h3><h4 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h4><div align=center><img src=\"/mesa/OSMesaCreateContextExt.png\" class=\"\" title=\"context initialization\"></div>\n\n<p>NOTE: As for softpipe and llvmpipe <code>gl_api</code> and <code>gl_context</code> are created respectively while both of them are created in one path for the classic osmesa.</p>\n<h4 id=\"Draw\"><a href=\"#Draw\" class=\"headerlink\" title=\"Draw\"></a>Draw</h4><div align=center><img src=\"/mesa/PopMatrix.png\" class=\"\" title=\"draw command\"></div>\n\n<h2 id=\"Gallium-Based-GLX-Demos\"><a href=\"#Gallium-Based-GLX-Demos\" class=\"headerlink\" title=\"Gallium-Based GLX Demos\"></a>Gallium-Based GLX Demos</h2><p>If you want to know the full graphic stack of an OpenGL demo, you can not get rid of the window system. That is why I will try some GLX demos. Evidently GLX demos must depend on X11. You can cope with this problem by installing <a href=\"https://sourceforge.net/projects/vcxsrv/\" target=\"_blank\" rel=\"noopener\">vcXsrv</a> on the Windows 10 which hosts your WSL. </p>\n<div align=center><img src=\"/mesa/glxgears.png\" class=\"\" title=\"glx demo\"></div>\n\n<p>This time I still choose the gallium-xlib with softpipe. The following call graph shows the path that GLX context is created.</p>\n<div align=center><img src=\"/mesa/glXCreateContext.png\" class=\"\" title=\"glx context creation\"></div>\n\n<p>As we know, Mesa is quite modularized and flexible. How does it take the path that <code>softpipe_create_context</code> rather than other pipe contexts? The <a href=\"https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/include/state_tracker/st_api.h\" target=\"_blank\" rel=\"noopener\">st_manager</a> is a key structure.</p>\n<p><code>struct pipe_screen</code> has a callback function that will be set to <code>softpipe_create_context</code>. The following calls will create <code>struct pipe_screen</code> that will be set to the <code>st_manager</code>.</p>\n<div align=center><img src=\"/mesa/glXChooseVisual.png\" class=\"\" title=\"pipe_screen creation\"></div>\n\n<p>To bind the intended gallium driver backend to Mesa there must be something done before <code>glXChooseVisual</code> is called. It’s started by the library <code>init()</code> and prepare the global variables.</p>\n<p><a href=\"https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/state_trackers/glx/xlib/xm_public.h\" target=\"_blank\" rel=\"noopener\">xm_public.h</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* This is the driver interface required by the glx/xlib state tracker. </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xm_driver</span> &#123;</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_screen</span> *(*<span class=\"title\">create_pipe_screen</span>)( <span class=\"title\">Display</span> *<span class=\"title\">display</span> );</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">st_api</span> *(*<span class=\"title\">create_st_api</span>)( <span class=\"title\">void</span> );</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">xmesa_set_driver( <span class=\"keyword\">const</span> struct xm_driver *driver );</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/targets/libgl-xlib/xlib.c\" target=\"_blank\" rel=\"noopener\">xlib.c</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Helper function to build a subset of a driver stack consisting of</span></span><br><span class=\"line\"><span class=\"comment\"> * one of the software rasterizers (llvmpipe, softpipe) and the</span></span><br><span class=\"line\"><span class=\"comment\"> * xlib winsys.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_screen</span> *</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">swrast_xlib_create_screen</span>( <span class=\"title\">Display</span> *<span class=\"title\">display</span> )</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sw_winsys</span> *<span class=\"title\">winsys</span>;</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_screen</span> *<span class=\"title\">screen</span> = <span class=\"title\">NULL</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Create the underlying winsys, which performs presents to Xlib</span></span><br><span class=\"line\"><span class=\"comment\">    * drawables:</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   winsys = xlib_create_sw_winsys( display );</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (winsys == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Create a software rasterizer on top of that winsys:</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   screen = sw_screen_create( winsys );</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (screen == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> fail;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Inject any wrapping layers we want to here:</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> debug_screen_wrap( screen );</span><br><span class=\"line\"></span><br><span class=\"line\">fail:</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (winsys)</span><br><span class=\"line\">      winsys-&gt;destroy( winsys );</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xm_driver</span> <span class=\"title\">xlib_driver</span> = </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   .create_pipe_screen = swrast_xlib_create_screen,</span><br><span class=\"line\">   .create_st_api = st_gl_api_create,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Build the rendering stack.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">NOTE:</span> The obsolete symbols _init and _fini</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * signature:</span></span><br><span class=\"line\"><span class=\"comment\"> * void _init(void);</span></span><br><span class=\"line\"><span class=\"comment\"> * void _fini(void);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The linker recoginizes special symbols _init and _fini. If a dynamic library</span></span><br><span class=\"line\"><span class=\"comment\"> * exports a routine named _init, then that code is executed after the loading,</span></span><br><span class=\"line\"><span class=\"comment\"> * before dlopen() returns. If the dynamic library exports a routine named _fini,</span></span><br><span class=\"line\"><span class=\"comment\"> * then that routine is called just before the library is unloaded. In case you</span></span><br><span class=\"line\"><span class=\"comment\"> * need to avoid linking against the system startup files,this can be done by</span></span><br><span class=\"line\"><span class=\"comment\"> * giving gcc the \"-nostartfiles\" parameter on the command line.</span></span><br><span class=\"line\"><span class=\"comment\"> * Using these routines, or the gcc -nostartfiles of -nostdlib options, is not</span></span><br><span class=\"line\"><span class=\"comment\"> * recommended. Their use may result in undesired behavior, since the constructor/</span></span><br><span class=\"line\"><span class=\"comment\"> * destructor routines will not be executed(unless special measures are taken).</span></span><br><span class=\"line\"><span class=\"comment\"> * Instead, libraries should export routines using the __attribute__((constructor))</span></span><br><span class=\"line\"><span class=\"comment\"> * and __attribute__((destructor)) function attributes. Constructor routines are</span></span><br><span class=\"line\"><span class=\"comment\"> * executed before dlopen() returns, and destructor routines ared executed before</span></span><br><span class=\"line\"><span class=\"comment\"> * dlclose() returns.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> _init( <span class=\"keyword\">void</span> ) __attribute__((constructor));</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> _init( <span class=\"keyword\">void</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">/* Initialize the xlib libgl code, pass in the winsys:</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   xmesa_set_driver( &amp;xlib_driver );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>where define the <code>xlib_driver</code> and set by <code>_init()</code>.</p>\n<p><a href=\"https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/auxiliary/target-helpers/sw_helper.h\" target=\"_blank\" rel=\"noopener\">sw_helper.h</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_screen</span> *</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">sw_screen_create_named</span>(<span class=\"title\">struct</span> <span class=\"title\">sw_winsys</span> *<span class=\"title\">winsys</span>, <span class=\"title\">const</span> <span class=\"title\">char</span> *<span class=\"title\">driver</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_screen</span> *<span class=\"title\">screen</span> = <span class=\"title\">NULL</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GALLIUM_LLVMPIPE)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (screen == <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(driver, <span class=\"string\">\"llvmpipe\"</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">      screen = llvmpipe_create_screen(winsys);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GALLIUM_VIRGL)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (screen == <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(driver, <span class=\"string\">\"virpipe\"</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">virgl_winsys</span> *<span class=\"title\">vws</span>;</span></span><br><span class=\"line\">      vws = virgl_vtest_winsys_wrap(winsys);</span><br><span class=\"line\">      screen = virgl_create_screen(vws, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GALLIUM_SOFTPIPE)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (screen == <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(driver, <span class=\"string\">\"softpipe\"</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">      screen = softpipe_create_screen(winsys);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GALLIUM_SWR)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (screen == <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(driver, <span class=\"string\">\"swr\"</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">      screen = swr_create_screen(winsys);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GALLIUM_ZINK)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (screen == <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"built_in\">strcmp</span>(driver, <span class=\"string\">\"zink\"</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">      screen = zink_create_screen(winsys);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> screen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_screen</span> *</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">sw_screen_create</span>(<span class=\"title\">struct</span> <span class=\"title\">sw_winsys</span> *<span class=\"title\">winsys</span>)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *default_driver;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *driver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GALLIUM_LLVMPIPE)</span></span><br><span class=\"line\">   default_driver = <span class=\"string\">\"llvmpipe\"</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(GALLIUM_SOFTPIPE)</span></span><br><span class=\"line\">   default_driver = <span class=\"string\">\"softpipe\"</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(GALLIUM_SWR)</span></span><br><span class=\"line\">   default_driver = <span class=\"string\">\"swr\"</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(GALLIUM_ZINK)</span></span><br><span class=\"line\">   default_driver = <span class=\"string\">\"zink\"</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\">   default_driver = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">   driver = debug_get_option(<span class=\"string\">\"GALLIUM_DRIVER\"</span>, default_driver);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> sw_screen_create_named(winsys, driver);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitlab.freedesktop.org/mesa/mesa/blob/master/src/gallium/state_trackers/glx/xlib/xm_api.c\" target=\"_blank\" rel=\"noopener\">xm_api.c</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Driver interface routines, set up by xlib backend on library</span></span><br><span class=\"line\"><span class=\"comment\"> * _init().  These are global in the same way that function names are</span></span><br><span class=\"line\"><span class=\"comment\"> * global.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xm_driver</span> <span class=\"title\">driver</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">st_api</span> *<span class=\"title\">stapi</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">xmesa_set_driver</span><span class=\"params\">( <span class=\"keyword\">const</span> struct xm_driver *templ )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   driver = *templ;</span><br><span class=\"line\">   stapi = driver.create_st_api();</span><br><span class=\"line\"></span><br><span class=\"line\">   xmesa_strict_invalidate =</span><br><span class=\"line\">      debug_get_bool_option(<span class=\"string\">\"XMESA_STRICT_INVALIDATE\"</span>, FALSE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> XMesaDisplay</span><br><span class=\"line\">xmesa_init_display( Display *display )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">mtx_t</span> init_mutex = _MTX_INITIALIZER_NP;</span><br><span class=\"line\">   XMesaDisplay xmdpy;</span><br><span class=\"line\">   XMesaExtDisplayInfo *info;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (display == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   mtx_lock(&amp;init_mutex);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Look for XMesaDisplay which corresponds to this display */</span></span><br><span class=\"line\">   info = MesaExtInfo.head;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(info) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (info-&gt;display == display) &#123;</span><br><span class=\"line\">         <span class=\"comment\">/* Found it */</span></span><br><span class=\"line\">         mtx_unlock(&amp;init_mutex);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>  &amp;info-&gt;mesaDisplay;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      info = info-&gt;next;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Not found.  Create new XMesaDisplay */</span></span><br><span class=\"line\">   <span class=\"comment\">/* first allocate X-related resources and hook destroy callback */</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* allocate mesa display info */</span></span><br><span class=\"line\">   info = (XMesaExtDisplayInfo *) Xmalloc(<span class=\"keyword\">sizeof</span>(XMesaExtDisplayInfo));</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (info == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">      mtx_unlock(&amp;init_mutex);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   info-&gt;display = display;</span><br><span class=\"line\"></span><br><span class=\"line\">   xmdpy = &amp;info-&gt;mesaDisplay; <span class=\"comment\">/* to be filled out below */</span></span><br><span class=\"line\">   xmdpy-&gt;display = display;</span><br><span class=\"line\">   xmdpy-&gt;pipe = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   xmdpy-&gt;smapi = CALLOC_STRUCT(st_manager);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!xmdpy-&gt;smapi) &#123;</span><br><span class=\"line\">      Xfree(info);</span><br><span class=\"line\">      mtx_unlock(&amp;init_mutex);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   xmdpy-&gt;screen = driver.create_pipe_screen(display);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!xmdpy-&gt;screen) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">free</span>(xmdpy-&gt;smapi);</span><br><span class=\"line\">      Xfree(info);</span><br><span class=\"line\">      mtx_unlock(&amp;init_mutex);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* At this point, both smapi and screen are known to be valid */</span></span><br><span class=\"line\">   xmdpy-&gt;smapi-&gt;screen = xmdpy-&gt;screen;</span><br><span class=\"line\">   xmdpy-&gt;smapi-&gt;get_param = xmesa_get_param;</span><br><span class=\"line\">   (<span class=\"keyword\">void</span>) mtx_init(&amp;xmdpy-&gt;mutex, mtx_plain);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* chain to the list of displays */</span></span><br><span class=\"line\">   _XLockMutex(_Xglobal_lock);</span><br><span class=\"line\">   info-&gt;next = MesaExtInfo.head;</span><br><span class=\"line\">   MesaExtInfo.head = info;</span><br><span class=\"line\">   MesaExtInfo.ndisplays++;</span><br><span class=\"line\">   _XUnlockMutex(_Xglobal_lock);</span><br><span class=\"line\"></span><br><span class=\"line\">   mtx_unlock(&amp;init_mutex);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> xmdpy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>where <code>driver.create_pipe_screen(display)</code> is instantiated as <code>xlib_driver.swrast_xlib_create_screen</code>. As we see, the dynamic library routine <code>_init()</code> will set <code>xlib_driver.create_pipe_screen</code> to <code>swrast_xlib_create_screen</code> that return a <code>pipe_screen</code> to be set to the <code>st_manager-&gt;screen</code>. Eventually those two helper functions decide which gallium driver backend will be used by compilation macros.</p>\n<h2 id=\"Gallium-Genbu\"><a href=\"#Gallium-Genbu\" class=\"headerlink\" title=\"Gallium Genbu\"></a>Gallium Genbu</h2><p>To verify the analysis above we will try to add a customized gallium driver named <strong>genbu</strong> as a clone from the existing softpipe based GLX. All that we will do is three parts work below.</p>\n<ul>\n<li>key data structures: genbu_screen, genbu_context, the related callbacks and definitions </li>\n<li>helper functions for loading software rasterizers for GLX</li>\n<li>build scripts</li>\n</ul>\n<h3 id=\"Added-or-Modified-Sources-and-Build-Scripts\"><a href=\"#Added-or-Modified-Sources-and-Build-Scripts\" class=\"headerlink\" title=\"Added or Modified Sources and Build Scripts\"></a><a href=\"https://gitlab.freedesktop.org/lucmaa/mesa/tree/gallium-gb-1.0\" target=\"_blank\" rel=\"noopener\">Added or Modified Sources and Build Scripts</a></h3><h3 id=\"Trace\"><a href=\"#Trace\" class=\"headerlink\" title=\"Trace\"></a>Trace</h3><table>\n<thead>\n<tr>\n<th><em>belong</em></th>\n<th><em>hook</em></th>\n<th><em>callback</em></th>\n<th><em>caller</em></th>\n<th><em>X/GL API</em></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pipe_screen</td>\n<td>resource_create</td>\n<td>softpipe_resource_create</td>\n<td>bufferobj_data</td>\n<td></td>\n</tr>\n<tr>\n<td>pipe_context</td>\n<td>transfer_map</td>\n<td>softpipe_transfer_map</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>pipe_context</td>\n<td>create_surface</td>\n<td>softpipe_create_surface</td>\n<td>st_framebuffer_validate</td>\n<td></td>\n</tr>\n<tr>\n<td>pipe_context</td>\n<td>flush</td>\n<td>softpipe_flush_wrapped</td>\n<td>st_context_flush</td>\n<td>glXSwapBuffers</td>\n</tr>\n<tr>\n<td>pipe_context</td>\n<td>clear</td>\n<td>softpipe_clear</td>\n<td>st_Clear</td>\n<td>glClear</td>\n</tr>\n<tr>\n<td>pipe_context</td>\n<td>draw_vbo</td>\n<td>softpipe_draw_vbo</td>\n<td>st_draw_vbo</td>\n<td>glCallList</td>\n</tr>\n<tr>\n<td>pipe_context</td>\n<td>draw_vbo</td>\n<td>softpipe_draw_vbo</td>\n<td>st_draw_vbo</td>\n<td>glCallList</td>\n</tr>\n</tbody></table>\n<h2 id=\"DRI-Based-GLX-Demos\"><a href=\"#DRI-Based-GLX-Demos\" class=\"headerlink\" title=\"DRI-Based GLX Demos\"></a>DRI-Based GLX Demos</h2><h3 id=\"Loading\"><a href=\"#Loading\" class=\"headerlink\" title=\"Loading\"></a>Loading</h3><ul>\n<li><code>__glXInitialize</code></li>\n<li><code>driOpenDriver</code></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GLX_DIRECT_RENDERING) &amp;&amp; !defined(GLX_USE_APPLEGL)</span></span><br><span class=\"line\">   glx_direct = !env_var_as_boolean(<span class=\"string\">\"LIBGL_ALWAYS_INDIRECT\"</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">   glx_accel = !env_var_as_boolean(<span class=\"string\">\"LIBGL_ALWAYS_SOFTWARE\"</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   dpyPriv-&gt;drawHash = __glxHashCreate();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    ** Initialize the direct rendering per display data and functions.</span></span><br><span class=\"line\"><span class=\"comment\">    ** Note: This _must_ be done before calling any other DRI routines</span></span><br><span class=\"line\"><span class=\"comment\">    ** (e.g., those called in AllocAndFetchScreenConfigs).</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(GLX_USE_DRM)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (glx_direct &amp;&amp; glx_accel) &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(HAVE_DRI3)</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!env_var_as_boolean(<span class=\"string\">\"LIBGL_DRI3_DISABLE\"</span>, <span class=\"literal\">false</span>))</span><br><span class=\"line\">         dpyPriv-&gt;dri3Display = dri3_create_display(dpy);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* HAVE_DRI3 */</span></span></span><br><span class=\"line\">      dpyPriv-&gt;dri2Display = dri2CreateDisplay(dpy);</span><br><span class=\"line\">      dpyPriv-&gt;driDisplay = driCreateDisplay(dpy);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* GLX_USE_DRM */</span></span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (glx_direct)</span><br><span class=\"line\">      dpyPriv-&gt;driswDisplay = driswCreateDisplay(dpy);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* GLX_DIRECT_RENDERING &amp;&amp; !GLX_USE_APPLEGL */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> GLX_USE_APPLEGL</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!applegl_create_display(dpyPriv)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">free</span>(dpyPriv);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> GLX_USE_WINDOWSGL</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (glx_direct &amp;&amp; glx_accel)</span><br><span class=\"line\">      dpyPriv-&gt;windowsdriDisplay = driwindowsCreateDisplay(dpy);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!AllocAndFetchScreenConfigs(dpy, dpyPriv)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">free</span>(dpyPriv);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>This process of loading drivers works similarly with that of gallium-based glx. Compilation macros and environment variables make a difference. There are several approaches to load the specific drivers:</p>\n<ul>\n<li><code>dri3_create_display</code></li>\n<li><code>dri2CreateDisplay</code></li>\n<li><code>driCreateDisplay</code></li>\n<li><code>driswCreateDisplay</code></li>\n<li><code>applegl_create_display</code></li>\n<li><code>driwindowsCreateDisplay</code></li>\n</ul>\n<p>Let’s look into <code>driCreateDisplay</code>. Once it manages to attach to <code>driCreateScreen</code> which searches and matches the appropriate gallium driver the function <code>driOpenDriver</code> will open the <strong>found</strong> driver by its name like “i965”, “radeon”, “nouveau”, etc. These drivers are supposed to be installed at <strong><code>LIBGL_DRIVERS_PATH</code></strong> or <code>LIBGL_DRIVERS_DIR</code>(deprecated) and named as <code>*_dri.so</code> by default.</p>\n<p>Like Gallium-based GLX’s <code>_init</code> routine with GCC <strong><code>constructor</code></strong> attribute, DRI-based GLX also defines a routine <code>megadriver_stub_init</code> with <code>constructor</code> attribute which allows to load the specific driver in a way of <strong><code>__DRIextension</code></strong>.</p>\n<div align=center><img src=\"/mesa/gdb.svg\" class=\"\" title=\"osdemo\"></div>\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This is a constructor function for the megadriver dynamic library.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * When the driver is dlopen'ed, this function will run. It will</span></span><br><span class=\"line\"><span class=\"comment\"> * search for the name of the foo_dri.so file that was opened using</span></span><br><span class=\"line\"><span class=\"comment\"> * the dladdr function.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * After finding foo's name, it will call __driDriverGetExtensions_foo</span></span><br><span class=\"line\"><span class=\"comment\"> * and use the return to update __driDriverExtensions to enable</span></span><br><span class=\"line\"><span class=\"comment\"> * compatibility with older DRI driver loaders.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">__attribute__((constructor)) <span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">megadriver_stub_init(<span class=\"keyword\">void</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Allocate, initialize and return a __DRIdisplayPrivate object.</span></span><br><span class=\"line\"><span class=\"comment\"> * This is called from __glXInitialize() when we are given a new</span></span><br><span class=\"line\"><span class=\"comment\"> * display pointer.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">_X_HIDDEN __GLXDRIdisplay *</span><br><span class=\"line\">driCreateDisplay(Display * dpy)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dri_display</span> *<span class=\"title\">pdpyp</span>;</span></span><br><span class=\"line\">   <span class=\"keyword\">int</span> eventBase, errorBase;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> major, minor, patch;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!XF86DRIQueryExtension(dpy, &amp;eventBase, &amp;errorBase)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!XF86DRIQueryVersion(dpy, &amp;major, &amp;minor, &amp;patch)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   pdpyp = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span> *pdpyp);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!pdpyp) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   pdpyp-&gt;driMajor = major;</span><br><span class=\"line\">   pdpyp-&gt;driMinor = minor;</span><br><span class=\"line\">   pdpyp-&gt;driPatch = patch;</span><br><span class=\"line\"></span><br><span class=\"line\">   pdpyp-&gt;base.destroyDisplay = driDestroyDisplay;</span><br><span class=\"line\">   pdpyp-&gt;base.createScreen = driCreateScreen;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;pdpyp-&gt;base;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Contexts\"><a href=\"#Contexts\" class=\"headerlink\" title=\"Contexts\"></a>Contexts</h2><p>There are a variety of <strong>contexts</strong> in Mesa. They are designed as a framework of layers.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__________________</span><br><span class=\"line\">|                |</span><br><span class=\"line\">|   gl_contex    | --------------&gt; standard &amp; general</span><br><span class=\"line\">|________________|</span><br><span class=\"line\"></span><br><span class=\"line\">__________________</span><br><span class=\"line\">|                |</span><br><span class=\"line\">|   st_contex    | --------------&gt; adapter</span><br><span class=\"line\">|________________|</span><br><span class=\"line\"></span><br><span class=\"line\">__________________</span><br><span class=\"line\">|                |</span><br><span class=\"line\">|  draw_contex   | --------------&gt; driver-specific</span><br><span class=\"line\">|________________|</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"gl-context\"><a href=\"#gl-context\" class=\"headerlink\" title=\"gl_context\"></a>gl_context</h3><blockquote><p>This is the central context data structure for Mesa. Almost all OpenGL state is contained in this structure. Think of this as a base class from which device drivers will derive sub classes.</p>\n</blockquote>\n<p>Apart from OpenGL state it contains several other contexts</p>\n<ul>\n<li><code>swrast_context</code></li>\n<li><code>swsetup_context</code></li>\n<li><code>swtnl_context</code></li>\n<li><code>vbo_context</code></li>\n<li><code>st_context</code></li>\n</ul>\n<h3 id=\"st-context\"><a href=\"#st-context\" class=\"headerlink\" title=\"st_context\"></a>st_context</h3><h3 id=\"draw-context\"><a href=\"#draw-context\" class=\"headerlink\" title=\"draw_context\"></a>draw_context</h3><h3 id=\"vbo-context\"><a href=\"#vbo-context\" class=\"headerlink\" title=\"vbo_context\"></a>vbo_context</h3><p>VBO is short for vertex buffer object. This context derives two kinds of vbo contexts, <code>vbo_exec_context</code> and <code>vbo_save_context</code> which <code>vbo_exec_context</code> is generic for core and compatible ogl and the other is specific for compatible ogl.</p>\n<h4 id=\"vbo-exec-vtx-init\"><a href=\"#vbo-exec-vtx-init\" class=\"headerlink\" title=\"vbo_exec_vtx_init\"></a>vbo_exec_vtx_init</h4><ul>\n<li>Allocate a <code>gl_buffer_object</code> which just is referenced.</li>\n<li>Initialize vbo attributes including size, type and active size.</li>\n</ul>\n<h4 id=\"vbo-vs-vao\"><a href=\"#vbo-vs-vao\" class=\"headerlink\" title=\"vbo vs. vao\"></a>vbo vs. vao</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_buffer_object</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   GLint RefCount;</span><br><span class=\"line\">   GLuint Name;</span><br><span class=\"line\">   GLchar *Label;       </span><br><span class=\"line\">   GLenum16 Usage;      </span><br><span class=\"line\">   GLbitfield StorageFlags; </span><br><span class=\"line\">   GLsizeiptrARB Size;  </span><br><span class=\"line\">   GLubyte *Data;       </span><br><span class=\"line\">   GLboolean DeletePending;   </span><br><span class=\"line\">   GLboolean Written;   </span><br><span class=\"line\">   GLboolean Purgeable; </span><br><span class=\"line\">   GLboolean Immutable; </span><br><span class=\"line\">   gl_buffer_usage UsageHistory; </span><br><span class=\"line\">   GLuint NumSubDataCalls;</span><br><span class=\"line\">   GLuint NumMapBufferWriteCalls;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_buffer_mapping</span> <span class=\"title\">Mappings</span>[<span class=\"title\">MAP_COUNT</span>];</span></span><br><span class=\"line\">   <span class=\"keyword\">simple_mtx_t</span> MinMaxCacheMutex;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hash_table</span> *<span class=\"title\">MinMaxCache</span>;</span></span><br><span class=\"line\">   <span class=\"keyword\">unsigned</span> MinMaxCacheHitIndices;</span><br><span class=\"line\">   <span class=\"keyword\">unsigned</span> MinMaxCacheMissIndices;</span><br><span class=\"line\">   <span class=\"keyword\">bool</span> MinMaxCacheDirty;</span><br><span class=\"line\">   <span class=\"keyword\">bool</span> HandleAllocated; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_vertex_array_object</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">   GLuint Name;</span><br><span class=\"line\">   GLint RefCount;</span><br><span class=\"line\">   GLchar *Label;       </span><br><span class=\"line\">   GLboolean EverBound;</span><br><span class=\"line\">   <span class=\"keyword\">bool</span> SharedAndImmutable;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_array_attributes</span> <span class=\"title\">VertexAttrib</span>[<span class=\"title\">VERT_ATTRIB_MAX</span>];</span></span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_vertex_buffer_binding</span> <span class=\"title\">BufferBinding</span>[<span class=\"title\">VERT_ATTRIB_MAX</span>];</span></span><br><span class=\"line\">   GLbitfield VertexAttribBufferMask;</span><br><span class=\"line\">   GLbitfield Enabled;</span><br><span class=\"line\">   GLbitfield _EffEnabledVBO;</span><br><span class=\"line\">   gl_attribute_map_mode _AttributeMapMode;</span><br><span class=\"line\">   GLbitfield NewArrays;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gl_buffer_object</span> *<span class=\"title\">IndexBufferObj</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dispatchers\"><a href=\"#Dispatchers\" class=\"headerlink\" title=\"Dispatchers\"></a>Dispatchers</h2><ul>\n<li><em><code>Exec</code></em>: The current dispatch table for non-displaylist-saving execution, either BeginEnd or OutsideBeginEnd</li>\n<li><em><code>OutsideBeginEnd</code></em>: The normal dispatch table for non-displaylist-saving, non-begin/end</li>\n<li><em><code>Save</code></em>: The dispatch table used between glNewList() and glEndList()</li>\n<li><em><code>BeginEnd</code></em>: The dispatch table used between glBegin() and glEnd() (outside of a display list). Only valid functions between those two are set, which is mostly just the set in a GLvertexformat struct.</li>\n<li><em><code>ContextLost</code></em>: Dispatch table for when a graphics reset has happened.</li>\n<li><em><code>MarshalExec</code></em>: Dispatch table used to marshal API calls from the client program to a separate server thread. NULL if API calls are not being marshalled to another thread.</li>\n<li><em><code>CurrentClientDispatch</code></em>: Dispatch table currently in use for fielding API calls from the client program. If API calls are being marshalled to another thread, this refers to <em><code>MarshalExec</code></em>. Otherwise it refers to <em><code>CurrentServerDispatch</code></em>.</li>\n<li><em><code>CurrentServerDispatch</code></em>: Dispatch table currently in use for performing API calls. It refers to <em><code>Save</code></em> or <em><code>Exec</code></em>.</li>\n</ul>\n<h2 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h2><ul>\n<li>draw module</li>\n<li>CSO module</li>\n<li>translate module</li>\n<li>VBO module</li>\n<li>TNL module(Transform &amp; Light)</li>\n</ul>\n<h2 id=\"draw-xxx-stage\"><a href=\"#draw-xxx-stage\" class=\"headerlink\" title=\"draw_xxx_stage\"></a>draw_xxx_stage</h2><ul>\n<li><strong><code>extern struct draw_stage *draw_unfilled_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_twoside_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_offset_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_clip_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_flatshade_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_cull_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_stipple_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_wide_line_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_wide_point_stage( struct draw_context *context );</code></strong></li>\n<li><strong><code>extern struct draw_stage *draw_validate_stage( struct draw_context *context );</code></strong></li>\n</ul>\n<h2 id=\"Auxiliary\"><a href=\"#Auxiliary\" class=\"headerlink\" title=\"Auxiliary\"></a>Auxiliary</h2><ul>\n<li><p>cso_cache<br>  The CSO cache is used to accelerate preparation of state by saving driver-specific state structure for later use.</p>\n</li>\n<li><p>draw<br>  Draw is a software TCL pipeline for hardware that lacks vertex shaders or other essential parts of pre-rasterization vertex preparation.</p>\n</li>\n<li><p>driver_ddebug</p>\n</li>\n<li><p>driver_noop</p>\n</li>\n<li><p>driver_rbug</p>\n</li>\n<li><p>driver_trace</p>\n</li>\n<li><p>gallivm</p>\n</li>\n<li><p>hud</p>\n</li>\n<li><p>indices<br>  Indices provides tools for translating or generating element indices for use with element-based rendering.</p>\n</li>\n<li><p>nir</p>\n</li>\n<li><p>os</p>\n<ul>\n<li>memory allocation</li>\n<li>simple message logging</li>\n<li>obtaining run-time configuration option</li>\n<li>threading primitives<br>The OS module contains the abstraction for basic operating system services above. This is the bare minimum required to port Gallium to a new platform. It already provides the implementations of these abstractions for the most common platforms. When targeting an embedded platform no implementation will be provided - these must be provided separately.</li>\n</ul>\n</li>\n<li><p>pipe-loader</p>\n</li>\n<li><p>pipebuffer</p>\n</li>\n<li><p>postprocess</p>\n</li>\n<li><p>rbug</p>\n</li>\n<li><p>renderonly</p>\n</li>\n<li><p>rtasm</p>\n</li>\n<li><p>target-helpers</p>\n</li>\n<li><p>tgsi</p>\n</li>\n<li><p>translate</p>\n</li>\n<li><p>util</p>\n</li>\n<li><p>vl</p>\n</li>\n</ul>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><h4 id=\"When-xlib-creates-pipe-screen-only-software-rasterizers-or-pipes’screen-are-created-And-llvmpipe-softpipe-virgl-swr-unexceptionally-are-software-rasterizers-or-virtual-GPU-Zink-is-in-brief-a-translator-from-OpenGL-to-Vulkan-and-implemented-as-Gallium-driver-So-why-only-software-pipes\"><a href=\"#When-xlib-creates-pipe-screen-only-software-rasterizers-or-pipes’screen-are-created-And-llvmpipe-softpipe-virgl-swr-unexceptionally-are-software-rasterizers-or-virtual-GPU-Zink-is-in-brief-a-translator-from-OpenGL-to-Vulkan-and-implemented-as-Gallium-driver-So-why-only-software-pipes\" class=\"headerlink\" title=\"When xlib creates pipe screen, only software rasterizers or pipes’screen are created. And llvmpipe, softpipe, virgl, swr, unexceptionally, are software rasterizers or virtual GPU. Zink is, in brief, a translator from OpenGL to Vulkan and implemented as Gallium driver. So why only software pipes?\"></a>When xlib creates pipe screen, <em>only</em> software rasterizers or pipes’screen are created. And llvmpipe, softpipe, virgl, swr, unexceptionally, are software rasterizers or virtual GPU. <a href=\"https://www.collabora.com/news-and-blog/blog/2018/10/31/introducing-zink-opengl-implementation-vulkan/\" target=\"_blank\" rel=\"noopener\">Zink</a> is, in brief, a translator from OpenGL to Vulkan and implemented as Gallium driver. So why only software pipes?</h4><p>The answer is <strong><code>sw_winsys</code></strong>. All of target helpers’s parameter is a <code>sw_winsys</code>. Check mesa source directory: <a href=\"https://gitlab.freedesktop.org/mesa/mesa/tree/master/src/gallium/winsys\" target=\"_blank\" rel=\"noopener\">mesa/src/gallium/winsys</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">amdgpu</span><br><span class=\"line\">etnaviv</span><br><span class=\"line\">freedreno</span><br><span class=\"line\">i915</span><br><span class=\"line\">iris</span><br><span class=\"line\">kmsro</span><br><span class=\"line\">lima</span><br><span class=\"line\">nouveau</span><br><span class=\"line\">panfrost</span><br><span class=\"line\">radeon</span><br><span class=\"line\">svga</span><br><span class=\"line\">sw</span><br><span class=\"line\">tegra</span><br><span class=\"line\">v3d</span><br><span class=\"line\">vc4</span><br><span class=\"line\">virgl</span><br></pre></td></tr></table></figure>\n\n<p>To put it simply, specific driver corresponds to specific winsys. The <code>sw</code> is for software rasterizers. If you expect to create pipe screen for some driver else, you need to add another target helper with its winsys as parameter like: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline struct pipe_screen *</span><br><span class=\"line\">i915_screen_create_named(struct i915_drm_winsys *winsys, const char *driver)</span><br></pre></td></tr></table></figure>\n\n<p>That means you have to declare a bunch of new interfaces from the top. So you’d better wrap the function to create specific driver’s winsys so that it can take a sw_winsys as its parameter like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#if defined(GALLIUM_VIRGL)</span><br><span class=\"line\">   if (screen == NULL &amp;&amp; strcmp(driver, &quot;virpipe&quot;) == 0) &#123;</span><br><span class=\"line\">      struct virgl_winsys *vws;</span><br><span class=\"line\">      vws = virgl_vtest_winsys_wrap(winsys);</span><br><span class=\"line\">      screen = virgl_create_screen(vws, NULL);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"libGL-so-is-not-built-until-glx-option-is-enabled-in-meson-options-txt\"><a href=\"#libGL-so-is-not-built-until-glx-option-is-enabled-in-meson-options-txt\" class=\"headerlink\" title=\"libGL.so is not built until glx option is enabled in meson_options.txt.\"></a>libGL.so is not built until glx option is enabled in <strong>meson_options.txt</strong>.</h4><p>Only with essential build-time dependencies for X11 installed and glx option configured is libGL.so built.</p>\n<h4 id=\"What-role-do-DRM-DRI-and-Gallium-play-in-Mesa\"><a href=\"#What-role-do-DRM-DRI-and-Gallium-play-in-Mesa\" class=\"headerlink\" title=\"What role do DRM, DRI and Gallium play in Mesa?\"></a>What role do DRM, DRI and Gallium play in Mesa?</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_libdrm_checks = [</span><br><span class=\"line\">  [&apos;intel&apos;, with_dri_i915 or with_gallium_i915],</span><br><span class=\"line\">  [&apos;amdgpu&apos;, with_amd_vk or with_gallium_radeonsi],</span><br><span class=\"line\">  [&apos;radeon&apos;, (with_gallium_radeonsi or with_dri_r100 or with_dri_r200 or</span><br><span class=\"line\">              with_gallium_r300 or with_gallium_r600)],</span><br><span class=\"line\">  [&apos;nouveau&apos;, (with_gallium_nouveau or with_dri_nouveau)],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>DRI and Gallium seem to be respectively different underlying implementation in Mesa. Moreover in term of swrast and i915, you have to choose either of both as you can read the following code snippet in meson.build. In fact DRI is more complicated and staler but Gallium is more smaller and simpler.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if with_dri_swrast and (with_gallium_softpipe or with_gallium_swr)</span><br><span class=\"line\">  error(&apos;Only one swrast provider can be built&apos;)</span><br><span class=\"line\">endif</span><br><span class=\"line\">if with_dri_i915 and with_gallium_i915</span><br><span class=\"line\">  error(&apos;Only one i915 provider can be built&apos;)</span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"What-problems-are-encountered-when-you-build-mesa-on-the-WSL\"><a href=\"#What-problems-are-encountered-when-you-build-mesa-on-the-WSL\" class=\"headerlink\" title=\"What problems are encountered when you build mesa on the WSL?\"></a>What problems are encountered when you build mesa on the WSL?</h4><ul>\n<li>dri based GLX requires shared-glapi</li>\n<li>Gallium-xlib based GLX requires softpipe or llvmpipe<ul>\n<li>means that <code>gallium-xlib</code> is supposed to only support software rasterizers(llvmpipe, softpipe) and virtual GPU(virgl, swr).<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">option(</span><br><span class=\"line\">  &apos;glx&apos;,</span><br><span class=\"line\">  type : &apos;combo&apos;,</span><br><span class=\"line\">  value : &apos;xlib&apos;,</span><br><span class=\"line\">  choices : [&apos;auto&apos;, &apos;disabled&apos;, &apos;dri&apos;, &apos;xlib&apos;, &apos;gallium-xlib&apos;],</span><br><span class=\"line\">  description : &apos;Build support for GLX platform&apos;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\nIn Mesa, glx is implemented in three ways:</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>*-based</th>\n<th>backend</th>\n<th>window system</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dri-based</td>\n<td>non-sw-pipes</td>\n<td>*_drm_winsys</td>\n</tr>\n<tr>\n<td>xlib</td>\n<td>tnl</td>\n<td>sw_winsys</td>\n</tr>\n<tr>\n<td>gallium-based</td>\n<td>softpipe/llvmpipe</td>\n<td>sw_winsys</td>\n</tr>\n</tbody></table>\n<ul>\n<li>OSMesa gallium requires gallium softpipe or llvmpipe<ul>\n<li>means if <code>osmesa</code> is configured as <code>gallium</code>, <code>gallium-drivers</code> must include <code>swrast</code> but the <code>classic</code> osmesa uses the fixed-functioned TNL by default.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">option(</span><br><span class=\"line\">  &apos;osmesa&apos;,</span><br><span class=\"line\">  type : &apos;combo&apos;,</span><br><span class=\"line\">  value : &apos;gallium&apos;,</span><br><span class=\"line\">  choices : [&apos;none&apos;, &apos;classic&apos;, &apos;gallium&apos;],</span><br><span class=\"line\">  description : &apos;Build OSmesa.&apos;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>Cannot build GLX support without X11 platform support and at least one OpenGL API<ul>\n<li>GLX, As the name suggests, is dedicated to X11 winsys.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"When-glXInitialize-creates-the-Display-only-driswCreateDisplay-returns-successfully-Both-of-dri2CreateDisplay-and-driCreateDisplay-failed\"><a href=\"#When-glXInitialize-creates-the-Display-only-driswCreateDisplay-returns-successfully-Both-of-dri2CreateDisplay-and-driCreateDisplay-failed\" class=\"headerlink\" title=\"When __glXInitialize creates the Display, only driswCreateDisplay returns successfully. Both of dri2CreateDisplay and driCreateDisplay failed.\"></a>When <code>__glXInitialize</code> creates the <code>Display</code>, <strong>only</strong> <code>driswCreateDisplay</code> returns successfully. Both of <code>dri2CreateDisplay</code> and <code>driCreateDisplay</code> failed.</h4><ul>\n<li>env: WSL on Windows 10 and with vcXsrv installed on the host as X server</li>\n</ul>\n<p>The cause of failure is that vcXsrv has no extensions with DRI or DRI2. This lack of X server extension fails <code>DRI2QueryExtension</code> and <code>XF86DRIQueryExtension</code> so that the loading of gallium driver is not invoked.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * XextAddDisplay - add a display to this extension</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">XExtDisplayInfo *<span class=\"title\">XextAddDisplay</span> <span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    XExtensionInfo *extinfo,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    Display *dpy,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    _Xconst <span class=\"keyword\">char</span> *ext_name,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    XExtensionHooks *hooks,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">int</span> nevents,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    XPointer data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    XExtDisplayInfo *dpyinfo;</span><br><span class=\"line\"></span><br><span class=\"line\">    dpyinfo = (XExtDisplayInfo *) Xmalloc (<span class=\"keyword\">sizeof</span> (XExtDisplayInfo));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dpyinfo) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    dpyinfo-&gt;display = dpy;</span><br><span class=\"line\">    dpyinfo-&gt;data = data;</span><br><span class=\"line\">    dpyinfo-&gt;codes = XInitExtension (dpy, ext_name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * if the server has the extension, then we can initialize the</span></span><br><span class=\"line\"><span class=\"comment\">     * appropriate function vectors</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dpyinfo-&gt;codes) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, j = dpyinfo-&gt;codes-&gt;first_event; i &lt; nevents; i++, j++) &#123;</span><br><span class=\"line\">\t    XESetWireToEvent (dpy, j, hooks-&gt;wire_to_event);</span><br><span class=\"line\">\t    XESetEventToWire (dpy, j, hooks-&gt;event_to_wire);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* register extension for XGE */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(ext_name, GE_NAME))</span><br><span class=\"line\">            xgeExtRegister(dpy, dpyinfo-&gt;codes-&gt;major_opcode, hooks);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;create_gc)</span><br><span class=\"line\">\t  XESetCreateGC (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;create_gc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;copy_gc)</span><br><span class=\"line\">\t  XESetCopyGC (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;copy_gc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;flush_gc)</span><br><span class=\"line\">\t  XESetFlushGC (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;flush_gc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;free_gc)</span><br><span class=\"line\">\t  XESetFreeGC (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;free_gc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;create_font)</span><br><span class=\"line\">\t  XESetCreateFont (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;create_font);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;free_font)</span><br><span class=\"line\">\t  XESetFreeFont (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;free_font);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;close_display)</span><br><span class=\"line\">\t  XESetCloseDisplay (dpy, dpyinfo-&gt;codes-&gt;extension,</span><br><span class=\"line\">\t\t\t     hooks-&gt;close_display);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;error)</span><br><span class=\"line\">\t  XESetError (dpy, dpyinfo-&gt;codes-&gt;extension, hooks-&gt;error);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hooks-&gt;error_string)</span><br><span class=\"line\">\t  XESetErrorString (dpy, dpyinfo-&gt;codes-&gt;extension,</span><br><span class=\"line\">\t\t\t    hooks-&gt;error_string);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (hooks-&gt;close_display) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* The server doesn't have this extension.</span></span><br><span class=\"line\"><span class=\"comment\">\t * Use a private Xlib-internal extension to hang the close_display</span></span><br><span class=\"line\"><span class=\"comment\">\t * hook on so that the \"cache\" (extinfo-&gt;cur) is properly cleaned.</span></span><br><span class=\"line\"><span class=\"comment\">\t * (XBUG 7955)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tXExtCodes *codes = XAddExtension(dpy);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!codes) &#123;</span><br><span class=\"line\">\t    XFree(dpyinfo);</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tXESetCloseDisplay (dpy, codes-&gt;extension, hooks-&gt;close_display);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * now, chain it onto the list</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    _XLockMutex(_Xglobal_lock);</span><br><span class=\"line\">    dpyinfo-&gt;next = extinfo-&gt;head;</span><br><span class=\"line\">    extinfo-&gt;head = dpyinfo;</span><br><span class=\"line\">    extinfo-&gt;cur = dpyinfo;</span><br><span class=\"line\">    extinfo-&gt;ndisplays++;</span><br><span class=\"line\">    _XUnlockMutex(_Xglobal_lock);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dpyinfo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[{"_id":"source/_posts/windows-insider-program/windows_update.png","slug":"windows_update.png","post":"ckair1g0q0009pvk74nr70xay","modified":1,"renderable":0},{"_id":"source/_posts/mesa/OSMesaCreateContextExt.png","post":"ckair1g3j000kpvk7746z6obr","slug":"OSMesaCreateContextExt.png","modified":1,"renderable":1},{"_id":"source/_posts/mesa/PopMatrix.png","post":"ckair1g3j000kpvk7746z6obr","slug":"PopMatrix.png","modified":1,"renderable":1},{"_id":"source/_posts/mesa/gdb.svg","post":"ckair1g3j000kpvk7746z6obr","slug":"gdb.svg","modified":1,"renderable":1},{"_id":"source/_posts/mesa/glXChooseVisual.png","post":"ckair1g3j000kpvk7746z6obr","slug":"glXChooseVisual.png","modified":1,"renderable":1},{"_id":"source/_posts/mesa/glXCreateContext.png","post":"ckair1g3j000kpvk7746z6obr","slug":"glXCreateContext.png","modified":1,"renderable":1},{"_id":"source/_posts/mesa/glxgears.png","post":"ckair1g3j000kpvk7746z6obr","slug":"glxgears.png","modified":1,"renderable":1},{"_id":"source/_posts/mesa/osdemo.jpg","post":"ckair1g3j000kpvk7746z6obr","slug":"osdemo.jpg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ckair1g090001pvk7aaui9icu","tag_id":"ckair1g0h0003pvk7dqo3ci9b","_id":"ckair1g0q0008pvk7424t0x6h"},{"post_id":"ckair1g0e0002pvk717urfhdp","tag_id":"ckair1g0p0007pvk73v5r5t9w","_id":"ckair1g0u000bpvk7fzbwewkb"},{"post_id":"ckair1g0n0006pvk7co779gl4","tag_id":"ckair1g0t000apvk7gos6cc7t","_id":"ckair1g10000dpvk78y6pcna5"},{"post_id":"ckair1g0q0009pvk74nr70xay","tag_id":"ckair1g0v000cpvk782g81y9e","_id":"ckair1g16000fpvk781hkcjw7"},{"post_id":"ckair1g0q0009pvk74nr70xay","tag_id":"ckair1g11000epvk71vx41dmd","_id":"ckair1g18000gpvk79g2ahszk"},{"post_id":"ckair1g28000hpvk7br1u1qbi","tag_id":"ckair1g2a000ipvk7bfa00jq1","_id":"ckair1g2b000jpvk7detjef7k"},{"post_id":"ckair1g3j000kpvk7746z6obr","tag_id":"ckair1g11000epvk71vx41dmd","_id":"ckair1g3n000lpvk72u031h4e"}],"Tag":[{"name":"X11","_id":"ckair1g0h0003pvk7dqo3ci9b"},{"name":"gcc","_id":"ckair1g0p0007pvk73v5r5t9w"},{"name":"regex","_id":"ckair1g0t000apvk7gos6cc7t"},{"name":"WSL","_id":"ckair1g0v000cpvk782g81y9e"},{"name":"OpenGL","_id":"ckair1g11000epvk71vx41dmd"},{"name":"CUDA, WSL","_id":"ckair1g2a000ipvk7bfa00jq1"}]}}